{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"contracts/WBTCReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\\\";\\nimport \\\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\\\";\\n\\n\\ncontract WBTCReserve {\\n\\n    struct priceStruct {\\n        uint256 price;\\n        uint256 timestamp;\\n        uint256 decimals;\\n\\n    }\\n\\n    IERC20 wbtc;\\n    mapping(address => uint256) public balances;\\n    address private constant FLARE_CONTRACT_REGISTRY =\\n        0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019;\\n\\n    \\n    constructor(address _wBTC) {\\n        wbtc = IERC20(_wBTC);\\n    }\\n\\n    function supply(uint256 amount) external {\\n        IERC20(address(wbtc)).transferFrom(msg.sender, address(this), amount);\\n        balances[msg.sender] += amount;\\n    }\\n    \\n\\n    function getSupplyedAmount(address user) external view returns (uint256) {\\n        return balances[user];\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        require(balances[msg.sender] >= amount, \\\"Insufficient balance\\\");\\n        IERC20(address(wbtc)).transfer(msg.sender, amount);\\n        balances[msg.sender] -= amount;\\n    }\\n\\n    function getAssetPrice() external view returns (uint256, uint256, uint256){\\n        uint256 _price;\\n        uint256 _timestamp;\\n        uint256 _decimals;\\n\\n        IFlareContractRegistry contractRegistry = IFlareContractRegistry(\\n            FLARE_CONTRACT_REGISTRY);\\n\\n        // 3. Retrieve the FTSO Registry\\n        IFtsoRegistry ftsoRegistry = IFtsoRegistry(\\n            contractRegistry.getContractAddressByName('FtsoRegistry'));\\n\\n        // 4. Get latest price\\n        (_price, _timestamp, _decimals) =\\n            ftsoRegistry.getCurrentPriceWithDecimals(\\\"testBTC\\\");\\n        return (_price, _timestamp, _decimals);\\n    }\\n\\n    function getAssetAddress() external view returns (address) {\\n        return address(wbtc);\\n    }\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IFtsoRegistry is IFtsoRegistryGenesis {\\n\\n    struct PriceInfo {\\n        uint256 ftsoIndex;\\n        uint256 price;\\n        uint256 decimals;\\n        uint256 timestamp;\\n    }\\n\\n    function getFtso(uint256 _ftsoIndex) external view returns(IIFtso _activeFtsoAddress);\\n    function getFtsoBySymbol(string memory _symbol) external view returns(IIFtso _activeFtsoAddress);\\n    function getSupportedIndices() external view returns(uint256[] memory _supportedIndices);\\n    function getSupportedSymbols() external view returns(string[] memory _supportedSymbols);\\n    function getSupportedFtsos() external view returns(IIFtso[] memory _ftsos);\\n    function getFtsoIndex(string memory _symbol) external view returns (uint256 _assetIndex);\\n    function getFtsoSymbol(uint256 _ftsoIndex) external view returns (string memory _symbol);\\n    function getCurrentPrice(uint256 _ftsoIndex) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPrice(string memory _symbol) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPriceWithDecimals(uint256 _assetIndex) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n    function getCurrentPriceWithDecimals(string memory _symbol) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n\\n    function getAllCurrentPrices() external view returns (PriceInfo[] memory);\\n    function getCurrentPricesByIndices(uint256[] memory _indices) external view returns (PriceInfo[] memory);\\n    function getCurrentPricesBySymbols(string[] memory _symbols) external view returns (PriceInfo[] memory);\\n\\n    function getSupportedIndicesAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, IIFtso[] memory _ftsos);\\n\\n    function getSupportedSymbolsAndFtsos() external view \\n        returns(string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n\\n    function getSupportedIndicesAndSymbols() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols);\\n\\n    function getSupportedIndicesSymbolsAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\ninterface IFlareContractRegistry {\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(string calldata _name) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./IFtsoGenesis.sol\\\";\\n\\n\\ninterface IFtsoRegistryGenesis {\\n\\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/ftso/interface/IIFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../../userInterfaces/IFtso.sol\\\";\\nimport \\\"../../../util-contracts/token/token/interface/IIVPToken.sol\\\";\\n\\n\\ninterface IIFtso is IFtso, IFtsoGenesis {\\n\\n    /// function finalizePriceReveal\\n    /// called by reward manager only on correct timing.\\n    /// if price reveal period for epoch x ended. finalize.\\n    /// iterate list of price submissions\\n    /// find weighted median\\n    /// find adjucant 50% of price submissions.\\n    /// Allocate reward for any price submission which is same as a \\\"winning\\\" submission\\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\\n        returns(\\n            address[] memory _eligibleAddresses,\\n            uint256[] memory _natWeights,\\n            uint256 _totalNatWeight\\n        );\\n\\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    // activateFtso will be called by ftso manager once ftso is added \\n    // before this is done, FTSO can't run\\n    function activateFtso(\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    ) external;\\n\\n    function deactivateFtso() external;\\n\\n    // update initial price and timestamp - only if not active\\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\\n\\n    function configureEpochs(\\n        uint256 _maxVotePowerNatThresholdFraction,\\n        uint256 _maxVotePowerAssetThresholdFraction,\\n        uint256 _lowAssetUSDThreshold,\\n        uint256 _highAssetUSDThreshold,\\n        uint256 _highAssetTurnoutThresholdBIPS,\\n        uint256 _lowNatTurnoutThresholdBIPS,\\n        uint256 _elasticBandRewardBIPS,\\n        uint256 _elasticBandWidthPPM,\\n        address[] memory _trustedAddresses\\n    ) external;\\n\\n    function setAsset(IIVPToken _asset) external;\\n\\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\\n\\n    // current vote power block will update per reward epoch. \\n    // the FTSO doesn't have notion of reward epochs.\\n    // reward manager only can set this data. \\n    function setVotePowerBlock(uint256 _blockNumber) external;\\n\\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\\n  \\n    /**\\n     * @notice Returns ftso manager address\\n     */\\n    function ftsoManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns the FTSO asset\\n     * @dev Asset is null in case of multi-asset FTSO\\n     */\\n    function getAsset() external view returns (IIVPToken);\\n\\n    /**\\n     * @notice Returns the Asset FTSOs\\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\\n     */\\n    function getAssetFtsos() external view returns (IIFtso[] memory);\\n\\n    /**\\n     * @notice Returns current configuration of epoch state\\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \\n        elastic band (prices within _elasticBandWidthPPM of the median) \\n        and 10000 - elasticBandRewardBIPS to the IQR \\n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\\n     */\\n    function epochsConfiguration() external view \\n        returns (\\n            uint256 _maxVotePowerNatThresholdFraction,\\n            uint256 _maxVotePowerAssetThresholdFraction,\\n            uint256 _lowAssetUSDThreshold,\\n            uint256 _highAssetUSDThreshold,\\n            uint256 _highAssetTurnoutThresholdBIPS,\\n            uint256 _lowNatTurnoutThresholdBIPS,\\n            uint256 _elasticBandRewardBIPS,\\n            uint256 _elasticBandWidthPPM,\\n            address[] memory _trustedAddresses\\n        );\\n\\n    /**\\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\\n     * @return _assets                  the list of Assets that are accounted in vote\\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\\n     * @return _totalVotePowerNat       total native token vote power at block\\n     * @return _totalVotePowerAsset     total combined asset vote power at block\\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\\n     * @return _votePowerBlock          vote powewr block for given epoch\\n     */\\n    function getVoteWeightingParameters() external view \\n        returns (\\n            IIVPToken[] memory _assets,\\n            uint256[] memory _assetMultipliers,\\n            uint256 _totalVotePowerNat,\\n            uint256 _totalVotePowerAsset,\\n            uint256 _assetWeightRatio,\\n            uint256 _votePowerBlock\\n        );\\n\\n    function wNat() external view returns (IIVPToken);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IIVPContract.sol\\\";\\nimport \\\"./IIGovernanceVotePower.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPToken is IVPToken, IICleanable {\\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\\n     * and delegate governance vote power. \\n     */\\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtso {\\n    enum PriceFinalizationType {\\n        // initial state\\n        NOT_FINALIZED,\\n        // median calculation used to find price\\n        WEIGHTED_MEDIAN,\\n        // low turnout - price calculated from median of trusted addresses\\n        TRUSTED_ADDRESSES,\\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\\n        PREVIOUS_PRICE_COPIED,\\n        // price calculated from median of trusted addresses - triggered due to an exception\\n        TRUSTED_ADDRESSES_EXCEPTION,\\n        // previous price copied - triggered due to an exception\\n        PREVIOUS_PRICE_COPIED_EXCEPTION\\n    }\\n\\n    event PriceRevealed(\\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 timestamp,\\n        uint256 votePowerNat, uint256 votePowerAsset\\n    );\\n\\n    event PriceFinalized(\\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \\n        PriceFinalizationType finalizationType, uint256 timestamp\\n    );\\n\\n    event PriceEpochInitializedOnFtso(\\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\\n    );\\n\\n    event LowTurnout(\\n        uint256 indexed epochId,\\n        uint256 natTurnout,\\n        uint256 lowNatTurnoutThresholdBIPS,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Returns if FTSO is active\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the FTSO symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns current epoch id\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\\n     * @param _timestamp            Timestamp as seconds from unix epoch\\n     */\\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\\n    \\n    /**\\n     * @notice Returns random number of the specified epoch\\n     * @param _epochId              Id of the epoch\\n     */\\n    function getRandom(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns asset price consented in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _epochId                 Current epoch id\\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\\n     * @return _votePowerBlock          Vote power block for the current epoch\\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\\n     * @dev half-closed intervals - end time not included\\n     */\\n    function getPriceEpochData() external view returns (\\n        uint256 _epochId,\\n        uint256 _epochSubmitEndTime,\\n        uint256 _epochRevealEndTime,\\n        uint256 _votePowerBlock,\\n        bool _fallbackMode\\n    );\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _firstEpochStartTs           First epoch start timestamp\\n     * @return _submitPeriodSeconds         Submit period in seconds\\n     * @return _revealPeriodSeconds         Reveal period in seconds\\n     */\\n    function getPriceEpochConfiguration() external view returns (\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    );\\n    \\n    /**\\n     * @notice Returns asset price submitted by voter in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @param _voter                Address of the voter\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current asset price\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimals() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n    \\n    /**\\n     * @notice Returns current asset price calculated from trusted providers\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n\\n    /**\\n     * @notice Returns current asset price details\\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _priceTimestamp                          Time when price was updated for the last time\\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\\n     */\\n    function getCurrentPriceDetails() external view returns (\\n        uint256 _price,\\n        uint256 _priceTimestamp,\\n        PriceFinalizationType _priceFinalizationType,\\n        uint256 _lastPriceEpochFinalizationTimestamp,\\n        PriceFinalizationType _lastPriceEpochFinalizationType\\n    );\\n\\n    /**\\n     * @notice Returns current random number\\n     */\\n    function getCurrentRandom() external view returns (uint256);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../infrastructure/userInterfaces/IPChainStakeMirror.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\n/**\\n * Internal interface for contracts delegating their governance vote power.\\n */\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Emitted when a delegate's vote power changes, as a result of a new delegation\\n     * or a token transfer, for example.\\n     *\\n     * The event is always emitted from a `GovernanceVotePower` contract.\\n     * @param delegate The account receiving the changing delegated vote power.\\n     * @param previousBalance Delegated vote power before the change.\\n     * @param newBalance Delegated vote power after the change.\\n     */\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * Emitted when an account starts delegating vote power or switches its delegation\\n     * to another address.\\n     *\\n     * The event is always emitted from a `GovernanceVotePower` contract.\\n     * @param delegator Account delegating its vote power.\\n     * @param fromDelegate Account receiving the delegation before the change.\\n     * Can be address(0) if there was no previous delegation.\\n     * @param toDelegate Account receiving the delegation after the change.\\n     * Can be address(0) if `delegator` just undelegated all its vote power.\\n     */\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update governance vote power of all involved delegates after tokens are transferred.\\n     *\\n     * This function **MUST** be called after each governance token transfer for the\\n     * delegates to reflect the correct balance.\\n     * @param _from Source address of the transfer.\\n     * @param _to Destination address of the transfer.\\n     * @param _fromBalance _Ignored._\\n     * @param _toBalance _Ignored._\\n     * @param _amount Amount being transferred.\\n     */\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased.\\n     * History before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be lower than the current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     * @param _cleanerContract Address of the cleanup contract.\\n     * Usually this will be an instance of `CleanupBlockNumberManager`.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * Get the token that this governance vote power contract belongs to.\\n     * @return The IVPToken interface owning this contract.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    /**\\n     * Get the stake mirror contract that this governance vote power contract belongs to.\\n     * @return The IPChainStakeMirror interface owning this contract.\\n     */\\n    function pChainStakeMirror() external view returns (IPChainStakeMirror);\\n\\n    /**\\n     * Get the current cleanup block number set with `setCleanupBlockNumber()`.\\n     * @return The currently set cleanup block number.\\n     */\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transfered.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cumulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`, ignoring revocation information (and cache).\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`. Result doesn't change if vote power is revoked.\\n    */\\n    function votePowerOfAtIgnoringRevocation(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * Interface for contracts delegating their governance vote power.\\n */\\ninterface IGovernanceVotePower {\\n    /**\\n     * Delegates all governance vote power of `msg.sender` to address `_to`.\\n     * @param _to The address of the recipient.\\n     */\\n    function delegate(address _to) external;\\n\\n    /**\\n     * Undelegates all governance vote power of `msg.sender`.\\n     */\\n    function undelegate() external;\\n\\n    /**\\n     * Gets the governance vote power of an address at a given block number, including\\n     * all delegations made to it.\\n     * @param _who The address being queried.\\n     * @param _blockNumber The block number at which to fetch the vote power.\\n     * @return Governance vote power of `_who` at `_blockNumber`.\\n     */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Gets the governance vote power of an address at the latest block, including\\n     * all delegations made to it.\\n     * @param _who The address being queried.\\n     * @return Governance vote power of `account` at the lastest block.\\n     */\\n    function getVotes(address _who) external view returns (uint256);\\n\\n    /**\\n     * Gets the address an account is delegating its governance vote power to, at a given block number.\\n     * @param _who The address being queried.\\n     * @param _blockNumber The block number at which to fetch the address.\\n     * @return Address where `_who` was delegating its governance vote power at block `_blockNumber`.\\n     */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n     * Gets the address an account is delegating its governance vote power to, at the latest block number.\\n     * @param _who The address being queried.\\n     * @return Address where `_who` is currently delegating its governance vote power.\\n     */\\n    function getDelegateOfAtNow(address _who) external view returns (address);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Undelegate all percentage delegations from the sender and then delegate corresponding \\n     *   `_bips` percentage of voting power from the sender to each member of `_delegatees`.\\n     * @param _delegatees The addresses of the new recipients.\\n     * @param _bips The percentages of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Total of all `_bips` values must be at most 10000.\\n     **/\\n    function batchDelegate(address[] memory _delegatees, uint256[] memory _bips) external;\\n        \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`, ignoring revocation information (and cache).\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`. Result doesn't change if vote power is revoked.\\n    */\\n    function votePowerOfAtIgnoringRevocation(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirror.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\nimport \\\"./IPChainVotePower.sol\\\";\\nimport \\\"./IPChainStakeMirrorVerifier.sol\\\";\\n\\n\\n/**\\n * Interface for the `PChainStakeMirror` contract.\\n */\\ninterface IPChainStakeMirror is IPChainVotePower {\\n\\n    /**\\n     * Event emitted when max updates per block is set.\\n     * @param maxUpdatesPerBlock new number of max updated per block\\n     */\\n    event MaxUpdatesPerBlockSet(uint256 maxUpdatesPerBlock);\\n\\n    /**\\n     * Event emitted when the stake is confirmed.\\n     * @param owner The address who opened the stake.\\n     * @param nodeId Node id to which the stake was added.\\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\\n     * @param amountWei Stake amount (in wei).\\n     * @param pChainTxId P-chain transaction id.\\n     */\\n    event StakeConfirmed(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        bytes32 indexed txHash,\\n        uint256 amountWei,\\n        bytes32 pChainTxId\\n    );\\n\\n    /**\\n     * Event emitted when the stake has ended.\\n     * @param owner The address whose stake has ended.\\n     * @param nodeId Node id from which the stake was removed.\\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\\n     * @param amountWei Stake amount (in wei).\\n     */\\n    event StakeEnded(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        bytes32 indexed txHash,\\n        uint256 amountWei\\n    );\\n\\n    /**\\n     * Event emitted when the stake was revoked.\\n     * @param owner The address whose stake has ended.\\n     * @param nodeId Node id from which the stake was removed.\\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\\n     * @param amountWei Stake amount (in wei).\\n     */\\n    event StakeRevoked(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        bytes32 indexed txHash,\\n        uint256 amountWei\\n    );\\n\\n    /**\\n     * Method for P-chain stake mirroring using `PChainStake` data and Merkle proof.\\n     * @param _stakeData Information about P-chain stake.\\n     * @param _merkleProof Merkle proof that should be used to prove the P-chain stake.\\n     */\\n    function mirrorStake(\\n        IPChainStakeMirrorVerifier.PChainStake calldata _stakeData,\\n        bytes32[] calldata _merkleProof\\n    )\\n        external;\\n\\n    /**\\n     * Method for checking if active stake (stake start time <= block.timestamp < stake end time) was already mirrored.\\n     * @param _txId P-chain stake transaction id.\\n     * @param _inputAddress P-chain address that opened stake.\\n     * @return True if stake is active and mirrored.\\n     */\\n    function isActiveStakeMirrored(bytes32 _txId, bytes20 _inputAddress) external view returns(bool);\\n\\n    /**\\n     * Total amount of tokens at current block.\\n     * @return The current total amount of tokens.\\n     **/\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried.\\n     * @return The total amount of tokens at `_blockNumber`.\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Queries the token balance of `_owner` at current block.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @return The current balance.\\n     **/\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /**\\n     * Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirrorVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\n/**\\n * Interface with structure for P-chain stake mirror verifications.\\n */\\ninterface IPChainStakeMirrorVerifier {\\n\\n    /**\\n     * Structure describing the P-chain stake.\\n     */\\n    struct PChainStake {\\n        // Hash of the transaction on the underlying chain.\\n        bytes32 txId;\\n        // Type of the staking/delegation transaction: '0' for 'ADD_VALIDATOR_TX' and '1' for 'ADD_DELEGATOR_TX'.\\n        uint8 stakingType;\\n        // Input address that triggered the staking or delegation transaction.\\n        // See https://support.avax.network/en/articles/4596397-what-is-an-address for address definition for P-chain.\\n        bytes20 inputAddress;\\n        // NodeID to which staking or delegation is done.\\n        // For definitions, see https://github.com/ava-labs/avalanchego/blob/master/ids/node_id.go.\\n        bytes20 nodeId;\\n        // Start time of the staking/delegation in seconds (Unix epoch).\\n        uint64 startTime;\\n        // End time of the staking/delegation in seconds (Unix epoch).\\n        uint64 endTime;\\n        // Staked or delegated amount in Gwei (nano FLR).\\n        uint64 weight;\\n    }\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * Interface for the vote power part of the `PChainStakeMirror` contract.\\n */\\ninterface IPChainVotePower {\\n\\n    /**\\n     * Event triggered when a stake is confirmed or at the time it ends.\\n     * Definition: `votePowerFromTo(owner, nodeId)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * @param owner The account that has changed the amount of vote power it is staking.\\n     * @param nodeId The node id whose received vote power has changed.\\n     * @param priorVotePower The vote power originally on that node id.\\n     * @param newVotePower The new vote power that triggered this event.\\n     */\\n    event VotePowerChanged(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        uint256 priorVotePower,\\n        uint256 newVotePower\\n    );\\n\\n    /**\\n     * Emitted when a vote power cache entry is created.\\n     * Allows history cleaners to track vote power cache cleanup opportunities off-chain.\\n     * @param nodeId The node id whose vote power has just been cached.\\n     * @param blockNumber The block number at which the vote power has been cached.\\n     */\\n    event VotePowerCacheCreated(bytes20 nodeId, uint256 blockNumber);\\n\\n    /**\\n    * Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.\\n    * @param _owner The node id to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(bytes20 _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n    * Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n\\n    /**\\n    * Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Get the amounts and node ids being staked to by a vote power owner.\\n     * @param _owner The address being queried.\\n     * @return _nodeIds Array of node ids.\\n     * @return _amounts Array of staked amounts, for each node id.\\n     */\\n    function stakesOf(address _owner)\\n        external view\\n        returns (\\n            bytes20[] memory _nodeIds,\\n            uint256[] memory _amounts\\n        );\\n\\n    /**\\n     * Get the amounts and node ids being staked to by a vote power owner,\\n     * at a given block.\\n     * @param _owner The address being queried.\\n     * @param _blockNumber The block number being queried.\\n     * @return _nodeIds Array of node ids.\\n     * @return _amounts Array of staked amounts, for each node id.\\n     */\\n    function stakesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view\\n        returns (\\n            bytes20[] memory _nodeIds,\\n            uint256[] memory _amounts\\n        );\\n\\n    /**\\n     * Get the current vote power of `_nodeId`.\\n     * @param _nodeId The node id to get voting power.\\n     * @return Current vote power of `_nodeId`.\\n     */\\n    function votePowerOf(bytes20 _nodeId) external view returns(uint256);\\n\\n    /**\\n    * Get the vote power of `_nodeId` at block `_blockNumber`\\n    * @param _nodeId The node id to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_nodeId` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(bytes20 _nodeId, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * Get current staked vote power from `_owner` staked to `_nodeId`.\\n    * @param _owner Address of vote power owner.\\n    * @param _nodeId Node id.\\n    * @return The staked vote power.\\n    */\\n    function votePowerFromTo(address _owner, bytes20 _nodeId) external view returns(uint256);\\n\\n    /**\\n    * Get current staked vote power from `_owner` staked to `_nodeId` at `_blockNumber`.\\n    * @param _owner Address of vote power owner.\\n    * @param _nodeId Node id.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The staked vote power.\\n    */\\n    function votePowerFromToAt(address _owner, bytes20 _nodeId, uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several node ids in a batch.\\n     * @param _nodeIds The list of node ids to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */\\n    function batchVotePowerOfAt(\\n        bytes20[] memory _nodeIds,\\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[],\"evmVersion\":\"london\"}}",
	"name": "WBTCReserve",
	"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wBTC\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSupplyedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WBTCReserve.sol\":\"WBTCReserve\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@flarenetwork/flare-periphery-contracts/flare/ftso/ftso/interface/IIFtso.sol\":{\"keccak256\":\"0xd245b3c083496b3539224dc707381db5a5e8a49a5012d370b34514caefa3415d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bfe225cca2e036b4c9e460e9fd7c3f568e9574d879f81c038309563987e2348\",\"dweb:/ipfs/QmUeLdoDMG7eyQSHzaHqXwVpEYB4Nd3FpvoDjpXckDs1dq\"]},\"@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoGenesis.sol\":{\"keccak256\":\"0xd015bc43b8a22afaba50c42a56409df0d81172845dabc124a3d37b3b0bbd4df5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc305f048820c05956ec05fa246ec9070f9d813b43935356e7fe35969f49fc02\",\"dweb:/ipfs/QmaUJ42ZFzcRgy6GQtstkXMk9UgL5ERZx2V9HueXApgWBW\"]},\"@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"keccak256\":\"0x4765fdcb22dcc64c015d02c019f0ddce8d8b36111160fd4160a3d94ea4f370a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0baa5b9b24e3049bcf8de78d5dbdb778d53f5585fbe479550bfdcef2ed676257\",\"dweb:/ipfs/Qmd8Eby81zX1YptGo5E2zAraTFo2NGLRCL9XuyU7YSsaqG\"]},\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtso.sol\":{\"keccak256\":\"0xfae54442fb489dccc5f0a0a6f8d946c9fdebceece98fcb087c5998fa1363ff30\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53d8b87f403e7d868ed832f8cb965a440c8c32d20699a07f0a3f7bb2abeff2b5\",\"dweb:/ipfs/QmTYEoSzDJyhiJyY2AhnirXD6F737mzSVbqbnr6g4Fa7kT\"]},\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\":{\"keccak256\":\"0x2b818c0cd8f2f1be88da36edd966d2b358c6954e50e0aa653a9d65ef2e9712d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07258af95b9556c024aaab2e2ff83955c56f255f82a024ed190f19947087682d\",\"dweb:/ipfs/QmeRKq6cYMau8VdLkEJw3xE6eK19Hz5DvzLEzUk1ZnVJxh\"]},\"@flarenetwork/flare-periphery-contracts/flare/governance/userInterfaces/IGovernanceVotePower.sol\":{\"keccak256\":\"0xac45cb04eedb4f19533df4867eb6cd50874a55ef04d73f4d2dc3d3b7d3927e3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12c190c019723041417c6f06c932a0719b837023d4fb42090d4bb6f820331132\",\"dweb:/ipfs/QmfAsGCz2FgYvearhCHLqJHkd4MMiSpZ8JkUUY5hNBU2oA\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirror.sol\":{\"keccak256\":\"0x8c70a1ae9079bb9d29c8e2dde781f546b6cb621f0b7cc943b9cbcbd52718bb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b4e89abe97c65481a1cacb59abcde6d18b127a89ed46f99402c30c6477ea0722\",\"dweb:/ipfs/Qmd6i71hUPHR11U1U8EvDwJyEg4xUZhLbDe7D4Z7LLrAZx\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirrorVerifier.sol\":{\"keccak256\":\"0x1a1d0a1302b59249f9d2ca2700bb9759bc66bae73fe1c920cf4c20ac75b475fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7155abcad1dee722dbfad7bbdcf68608d9c9bddc0cb367897ce9ecc0185f7ff1\",\"dweb:/ipfs/Qmckp3mGWvBjQxeiGQAMQyeq3EK4tJmtMmj9EHZjzVXMQH\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainVotePower.sol\":{\"keccak256\":\"0x23e31ef2ab9227795930728dc240fbe59f31f1b05e595ee137acc1e5e6e8497e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aecec4b505b6ea3963e78b39a6131b4562b908c24cfea9a674559dde23af72fe\",\"dweb:/ipfs/QmQmK8aAzcSYUCkvcZcXRNVybermZ6CEqjSXbS99gpytLa\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IICleanable.sol\":{\"keccak256\":\"0x3ccc1532d642c3feff5b282a7c8901e2582844c1559acd1bd671afcb3aabaaef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ff8edad3b7387bd54dbfa4975b51601d9a020fd1fb7baf1a9ce98888ff3cab6\",\"dweb:/ipfs/QmdsSTUMZmkc898q5LqWFt3M3gy9yrbqReMJes78WngJc7\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"keccak256\":\"0x5388cd6705f08a9d7a82be3d4c1aea3266df20eb5263b9f5ecf95e73338dc595\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c7a9b55b0d6dd4d053d702f897ea5272695006ae0ca25f3b3a1ccbf4e604fd9\",\"dweb:/ipfs/QmP1HtdwBY9ZJvDAQTEDZzCNBTrS2Rdk7QRy3An6PLMjd5\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPContract.sol\":{\"keccak256\":\"0x6eb8619a51e0e00a93b32055e4f43d64f050b129e31bf0e161584d79cfbc5dc7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab5b8f39e1cb4f5a861e6468b4340ee57272d329488340fac71418e8c9936984\",\"dweb:/ipfs/QmdKDZkCAEjMeL233hsFTvGLG6rZzn6XVNnopKLV2iz4g8\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPToken.sol\":{\"keccak256\":\"0x49a647d1e8c394320c337b09f14b0ca70f43b0a1327233ddd9b8dcf7f005f92e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb712e00e5801b8f1a1d2c05d4e46556bac15e227df7e21cd5c80ad1cc16192d\",\"dweb:/ipfs/QmUAGmvn65u4R165gPMbNoJwVFicCtAC2Ce6Y3f8PpTbTw\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b68d9f9bfeeffa03a6d3f6c14a2633759f3739486e06e3daf03be60c6f9bbce7\",\"dweb:/ipfs/QmWJrZF5UYPXQaSKVeP4iJUZj4jhDqmmMopxU8K3KdvJe9\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPToken.sol\":{\"keccak256\":\"0x5f9c189f84f8477b11db5b520229022d4f46097e1f8fd20888ff1d29b5908c4c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://adb577d85a4c6bcc501bc17efb9f0f8fd92c660dc7af497cedca0fb45ad3c682\",\"dweb:/ipfs/QmdzpS3U9KRtF7qHcBJk9qna72BDQaYZwcyGZs6UNfU1uE\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"keccak256\":\"0x358aa3eced2172a3c252cd0c5efeb2572969ac6b64001f62facf185193668cea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8627e9e0dca5664cc7f5c9db39a602bd17ae4a2d698a0fb13b274a9474804d31\",\"dweb:/ipfs/QmRNVH3EaykbgjVntcCf2bHWyXWvoL4gEKkdMiXGJdjD2R\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"contracts/WBTCReserve.sol\":{\"keccak256\":\"0xdc09a02762537a74145a2e5031a59a0008700df7f470ef8ef675a42d9811d090\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76d3d7f22e8f6063aeb3b7344144081895b25eeb198a7b03b2a99f84d9187c0b\",\"dweb:/ipfs/QmPNrDpCfQPpvaFCjwvmTLVW3eVJbMXBh9gNXS2QfMd8Jk\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_1690": {
				"entryPoint": null,
				"id": 1690,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"abi_decode_t_address_fromMemory": {
				"entryPoint": 198,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address_fromMemory": {
				"entryPoint": 219,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"cleanup_t_address": {
				"entryPoint": 157,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 125,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 120,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 175,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:1199:18",
					"nodeType": "YulBlock",
					"src": "0:1199:18",
					"statements": [
						{
							"body": {
								"nativeSrc": "47:35:18",
								"nodeType": "YulBlock",
								"src": "47:35:18",
								"statements": [
									{
										"nativeSrc": "57:19:18",
										"nodeType": "YulAssignment",
										"src": "57:19:18",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "73:2:18",
													"nodeType": "YulLiteral",
													"src": "73:2:18",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "67:5:18",
												"nodeType": "YulIdentifier",
												"src": "67:5:18"
											},
											"nativeSrc": "67:9:18",
											"nodeType": "YulFunctionCall",
											"src": "67:9:18"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nativeSrc": "57:6:18",
												"nodeType": "YulIdentifier",
												"src": "57:6:18"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nativeSrc": "7:75:18",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nativeSrc": "40:6:18",
									"nodeType": "YulTypedName",
									"src": "40:6:18",
									"type": ""
								}
							],
							"src": "7:75:18"
						},
						{
							"body": {
								"nativeSrc": "177:28:18",
								"nodeType": "YulBlock",
								"src": "177:28:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "194:1:18",
													"nodeType": "YulLiteral",
													"src": "194:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "197:1:18",
													"nodeType": "YulLiteral",
													"src": "197:1:18",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "187:6:18",
												"nodeType": "YulIdentifier",
												"src": "187:6:18"
											},
											"nativeSrc": "187:12:18",
											"nodeType": "YulFunctionCall",
											"src": "187:12:18"
										},
										"nativeSrc": "187:12:18",
										"nodeType": "YulExpressionStatement",
										"src": "187:12:18"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nativeSrc": "88:117:18",
							"nodeType": "YulFunctionDefinition",
							"src": "88:117:18"
						},
						{
							"body": {
								"nativeSrc": "300:28:18",
								"nodeType": "YulBlock",
								"src": "300:28:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "317:1:18",
													"nodeType": "YulLiteral",
													"src": "317:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "320:1:18",
													"nodeType": "YulLiteral",
													"src": "320:1:18",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "310:6:18",
												"nodeType": "YulIdentifier",
												"src": "310:6:18"
											},
											"nativeSrc": "310:12:18",
											"nodeType": "YulFunctionCall",
											"src": "310:12:18"
										},
										"nativeSrc": "310:12:18",
										"nodeType": "YulExpressionStatement",
										"src": "310:12:18"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nativeSrc": "211:117:18",
							"nodeType": "YulFunctionDefinition",
							"src": "211:117:18"
						},
						{
							"body": {
								"nativeSrc": "379:81:18",
								"nodeType": "YulBlock",
								"src": "379:81:18",
								"statements": [
									{
										"nativeSrc": "389:65:18",
										"nodeType": "YulAssignment",
										"src": "389:65:18",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "404:5:18",
													"nodeType": "YulIdentifier",
													"src": "404:5:18"
												},
												{
													"kind": "number",
													"nativeSrc": "411:42:18",
													"nodeType": "YulLiteral",
													"src": "411:42:18",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "400:3:18",
												"nodeType": "YulIdentifier",
												"src": "400:3:18"
											},
											"nativeSrc": "400:54:18",
											"nodeType": "YulFunctionCall",
											"src": "400:54:18"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "389:7:18",
												"nodeType": "YulIdentifier",
												"src": "389:7:18"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nativeSrc": "334:126:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "361:5:18",
									"nodeType": "YulTypedName",
									"src": "361:5:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "371:7:18",
									"nodeType": "YulTypedName",
									"src": "371:7:18",
									"type": ""
								}
							],
							"src": "334:126:18"
						},
						{
							"body": {
								"nativeSrc": "511:51:18",
								"nodeType": "YulBlock",
								"src": "511:51:18",
								"statements": [
									{
										"nativeSrc": "521:35:18",
										"nodeType": "YulAssignment",
										"src": "521:35:18",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "550:5:18",
													"nodeType": "YulIdentifier",
													"src": "550:5:18"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "532:17:18",
												"nodeType": "YulIdentifier",
												"src": "532:17:18"
											},
											"nativeSrc": "532:24:18",
											"nodeType": "YulFunctionCall",
											"src": "532:24:18"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "521:7:18",
												"nodeType": "YulIdentifier",
												"src": "521:7:18"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nativeSrc": "466:96:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "493:5:18",
									"nodeType": "YulTypedName",
									"src": "493:5:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "503:7:18",
									"nodeType": "YulTypedName",
									"src": "503:7:18",
									"type": ""
								}
							],
							"src": "466:96:18"
						},
						{
							"body": {
								"nativeSrc": "611:79:18",
								"nodeType": "YulBlock",
								"src": "611:79:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "668:16:18",
											"nodeType": "YulBlock",
											"src": "668:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "677:1:18",
																"nodeType": "YulLiteral",
																"src": "677:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "680:1:18",
																"nodeType": "YulLiteral",
																"src": "680:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "670:6:18",
															"nodeType": "YulIdentifier",
															"src": "670:6:18"
														},
														"nativeSrc": "670:12:18",
														"nodeType": "YulFunctionCall",
														"src": "670:12:18"
													},
													"nativeSrc": "670:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "670:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "634:5:18",
															"nodeType": "YulIdentifier",
															"src": "634:5:18"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "659:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "659:5:18"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nativeSrc": "641:17:18",
																"nodeType": "YulIdentifier",
																"src": "641:17:18"
															},
															"nativeSrc": "641:24:18",
															"nodeType": "YulFunctionCall",
															"src": "641:24:18"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "631:2:18",
														"nodeType": "YulIdentifier",
														"src": "631:2:18"
													},
													"nativeSrc": "631:35:18",
													"nodeType": "YulFunctionCall",
													"src": "631:35:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "624:6:18",
												"nodeType": "YulIdentifier",
												"src": "624:6:18"
											},
											"nativeSrc": "624:43:18",
											"nodeType": "YulFunctionCall",
											"src": "624:43:18"
										},
										"nativeSrc": "621:63:18",
										"nodeType": "YulIf",
										"src": "621:63:18"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nativeSrc": "568:122:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "604:5:18",
									"nodeType": "YulTypedName",
									"src": "604:5:18",
									"type": ""
								}
							],
							"src": "568:122:18"
						},
						{
							"body": {
								"nativeSrc": "759:80:18",
								"nodeType": "YulBlock",
								"src": "759:80:18",
								"statements": [
									{
										"nativeSrc": "769:22:18",
										"nodeType": "YulAssignment",
										"src": "769:22:18",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "784:6:18",
													"nodeType": "YulIdentifier",
													"src": "784:6:18"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "778:5:18",
												"nodeType": "YulIdentifier",
												"src": "778:5:18"
											},
											"nativeSrc": "778:13:18",
											"nodeType": "YulFunctionCall",
											"src": "778:13:18"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "769:5:18",
												"nodeType": "YulIdentifier",
												"src": "769:5:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "827:5:18",
													"nodeType": "YulIdentifier",
													"src": "827:5:18"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nativeSrc": "800:26:18",
												"nodeType": "YulIdentifier",
												"src": "800:26:18"
											},
											"nativeSrc": "800:33:18",
											"nodeType": "YulFunctionCall",
											"src": "800:33:18"
										},
										"nativeSrc": "800:33:18",
										"nodeType": "YulExpressionStatement",
										"src": "800:33:18"
									}
								]
							},
							"name": "abi_decode_t_address_fromMemory",
							"nativeSrc": "696:143:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "737:6:18",
									"nodeType": "YulTypedName",
									"src": "737:6:18",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "745:3:18",
									"nodeType": "YulTypedName",
									"src": "745:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "753:5:18",
									"nodeType": "YulTypedName",
									"src": "753:5:18",
									"type": ""
								}
							],
							"src": "696:143:18"
						},
						{
							"body": {
								"nativeSrc": "922:274:18",
								"nodeType": "YulBlock",
								"src": "922:274:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "968:83:18",
											"nodeType": "YulBlock",
											"src": "968:83:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "970:77:18",
															"nodeType": "YulIdentifier",
															"src": "970:77:18"
														},
														"nativeSrc": "970:79:18",
														"nodeType": "YulFunctionCall",
														"src": "970:79:18"
													},
													"nativeSrc": "970:79:18",
													"nodeType": "YulExpressionStatement",
													"src": "970:79:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "943:7:18",
															"nodeType": "YulIdentifier",
															"src": "943:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "952:9:18",
															"nodeType": "YulIdentifier",
															"src": "952:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "939:3:18",
														"nodeType": "YulIdentifier",
														"src": "939:3:18"
													},
													"nativeSrc": "939:23:18",
													"nodeType": "YulFunctionCall",
													"src": "939:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "964:2:18",
													"nodeType": "YulLiteral",
													"src": "964:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "935:3:18",
												"nodeType": "YulIdentifier",
												"src": "935:3:18"
											},
											"nativeSrc": "935:32:18",
											"nodeType": "YulFunctionCall",
											"src": "935:32:18"
										},
										"nativeSrc": "932:119:18",
										"nodeType": "YulIf",
										"src": "932:119:18"
									},
									{
										"nativeSrc": "1061:128:18",
										"nodeType": "YulBlock",
										"src": "1061:128:18",
										"statements": [
											{
												"nativeSrc": "1076:15:18",
												"nodeType": "YulVariableDeclaration",
												"src": "1076:15:18",
												"value": {
													"kind": "number",
													"nativeSrc": "1090:1:18",
													"nodeType": "YulLiteral",
													"src": "1090:1:18",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "1080:6:18",
														"nodeType": "YulTypedName",
														"src": "1080:6:18",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "1105:74:18",
												"nodeType": "YulAssignment",
												"src": "1105:74:18",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "1151:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "1151:9:18"
																},
																{
																	"name": "offset",
																	"nativeSrc": "1162:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1162:6:18"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "1147:3:18",
																"nodeType": "YulIdentifier",
																"src": "1147:3:18"
															},
															"nativeSrc": "1147:22:18",
															"nodeType": "YulFunctionCall",
															"src": "1147:22:18"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "1171:7:18",
															"nodeType": "YulIdentifier",
															"src": "1171:7:18"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nativeSrc": "1115:31:18",
														"nodeType": "YulIdentifier",
														"src": "1115:31:18"
													},
													"nativeSrc": "1115:64:18",
													"nodeType": "YulFunctionCall",
													"src": "1115:64:18"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "1105:6:18",
														"nodeType": "YulIdentifier",
														"src": "1105:6:18"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address_fromMemory",
							"nativeSrc": "845:351:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "892:9:18",
									"nodeType": "YulTypedName",
									"src": "892:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "903:7:18",
									"nodeType": "YulTypedName",
									"src": "903:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "915:6:18",
									"nodeType": "YulTypedName",
									"src": "915:6:18",
									"type": ""
								}
							],
							"src": "845:351:18"
						}
					]
				},
				"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
				"id": 18,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "608060405234801561001057600080fd5b50604051610b96380380610b96833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610a7f806101176000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806327e235e3146100675780632e1a7d4d1461009757806335403023146100b3578063670ab5e9146100cf578063ac75409a146100ed578063e54f08801461011d575b600080fd5b610081600480360381019061007c91906105d3565b61013d565b60405161008e9190610619565b60405180910390f35b6100b160048036038101906100ac9190610660565b610155565b005b6100cd60048036038101906100c89190610660565b6102cf565b005b6100d76103c9565b6040516100e4919061069c565b60405180910390f35b610107600480360381019061010291906105d3565b6103f2565b6040516101149190610619565b60405180910390f35b61012561043b565b604051610134939291906106b7565b60405180910390f35b60016020528060005260406000206000915090505481565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156101d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ce9061074b565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161023292919061076b565b6020604051808303816000875af1158015610251573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027591906107cc565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c59190610828565b9250508190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161032c9392919061085c565b6020604051808303816000875af115801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f91906107cc565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103bf9190610893565b9250508190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080600080600073ad67fe66660fb8dfe9d6b1b4240d8650e30f6019905060008173ffffffffffffffffffffffffffffffffffffffff166382760fca6040518163ffffffff1660e01b815260040161049690610913565b602060405180830381865afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190610948565b90508073ffffffffffffffffffffffffffffffffffffffff1663a69afdc66040518163ffffffff1660e01b8152600401610510906109c1565b606060405180830381865afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055191906109f6565b8095508196508297505050508484849750975097505050505050909192565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105a082610575565b9050919050565b6105b081610595565b81146105bb57600080fd5b50565b6000813590506105cd816105a7565b92915050565b6000602082840312156105e9576105e8610570565b5b60006105f7848285016105be565b91505092915050565b6000819050919050565b61061381610600565b82525050565b600060208201905061062e600083018461060a565b92915050565b61063d81610600565b811461064857600080fd5b50565b60008135905061065a81610634565b92915050565b60006020828403121561067657610675610570565b5b60006106848482850161064b565b91505092915050565b61069681610595565b82525050565b60006020820190506106b1600083018461068d565b92915050565b60006060820190506106cc600083018661060a565b6106d9602083018561060a565b6106e6604083018461060a565b949350505050565b600082825260208201905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006107356014836106ee565b9150610740826106ff565b602082019050919050565b6000602082019050818103600083015261076481610728565b9050919050565b6000604082019050610780600083018561068d565b61078d602083018461060a565b9392505050565b60008115159050919050565b6107a981610794565b81146107b457600080fd5b50565b6000815190506107c6816107a0565b92915050565b6000602082840312156107e2576107e1610570565b5b60006107f0848285016107b7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061083382610600565b915061083e83610600565b9250828203905081811115610856576108556107f9565b5b92915050565b6000606082019050610871600083018661068d565b61087e602083018561068d565b61088b604083018461060a565b949350505050565b600061089e82610600565b91506108a983610600565b92508282019050808211156108c1576108c06107f9565b5b92915050565b7f4674736f52656769737472790000000000000000000000000000000000000000600082015250565b60006108fd600c836106ee565b9150610908826108c7565b602082019050919050565b6000602082019050818103600083015261092c816108f0565b9050919050565b600081519050610942816105a7565b92915050565b60006020828403121561095e5761095d610570565b5b600061096c84828501610933565b91505092915050565b7f7465737442544300000000000000000000000000000000000000000000000000600082015250565b60006109ab6007836106ee565b91506109b682610975565b602082019050919050565b600060208201905081810360008301526109da8161099e565b9050919050565b6000815190506109f081610634565b92915050565b600080600060608486031215610a0f57610a0e610570565b5b6000610a1d868287016109e1565b9350506020610a2e868287016109e1565b9250506040610a3f868287016109e1565b915050925092509256fea2646970667358221220888ff0eaa63c195f20779878a15a9701af06881d39b0c12575a96e965beedd3064736f6c63430008180033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xB96 CODESIZE SUB DUP1 PUSH2 0xB96 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x108 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA8 DUP3 PUSH2 0x7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB8 DUP2 PUSH2 0x9D JUMP JUMPDEST DUP2 EQ PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD5 DUP2 PUSH2 0xAF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1 JUMPI PUSH2 0xF0 PUSH2 0x78 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFF DUP5 DUP3 DUP6 ADD PUSH2 0xC6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA7F DUP1 PUSH2 0x117 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x35403023 EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x670AB5E9 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xAC75409A EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xE54F0880 EQ PUSH2 0x11D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x81 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x5D3 JUMP JUMPDEST PUSH2 0x13D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E SWAP2 SWAP1 PUSH2 0x619 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x660 JUMP JUMPDEST PUSH2 0x155 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0x660 JUMP JUMPDEST PUSH2 0x2CF JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD7 PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x107 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x102 SWAP2 SWAP1 PUSH2 0x5D3 JUMP JUMPDEST PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x114 SWAP2 SWAP1 PUSH2 0x619 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x125 PUSH2 0x43B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x6B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CE SWAP1 PUSH2 0x74B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x232 SWAP3 SWAP2 SWAP1 PUSH2 0x76B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x251 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x275 SWAP2 SWAP1 PUSH2 0x7CC JUMP JUMPDEST POP DUP1 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x828 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x85C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x34B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x7CC JUMP JUMPDEST POP DUP1 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x893 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0xAD67FE66660FB8DFE9D6B1B4240D8650E30F6019 SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x82760FCA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x496 SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4D7 SWAP2 SWAP1 PUSH2 0x948 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA69AFDC6 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x510 SWAP1 PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x9F6 JUMP JUMPDEST DUP1 SWAP6 POP DUP2 SWAP7 POP DUP3 SWAP8 POP POP POP POP DUP5 DUP5 DUP5 SWAP8 POP SWAP8 POP SWAP8 POP POP POP POP POP POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A0 DUP3 PUSH2 0x575 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5B0 DUP2 PUSH2 0x595 JUMP JUMPDEST DUP2 EQ PUSH2 0x5BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x5CD DUP2 PUSH2 0x5A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5E9 JUMPI PUSH2 0x5E8 PUSH2 0x570 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x5F7 DUP5 DUP3 DUP6 ADD PUSH2 0x5BE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x613 DUP2 PUSH2 0x600 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x62E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x60A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x63D DUP2 PUSH2 0x600 JUMP JUMPDEST DUP2 EQ PUSH2 0x648 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x65A DUP2 PUSH2 0x634 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x676 JUMPI PUSH2 0x675 PUSH2 0x570 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x684 DUP5 DUP3 DUP6 ADD PUSH2 0x64B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x696 DUP2 PUSH2 0x595 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x6B1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x68D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x6CC PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x60A JUMP JUMPDEST PUSH2 0x6D9 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x60A JUMP JUMPDEST PUSH2 0x6E6 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x60A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E742062616C616E6365000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x735 PUSH1 0x14 DUP4 PUSH2 0x6EE JUMP JUMPDEST SWAP2 POP PUSH2 0x740 DUP3 PUSH2 0x6FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x764 DUP2 PUSH2 0x728 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x780 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x68D JUMP JUMPDEST PUSH2 0x78D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x60A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7A9 DUP2 PUSH2 0x794 JUMP JUMPDEST DUP2 EQ PUSH2 0x7B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7C6 DUP2 PUSH2 0x7A0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7E2 JUMPI PUSH2 0x7E1 PUSH2 0x570 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x7F0 DUP5 DUP3 DUP6 ADD PUSH2 0x7B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x833 DUP3 PUSH2 0x600 JUMP JUMPDEST SWAP2 POP PUSH2 0x83E DUP4 PUSH2 0x600 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x856 JUMPI PUSH2 0x855 PUSH2 0x7F9 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x871 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x68D JUMP JUMPDEST PUSH2 0x87E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x68D JUMP JUMPDEST PUSH2 0x88B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x60A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89E DUP3 PUSH2 0x600 JUMP JUMPDEST SWAP2 POP PUSH2 0x8A9 DUP4 PUSH2 0x600 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x8C1 JUMPI PUSH2 0x8C0 PUSH2 0x7F9 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4674736F52656769737472790000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FD PUSH1 0xC DUP4 PUSH2 0x6EE JUMP JUMPDEST SWAP2 POP PUSH2 0x908 DUP3 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x92C DUP2 PUSH2 0x8F0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x942 DUP2 PUSH2 0x5A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x95E JUMPI PUSH2 0x95D PUSH2 0x570 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x96C DUP5 DUP3 DUP6 ADD PUSH2 0x933 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x7465737442544300000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9AB PUSH1 0x7 DUP4 PUSH2 0x6EE JUMP JUMPDEST SWAP2 POP PUSH2 0x9B6 DUP3 PUSH2 0x975 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x9DA DUP2 PUSH2 0x99E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x9F0 DUP2 PUSH2 0x634 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA0F JUMPI PUSH2 0xA0E PUSH2 0x570 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA1D DUP7 DUP3 DUP8 ADD PUSH2 0x9E1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xA2E DUP7 DUP3 DUP8 ADD PUSH2 0x9E1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xA3F DUP7 DUP3 DUP8 ADD PUSH2 0x9E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 DUP16 CREATE 0xEA 0xA6 EXTCODECOPY NOT PUSH0 KECCAK256 PUSH24 0x9878A15A9701AF06881D39B0C12575A96E965BEEDD306473 PUSH16 0x6C634300081800330000000000000000 ",
		"sourceMap": "323:1640:17:-:0;;;639:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;690:5;676:4;;:20;;;;;;;;;;;;;;;;;;639:64;323:1640;;88:117:18;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;323:1640:17:-;;;;;;;"
	},
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_wBTC",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "balances",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getAssetAddress",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getAssetPrice",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "user",
					"type": "address"
				}
			],
			"name": "getSupplyedAmount",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "supply",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "withdraw",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 1671,
				"contract": "contracts/WBTCReserve.sol:WBTCReserve",
				"label": "wbtc",
				"offset": 0,
				"slot": "0",
				"type": "t_contract(IERC20)1656"
			},
			{
				"astId": 1675,
				"contract": "contracts/WBTCReserve.sol:WBTCReserve",
				"label": "balances",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_uint256)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_contract(IERC20)1656": {
				"encoding": "inplace",
				"label": "contract IERC20",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var _wBTC = /* var of type address here */ ;\nvar wbtcreserveContract = new web3.eth.Contract([{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wBTC\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSupplyedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]);\nvar wbtcreserve = wbtcreserveContract.deploy({\n     data: '0x608060405234801561001057600080fd5b50604051610b96380380610b96833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610a7f806101176000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806327e235e3146100675780632e1a7d4d1461009757806335403023146100b3578063670ab5e9146100cf578063ac75409a146100ed578063e54f08801461011d575b600080fd5b610081600480360381019061007c91906105d3565b61013d565b60405161008e9190610619565b60405180910390f35b6100b160048036038101906100ac9190610660565b610155565b005b6100cd60048036038101906100c89190610660565b6102cf565b005b6100d76103c9565b6040516100e4919061069c565b60405180910390f35b610107600480360381019061010291906105d3565b6103f2565b6040516101149190610619565b60405180910390f35b61012561043b565b604051610134939291906106b7565b60405180910390f35b60016020528060005260406000206000915090505481565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156101d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ce9061074b565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161023292919061076b565b6020604051808303816000875af1158015610251573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027591906107cc565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c59190610828565b9250508190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161032c9392919061085c565b6020604051808303816000875af115801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f91906107cc565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103bf9190610893565b9250508190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080600080600073ad67fe66660fb8dfe9d6b1b4240d8650e30f6019905060008173ffffffffffffffffffffffffffffffffffffffff166382760fca6040518163ffffffff1660e01b815260040161049690610913565b602060405180830381865afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190610948565b90508073ffffffffffffffffffffffffffffffffffffffff1663a69afdc66040518163ffffffff1660e01b8152600401610510906109c1565b606060405180830381865afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055191906109f6565b8095508196508297505050508484849750975097505050505050909192565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105a082610575565b9050919050565b6105b081610595565b81146105bb57600080fd5b50565b6000813590506105cd816105a7565b92915050565b6000602082840312156105e9576105e8610570565b5b60006105f7848285016105be565b91505092915050565b6000819050919050565b61061381610600565b82525050565b600060208201905061062e600083018461060a565b92915050565b61063d81610600565b811461064857600080fd5b50565b60008135905061065a81610634565b92915050565b60006020828403121561067657610675610570565b5b60006106848482850161064b565b91505092915050565b61069681610595565b82525050565b60006020820190506106b1600083018461068d565b92915050565b60006060820190506106cc600083018661060a565b6106d9602083018561060a565b6106e6604083018461060a565b949350505050565b600082825260208201905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006107356014836106ee565b9150610740826106ff565b602082019050919050565b6000602082019050818103600083015261076481610728565b9050919050565b6000604082019050610780600083018561068d565b61078d602083018461060a565b9392505050565b60008115159050919050565b6107a981610794565b81146107b457600080fd5b50565b6000815190506107c6816107a0565b92915050565b6000602082840312156107e2576107e1610570565b5b60006107f0848285016107b7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061083382610600565b915061083e83610600565b9250828203905081811115610856576108556107f9565b5b92915050565b6000606082019050610871600083018661068d565b61087e602083018561068d565b61088b604083018461060a565b949350505050565b600061089e82610600565b91506108a983610600565b92508282019050808211156108c1576108c06107f9565b5b92915050565b7f4674736f52656769737472790000000000000000000000000000000000000000600082015250565b60006108fd600c836106ee565b9150610908826108c7565b602082019050919050565b6000602082019050818103600083015261092c816108f0565b9050919050565b600081519050610942816105a7565b92915050565b60006020828403121561095e5761095d610570565b5b600061096c84828501610933565b91505092915050565b7f7465737442544300000000000000000000000000000000000000000000000000600082015250565b60006109ab6007836106ee565b91506109b682610975565b602082019050919050565b600060208201905081810360008301526109da8161099e565b9050919050565b6000815190506109f081610634565b92915050565b600080600060608486031215610a0f57610a0e610570565b5b6000610a1d868287016109e1565b9350506020610a2e868287016109e1565b9250506040610a3f868287016109e1565b915050925092509256fea2646970667358221220888ff0eaa63c195f20779878a15a9701af06881d39b0c12575a96e965beedd3064736f6c63430008180033', \n     arguments: [\n          _wBTC,\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"35403023": "supply(uint256)",
		"27e235e3": "balances(address)",
		"670ab5e9": "getAssetAddress()",
		"e54f0880": "getAssetPrice()",
		"ac75409a": "getSupplyedAmount(address)",
		"2e1a7d4d": "withdraw(uint256)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "537400",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"balances(address)": "2792",
			"getAssetAddress()": "2566",
			"getAssetPrice()": "infinite",
			"getSupplyedAmount(address)": "2907",
			"supply(uint256)": "infinite",
			"withdraw(uint256)": "infinite"
		}
	},
	"devdoc": {
		"kind": "dev",
		"methods": {},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@balances_1675": {
				"entryPoint": 317,
				"id": 1675,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@getAssetAddress_1828": {
				"entryPoint": 969,
				"id": 1828,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@getAssetPrice_1817": {
				"entryPoint": 1083,
				"id": 1817,
				"parameterSlots": 0,
				"returnSlots": 3
			},
			"@getSupplyedAmount_1731": {
				"entryPoint": 1010,
				"id": 1731,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@supply_1719": {
				"entryPoint": 719,
				"id": 1719,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@withdraw_1766": {
				"entryPoint": 341,
				"id": 1766,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"abi_decode_t_address": {
				"entryPoint": 1470,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_address_fromMemory": {
				"entryPoint": 2355,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_bool_fromMemory": {
				"entryPoint": 1975,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256": {
				"entryPoint": 1611,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256_fromMemory": {
				"entryPoint": 2529,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 1491,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address_fromMemory": {
				"entryPoint": 2376,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_bool_fromMemory": {
				"entryPoint": 1996,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_uint256": {
				"entryPoint": 1632,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory": {
				"entryPoint": 2550,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_encode_t_address_to_t_address_fromStack": {
				"entryPoint": 1677,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_stringliteral_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 2288,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 1832,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 2462,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_uint256_to_t_uint256_fromStack": {
				"entryPoint": 1546,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": 1692,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
				"entryPoint": 2140,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
				"entryPoint": 1899,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 2323,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 1867,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 2497,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": 1561,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": 1719,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 1774,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 2195,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_sub_t_uint256": {
				"entryPoint": 2088,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"cleanup_t_address": {
				"entryPoint": 1429,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_bool": {
				"entryPoint": 1940,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 1397,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 1536,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 2041,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 1392,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"store_literal_in_memory_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f": {
				"entryPoint": 2247,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5": {
				"entryPoint": 1791,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958": {
				"entryPoint": 2421,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 1447,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_bool": {
				"entryPoint": 1952,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_uint256": {
				"entryPoint": 1588,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:9493:18",
					"nodeType": "YulBlock",
					"src": "0:9493:18",
					"statements": [
						{
							"body": {
								"nativeSrc": "47:35:18",
								"nodeType": "YulBlock",
								"src": "47:35:18",
								"statements": [
									{
										"nativeSrc": "57:19:18",
										"nodeType": "YulAssignment",
										"src": "57:19:18",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "73:2:18",
													"nodeType": "YulLiteral",
													"src": "73:2:18",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "67:5:18",
												"nodeType": "YulIdentifier",
												"src": "67:5:18"
											},
											"nativeSrc": "67:9:18",
											"nodeType": "YulFunctionCall",
											"src": "67:9:18"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nativeSrc": "57:6:18",
												"nodeType": "YulIdentifier",
												"src": "57:6:18"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nativeSrc": "7:75:18",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nativeSrc": "40:6:18",
									"nodeType": "YulTypedName",
									"src": "40:6:18",
									"type": ""
								}
							],
							"src": "7:75:18"
						},
						{
							"body": {
								"nativeSrc": "177:28:18",
								"nodeType": "YulBlock",
								"src": "177:28:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "194:1:18",
													"nodeType": "YulLiteral",
													"src": "194:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "197:1:18",
													"nodeType": "YulLiteral",
													"src": "197:1:18",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "187:6:18",
												"nodeType": "YulIdentifier",
												"src": "187:6:18"
											},
											"nativeSrc": "187:12:18",
											"nodeType": "YulFunctionCall",
											"src": "187:12:18"
										},
										"nativeSrc": "187:12:18",
										"nodeType": "YulExpressionStatement",
										"src": "187:12:18"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nativeSrc": "88:117:18",
							"nodeType": "YulFunctionDefinition",
							"src": "88:117:18"
						},
						{
							"body": {
								"nativeSrc": "300:28:18",
								"nodeType": "YulBlock",
								"src": "300:28:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "317:1:18",
													"nodeType": "YulLiteral",
													"src": "317:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "320:1:18",
													"nodeType": "YulLiteral",
													"src": "320:1:18",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "310:6:18",
												"nodeType": "YulIdentifier",
												"src": "310:6:18"
											},
											"nativeSrc": "310:12:18",
											"nodeType": "YulFunctionCall",
											"src": "310:12:18"
										},
										"nativeSrc": "310:12:18",
										"nodeType": "YulExpressionStatement",
										"src": "310:12:18"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nativeSrc": "211:117:18",
							"nodeType": "YulFunctionDefinition",
							"src": "211:117:18"
						},
						{
							"body": {
								"nativeSrc": "379:81:18",
								"nodeType": "YulBlock",
								"src": "379:81:18",
								"statements": [
									{
										"nativeSrc": "389:65:18",
										"nodeType": "YulAssignment",
										"src": "389:65:18",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "404:5:18",
													"nodeType": "YulIdentifier",
													"src": "404:5:18"
												},
												{
													"kind": "number",
													"nativeSrc": "411:42:18",
													"nodeType": "YulLiteral",
													"src": "411:42:18",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "400:3:18",
												"nodeType": "YulIdentifier",
												"src": "400:3:18"
											},
											"nativeSrc": "400:54:18",
											"nodeType": "YulFunctionCall",
											"src": "400:54:18"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "389:7:18",
												"nodeType": "YulIdentifier",
												"src": "389:7:18"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nativeSrc": "334:126:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "361:5:18",
									"nodeType": "YulTypedName",
									"src": "361:5:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "371:7:18",
									"nodeType": "YulTypedName",
									"src": "371:7:18",
									"type": ""
								}
							],
							"src": "334:126:18"
						},
						{
							"body": {
								"nativeSrc": "511:51:18",
								"nodeType": "YulBlock",
								"src": "511:51:18",
								"statements": [
									{
										"nativeSrc": "521:35:18",
										"nodeType": "YulAssignment",
										"src": "521:35:18",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "550:5:18",
													"nodeType": "YulIdentifier",
													"src": "550:5:18"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "532:17:18",
												"nodeType": "YulIdentifier",
												"src": "532:17:18"
											},
											"nativeSrc": "532:24:18",
											"nodeType": "YulFunctionCall",
											"src": "532:24:18"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "521:7:18",
												"nodeType": "YulIdentifier",
												"src": "521:7:18"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nativeSrc": "466:96:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "493:5:18",
									"nodeType": "YulTypedName",
									"src": "493:5:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "503:7:18",
									"nodeType": "YulTypedName",
									"src": "503:7:18",
									"type": ""
								}
							],
							"src": "466:96:18"
						},
						{
							"body": {
								"nativeSrc": "611:79:18",
								"nodeType": "YulBlock",
								"src": "611:79:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "668:16:18",
											"nodeType": "YulBlock",
											"src": "668:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "677:1:18",
																"nodeType": "YulLiteral",
																"src": "677:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "680:1:18",
																"nodeType": "YulLiteral",
																"src": "680:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "670:6:18",
															"nodeType": "YulIdentifier",
															"src": "670:6:18"
														},
														"nativeSrc": "670:12:18",
														"nodeType": "YulFunctionCall",
														"src": "670:12:18"
													},
													"nativeSrc": "670:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "670:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "634:5:18",
															"nodeType": "YulIdentifier",
															"src": "634:5:18"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "659:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "659:5:18"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nativeSrc": "641:17:18",
																"nodeType": "YulIdentifier",
																"src": "641:17:18"
															},
															"nativeSrc": "641:24:18",
															"nodeType": "YulFunctionCall",
															"src": "641:24:18"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "631:2:18",
														"nodeType": "YulIdentifier",
														"src": "631:2:18"
													},
													"nativeSrc": "631:35:18",
													"nodeType": "YulFunctionCall",
													"src": "631:35:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "624:6:18",
												"nodeType": "YulIdentifier",
												"src": "624:6:18"
											},
											"nativeSrc": "624:43:18",
											"nodeType": "YulFunctionCall",
											"src": "624:43:18"
										},
										"nativeSrc": "621:63:18",
										"nodeType": "YulIf",
										"src": "621:63:18"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nativeSrc": "568:122:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "604:5:18",
									"nodeType": "YulTypedName",
									"src": "604:5:18",
									"type": ""
								}
							],
							"src": "568:122:18"
						},
						{
							"body": {
								"nativeSrc": "748:87:18",
								"nodeType": "YulBlock",
								"src": "748:87:18",
								"statements": [
									{
										"nativeSrc": "758:29:18",
										"nodeType": "YulAssignment",
										"src": "758:29:18",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "780:6:18",
													"nodeType": "YulIdentifier",
													"src": "780:6:18"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "767:12:18",
												"nodeType": "YulIdentifier",
												"src": "767:12:18"
											},
											"nativeSrc": "767:20:18",
											"nodeType": "YulFunctionCall",
											"src": "767:20:18"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "758:5:18",
												"nodeType": "YulIdentifier",
												"src": "758:5:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "823:5:18",
													"nodeType": "YulIdentifier",
													"src": "823:5:18"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nativeSrc": "796:26:18",
												"nodeType": "YulIdentifier",
												"src": "796:26:18"
											},
											"nativeSrc": "796:33:18",
											"nodeType": "YulFunctionCall",
											"src": "796:33:18"
										},
										"nativeSrc": "796:33:18",
										"nodeType": "YulExpressionStatement",
										"src": "796:33:18"
									}
								]
							},
							"name": "abi_decode_t_address",
							"nativeSrc": "696:139:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "726:6:18",
									"nodeType": "YulTypedName",
									"src": "726:6:18",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "734:3:18",
									"nodeType": "YulTypedName",
									"src": "734:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "742:5:18",
									"nodeType": "YulTypedName",
									"src": "742:5:18",
									"type": ""
								}
							],
							"src": "696:139:18"
						},
						{
							"body": {
								"nativeSrc": "907:263:18",
								"nodeType": "YulBlock",
								"src": "907:263:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "953:83:18",
											"nodeType": "YulBlock",
											"src": "953:83:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "955:77:18",
															"nodeType": "YulIdentifier",
															"src": "955:77:18"
														},
														"nativeSrc": "955:79:18",
														"nodeType": "YulFunctionCall",
														"src": "955:79:18"
													},
													"nativeSrc": "955:79:18",
													"nodeType": "YulExpressionStatement",
													"src": "955:79:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "928:7:18",
															"nodeType": "YulIdentifier",
															"src": "928:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "937:9:18",
															"nodeType": "YulIdentifier",
															"src": "937:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "924:3:18",
														"nodeType": "YulIdentifier",
														"src": "924:3:18"
													},
													"nativeSrc": "924:23:18",
													"nodeType": "YulFunctionCall",
													"src": "924:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "949:2:18",
													"nodeType": "YulLiteral",
													"src": "949:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "920:3:18",
												"nodeType": "YulIdentifier",
												"src": "920:3:18"
											},
											"nativeSrc": "920:32:18",
											"nodeType": "YulFunctionCall",
											"src": "920:32:18"
										},
										"nativeSrc": "917:119:18",
										"nodeType": "YulIf",
										"src": "917:119:18"
									},
									{
										"nativeSrc": "1046:117:18",
										"nodeType": "YulBlock",
										"src": "1046:117:18",
										"statements": [
											{
												"nativeSrc": "1061:15:18",
												"nodeType": "YulVariableDeclaration",
												"src": "1061:15:18",
												"value": {
													"kind": "number",
													"nativeSrc": "1075:1:18",
													"nodeType": "YulLiteral",
													"src": "1075:1:18",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "1065:6:18",
														"nodeType": "YulTypedName",
														"src": "1065:6:18",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "1090:63:18",
												"nodeType": "YulAssignment",
												"src": "1090:63:18",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "1125:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "1125:9:18"
																},
																{
																	"name": "offset",
																	"nativeSrc": "1136:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1136:6:18"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "1121:3:18",
																"nodeType": "YulIdentifier",
																"src": "1121:3:18"
															},
															"nativeSrc": "1121:22:18",
															"nodeType": "YulFunctionCall",
															"src": "1121:22:18"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "1145:7:18",
															"nodeType": "YulIdentifier",
															"src": "1145:7:18"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "1100:20:18",
														"nodeType": "YulIdentifier",
														"src": "1100:20:18"
													},
													"nativeSrc": "1100:53:18",
													"nodeType": "YulFunctionCall",
													"src": "1100:53:18"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "1090:6:18",
														"nodeType": "YulIdentifier",
														"src": "1090:6:18"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nativeSrc": "841:329:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "877:9:18",
									"nodeType": "YulTypedName",
									"src": "877:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "888:7:18",
									"nodeType": "YulTypedName",
									"src": "888:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "900:6:18",
									"nodeType": "YulTypedName",
									"src": "900:6:18",
									"type": ""
								}
							],
							"src": "841:329:18"
						},
						{
							"body": {
								"nativeSrc": "1221:32:18",
								"nodeType": "YulBlock",
								"src": "1221:32:18",
								"statements": [
									{
										"nativeSrc": "1231:16:18",
										"nodeType": "YulAssignment",
										"src": "1231:16:18",
										"value": {
											"name": "value",
											"nativeSrc": "1242:5:18",
											"nodeType": "YulIdentifier",
											"src": "1242:5:18"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "1231:7:18",
												"nodeType": "YulIdentifier",
												"src": "1231:7:18"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nativeSrc": "1176:77:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1203:5:18",
									"nodeType": "YulTypedName",
									"src": "1203:5:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "1213:7:18",
									"nodeType": "YulTypedName",
									"src": "1213:7:18",
									"type": ""
								}
							],
							"src": "1176:77:18"
						},
						{
							"body": {
								"nativeSrc": "1324:53:18",
								"nodeType": "YulBlock",
								"src": "1324:53:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "1341:3:18",
													"nodeType": "YulIdentifier",
													"src": "1341:3:18"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1364:5:18",
															"nodeType": "YulIdentifier",
															"src": "1364:5:18"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nativeSrc": "1346:17:18",
														"nodeType": "YulIdentifier",
														"src": "1346:17:18"
													},
													"nativeSrc": "1346:24:18",
													"nodeType": "YulFunctionCall",
													"src": "1346:24:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1334:6:18",
												"nodeType": "YulIdentifier",
												"src": "1334:6:18"
											},
											"nativeSrc": "1334:37:18",
											"nodeType": "YulFunctionCall",
											"src": "1334:37:18"
										},
										"nativeSrc": "1334:37:18",
										"nodeType": "YulExpressionStatement",
										"src": "1334:37:18"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nativeSrc": "1259:118:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1312:5:18",
									"nodeType": "YulTypedName",
									"src": "1312:5:18",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "1319:3:18",
									"nodeType": "YulTypedName",
									"src": "1319:3:18",
									"type": ""
								}
							],
							"src": "1259:118:18"
						},
						{
							"body": {
								"nativeSrc": "1481:124:18",
								"nodeType": "YulBlock",
								"src": "1481:124:18",
								"statements": [
									{
										"nativeSrc": "1491:26:18",
										"nodeType": "YulAssignment",
										"src": "1491:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1503:9:18",
													"nodeType": "YulIdentifier",
													"src": "1503:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "1514:2:18",
													"nodeType": "YulLiteral",
													"src": "1514:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1499:3:18",
												"nodeType": "YulIdentifier",
												"src": "1499:3:18"
											},
											"nativeSrc": "1499:18:18",
											"nodeType": "YulFunctionCall",
											"src": "1499:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1491:4:18",
												"nodeType": "YulIdentifier",
												"src": "1491:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "1571:6:18",
													"nodeType": "YulIdentifier",
													"src": "1571:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1584:9:18",
															"nodeType": "YulIdentifier",
															"src": "1584:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "1595:1:18",
															"nodeType": "YulLiteral",
															"src": "1595:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1580:3:18",
														"nodeType": "YulIdentifier",
														"src": "1580:3:18"
													},
													"nativeSrc": "1580:17:18",
													"nodeType": "YulFunctionCall",
													"src": "1580:17:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "1527:43:18",
												"nodeType": "YulIdentifier",
												"src": "1527:43:18"
											},
											"nativeSrc": "1527:71:18",
											"nodeType": "YulFunctionCall",
											"src": "1527:71:18"
										},
										"nativeSrc": "1527:71:18",
										"nodeType": "YulExpressionStatement",
										"src": "1527:71:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "1383:222:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1453:9:18",
									"nodeType": "YulTypedName",
									"src": "1453:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1465:6:18",
									"nodeType": "YulTypedName",
									"src": "1465:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1476:4:18",
									"nodeType": "YulTypedName",
									"src": "1476:4:18",
									"type": ""
								}
							],
							"src": "1383:222:18"
						},
						{
							"body": {
								"nativeSrc": "1654:79:18",
								"nodeType": "YulBlock",
								"src": "1654:79:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "1711:16:18",
											"nodeType": "YulBlock",
											"src": "1711:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1720:1:18",
																"nodeType": "YulLiteral",
																"src": "1720:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1723:1:18",
																"nodeType": "YulLiteral",
																"src": "1723:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1713:6:18",
															"nodeType": "YulIdentifier",
															"src": "1713:6:18"
														},
														"nativeSrc": "1713:12:18",
														"nodeType": "YulFunctionCall",
														"src": "1713:12:18"
													},
													"nativeSrc": "1713:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "1713:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1677:5:18",
															"nodeType": "YulIdentifier",
															"src": "1677:5:18"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "1702:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "1702:5:18"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nativeSrc": "1684:17:18",
																"nodeType": "YulIdentifier",
																"src": "1684:17:18"
															},
															"nativeSrc": "1684:24:18",
															"nodeType": "YulFunctionCall",
															"src": "1684:24:18"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "1674:2:18",
														"nodeType": "YulIdentifier",
														"src": "1674:2:18"
													},
													"nativeSrc": "1674:35:18",
													"nodeType": "YulFunctionCall",
													"src": "1674:35:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "1667:6:18",
												"nodeType": "YulIdentifier",
												"src": "1667:6:18"
											},
											"nativeSrc": "1667:43:18",
											"nodeType": "YulFunctionCall",
											"src": "1667:43:18"
										},
										"nativeSrc": "1664:63:18",
										"nodeType": "YulIf",
										"src": "1664:63:18"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nativeSrc": "1611:122:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1647:5:18",
									"nodeType": "YulTypedName",
									"src": "1647:5:18",
									"type": ""
								}
							],
							"src": "1611:122:18"
						},
						{
							"body": {
								"nativeSrc": "1791:87:18",
								"nodeType": "YulBlock",
								"src": "1791:87:18",
								"statements": [
									{
										"nativeSrc": "1801:29:18",
										"nodeType": "YulAssignment",
										"src": "1801:29:18",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "1823:6:18",
													"nodeType": "YulIdentifier",
													"src": "1823:6:18"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1810:12:18",
												"nodeType": "YulIdentifier",
												"src": "1810:12:18"
											},
											"nativeSrc": "1810:20:18",
											"nodeType": "YulFunctionCall",
											"src": "1810:20:18"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "1801:5:18",
												"nodeType": "YulIdentifier",
												"src": "1801:5:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1866:5:18",
													"nodeType": "YulIdentifier",
													"src": "1866:5:18"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nativeSrc": "1839:26:18",
												"nodeType": "YulIdentifier",
												"src": "1839:26:18"
											},
											"nativeSrc": "1839:33:18",
											"nodeType": "YulFunctionCall",
											"src": "1839:33:18"
										},
										"nativeSrc": "1839:33:18",
										"nodeType": "YulExpressionStatement",
										"src": "1839:33:18"
									}
								]
							},
							"name": "abi_decode_t_uint256",
							"nativeSrc": "1739:139:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "1769:6:18",
									"nodeType": "YulTypedName",
									"src": "1769:6:18",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "1777:3:18",
									"nodeType": "YulTypedName",
									"src": "1777:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "1785:5:18",
									"nodeType": "YulTypedName",
									"src": "1785:5:18",
									"type": ""
								}
							],
							"src": "1739:139:18"
						},
						{
							"body": {
								"nativeSrc": "1950:263:18",
								"nodeType": "YulBlock",
								"src": "1950:263:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "1996:83:18",
											"nodeType": "YulBlock",
											"src": "1996:83:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "1998:77:18",
															"nodeType": "YulIdentifier",
															"src": "1998:77:18"
														},
														"nativeSrc": "1998:79:18",
														"nodeType": "YulFunctionCall",
														"src": "1998:79:18"
													},
													"nativeSrc": "1998:79:18",
													"nodeType": "YulExpressionStatement",
													"src": "1998:79:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "1971:7:18",
															"nodeType": "YulIdentifier",
															"src": "1971:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "1980:9:18",
															"nodeType": "YulIdentifier",
															"src": "1980:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1967:3:18",
														"nodeType": "YulIdentifier",
														"src": "1967:3:18"
													},
													"nativeSrc": "1967:23:18",
													"nodeType": "YulFunctionCall",
													"src": "1967:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "1992:2:18",
													"nodeType": "YulLiteral",
													"src": "1992:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "1963:3:18",
												"nodeType": "YulIdentifier",
												"src": "1963:3:18"
											},
											"nativeSrc": "1963:32:18",
											"nodeType": "YulFunctionCall",
											"src": "1963:32:18"
										},
										"nativeSrc": "1960:119:18",
										"nodeType": "YulIf",
										"src": "1960:119:18"
									},
									{
										"nativeSrc": "2089:117:18",
										"nodeType": "YulBlock",
										"src": "2089:117:18",
										"statements": [
											{
												"nativeSrc": "2104:15:18",
												"nodeType": "YulVariableDeclaration",
												"src": "2104:15:18",
												"value": {
													"kind": "number",
													"nativeSrc": "2118:1:18",
													"nodeType": "YulLiteral",
													"src": "2118:1:18",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2108:6:18",
														"nodeType": "YulTypedName",
														"src": "2108:6:18",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2133:63:18",
												"nodeType": "YulAssignment",
												"src": "2133:63:18",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2168:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "2168:9:18"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2179:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "2179:6:18"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2164:3:18",
																"nodeType": "YulIdentifier",
																"src": "2164:3:18"
															},
															"nativeSrc": "2164:22:18",
															"nodeType": "YulFunctionCall",
															"src": "2164:22:18"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2188:7:18",
															"nodeType": "YulIdentifier",
															"src": "2188:7:18"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "2143:20:18",
														"nodeType": "YulIdentifier",
														"src": "2143:20:18"
													},
													"nativeSrc": "2143:53:18",
													"nodeType": "YulFunctionCall",
													"src": "2143:53:18"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "2133:6:18",
														"nodeType": "YulIdentifier",
														"src": "2133:6:18"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256",
							"nativeSrc": "1884:329:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1920:9:18",
									"nodeType": "YulTypedName",
									"src": "1920:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "1931:7:18",
									"nodeType": "YulTypedName",
									"src": "1931:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "1943:6:18",
									"nodeType": "YulTypedName",
									"src": "1943:6:18",
									"type": ""
								}
							],
							"src": "1884:329:18"
						},
						{
							"body": {
								"nativeSrc": "2284:53:18",
								"nodeType": "YulBlock",
								"src": "2284:53:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "2301:3:18",
													"nodeType": "YulIdentifier",
													"src": "2301:3:18"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "2324:5:18",
															"nodeType": "YulIdentifier",
															"src": "2324:5:18"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nativeSrc": "2306:17:18",
														"nodeType": "YulIdentifier",
														"src": "2306:17:18"
													},
													"nativeSrc": "2306:24:18",
													"nodeType": "YulFunctionCall",
													"src": "2306:24:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2294:6:18",
												"nodeType": "YulIdentifier",
												"src": "2294:6:18"
											},
											"nativeSrc": "2294:37:18",
											"nodeType": "YulFunctionCall",
											"src": "2294:37:18"
										},
										"nativeSrc": "2294:37:18",
										"nodeType": "YulExpressionStatement",
										"src": "2294:37:18"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nativeSrc": "2219:118:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2272:5:18",
									"nodeType": "YulTypedName",
									"src": "2272:5:18",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "2279:3:18",
									"nodeType": "YulTypedName",
									"src": "2279:3:18",
									"type": ""
								}
							],
							"src": "2219:118:18"
						},
						{
							"body": {
								"nativeSrc": "2441:124:18",
								"nodeType": "YulBlock",
								"src": "2441:124:18",
								"statements": [
									{
										"nativeSrc": "2451:26:18",
										"nodeType": "YulAssignment",
										"src": "2451:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2463:9:18",
													"nodeType": "YulIdentifier",
													"src": "2463:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "2474:2:18",
													"nodeType": "YulLiteral",
													"src": "2474:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2459:3:18",
												"nodeType": "YulIdentifier",
												"src": "2459:3:18"
											},
											"nativeSrc": "2459:18:18",
											"nodeType": "YulFunctionCall",
											"src": "2459:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2451:4:18",
												"nodeType": "YulIdentifier",
												"src": "2451:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "2531:6:18",
													"nodeType": "YulIdentifier",
													"src": "2531:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2544:9:18",
															"nodeType": "YulIdentifier",
															"src": "2544:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "2555:1:18",
															"nodeType": "YulLiteral",
															"src": "2555:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2540:3:18",
														"nodeType": "YulIdentifier",
														"src": "2540:3:18"
													},
													"nativeSrc": "2540:17:18",
													"nodeType": "YulFunctionCall",
													"src": "2540:17:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "2487:43:18",
												"nodeType": "YulIdentifier",
												"src": "2487:43:18"
											},
											"nativeSrc": "2487:71:18",
											"nodeType": "YulFunctionCall",
											"src": "2487:71:18"
										},
										"nativeSrc": "2487:71:18",
										"nodeType": "YulExpressionStatement",
										"src": "2487:71:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "2343:222:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2413:9:18",
									"nodeType": "YulTypedName",
									"src": "2413:9:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2425:6:18",
									"nodeType": "YulTypedName",
									"src": "2425:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2436:4:18",
									"nodeType": "YulTypedName",
									"src": "2436:4:18",
									"type": ""
								}
							],
							"src": "2343:222:18"
						},
						{
							"body": {
								"nativeSrc": "2725:288:18",
								"nodeType": "YulBlock",
								"src": "2725:288:18",
								"statements": [
									{
										"nativeSrc": "2735:26:18",
										"nodeType": "YulAssignment",
										"src": "2735:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2747:9:18",
													"nodeType": "YulIdentifier",
													"src": "2747:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "2758:2:18",
													"nodeType": "YulLiteral",
													"src": "2758:2:18",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2743:3:18",
												"nodeType": "YulIdentifier",
												"src": "2743:3:18"
											},
											"nativeSrc": "2743:18:18",
											"nodeType": "YulFunctionCall",
											"src": "2743:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2735:4:18",
												"nodeType": "YulIdentifier",
												"src": "2735:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "2815:6:18",
													"nodeType": "YulIdentifier",
													"src": "2815:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2828:9:18",
															"nodeType": "YulIdentifier",
															"src": "2828:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "2839:1:18",
															"nodeType": "YulLiteral",
															"src": "2839:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2824:3:18",
														"nodeType": "YulIdentifier",
														"src": "2824:3:18"
													},
													"nativeSrc": "2824:17:18",
													"nodeType": "YulFunctionCall",
													"src": "2824:17:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "2771:43:18",
												"nodeType": "YulIdentifier",
												"src": "2771:43:18"
											},
											"nativeSrc": "2771:71:18",
											"nodeType": "YulFunctionCall",
											"src": "2771:71:18"
										},
										"nativeSrc": "2771:71:18",
										"nodeType": "YulExpressionStatement",
										"src": "2771:71:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "2896:6:18",
													"nodeType": "YulIdentifier",
													"src": "2896:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2909:9:18",
															"nodeType": "YulIdentifier",
															"src": "2909:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "2920:2:18",
															"nodeType": "YulLiteral",
															"src": "2920:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2905:3:18",
														"nodeType": "YulIdentifier",
														"src": "2905:3:18"
													},
													"nativeSrc": "2905:18:18",
													"nodeType": "YulFunctionCall",
													"src": "2905:18:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "2852:43:18",
												"nodeType": "YulIdentifier",
												"src": "2852:43:18"
											},
											"nativeSrc": "2852:72:18",
											"nodeType": "YulFunctionCall",
											"src": "2852:72:18"
										},
										"nativeSrc": "2852:72:18",
										"nodeType": "YulExpressionStatement",
										"src": "2852:72:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "2978:6:18",
													"nodeType": "YulIdentifier",
													"src": "2978:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2991:9:18",
															"nodeType": "YulIdentifier",
															"src": "2991:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "3002:2:18",
															"nodeType": "YulLiteral",
															"src": "3002:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2987:3:18",
														"nodeType": "YulIdentifier",
														"src": "2987:3:18"
													},
													"nativeSrc": "2987:18:18",
													"nodeType": "YulFunctionCall",
													"src": "2987:18:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "2934:43:18",
												"nodeType": "YulIdentifier",
												"src": "2934:43:18"
											},
											"nativeSrc": "2934:72:18",
											"nodeType": "YulFunctionCall",
											"src": "2934:72:18"
										},
										"nativeSrc": "2934:72:18",
										"nodeType": "YulExpressionStatement",
										"src": "2934:72:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "2571:442:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2681:9:18",
									"nodeType": "YulTypedName",
									"src": "2681:9:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "2693:6:18",
									"nodeType": "YulTypedName",
									"src": "2693:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "2701:6:18",
									"nodeType": "YulTypedName",
									"src": "2701:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2709:6:18",
									"nodeType": "YulTypedName",
									"src": "2709:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2720:4:18",
									"nodeType": "YulTypedName",
									"src": "2720:4:18",
									"type": ""
								}
							],
							"src": "2571:442:18"
						},
						{
							"body": {
								"nativeSrc": "3115:73:18",
								"nodeType": "YulBlock",
								"src": "3115:73:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3132:3:18",
													"nodeType": "YulIdentifier",
													"src": "3132:3:18"
												},
												{
													"name": "length",
													"nativeSrc": "3137:6:18",
													"nodeType": "YulIdentifier",
													"src": "3137:6:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3125:6:18",
												"nodeType": "YulIdentifier",
												"src": "3125:6:18"
											},
											"nativeSrc": "3125:19:18",
											"nodeType": "YulFunctionCall",
											"src": "3125:19:18"
										},
										"nativeSrc": "3125:19:18",
										"nodeType": "YulExpressionStatement",
										"src": "3125:19:18"
									},
									{
										"nativeSrc": "3153:29:18",
										"nodeType": "YulAssignment",
										"src": "3153:29:18",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3172:3:18",
													"nodeType": "YulIdentifier",
													"src": "3172:3:18"
												},
												{
													"kind": "number",
													"nativeSrc": "3177:4:18",
													"nodeType": "YulLiteral",
													"src": "3177:4:18",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3168:3:18",
												"nodeType": "YulIdentifier",
												"src": "3168:3:18"
											},
											"nativeSrc": "3168:14:18",
											"nodeType": "YulFunctionCall",
											"src": "3168:14:18"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "3153:11:18",
												"nodeType": "YulIdentifier",
												"src": "3153:11:18"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nativeSrc": "3019:169:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "3087:3:18",
									"nodeType": "YulTypedName",
									"src": "3087:3:18",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "3092:6:18",
									"nodeType": "YulTypedName",
									"src": "3092:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "3103:11:18",
									"nodeType": "YulTypedName",
									"src": "3103:11:18",
									"type": ""
								}
							],
							"src": "3019:169:18"
						},
						{
							"body": {
								"nativeSrc": "3300:64:18",
								"nodeType": "YulBlock",
								"src": "3300:64:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "3322:6:18",
															"nodeType": "YulIdentifier",
															"src": "3322:6:18"
														},
														{
															"kind": "number",
															"nativeSrc": "3330:1:18",
															"nodeType": "YulLiteral",
															"src": "3330:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3318:3:18",
														"nodeType": "YulIdentifier",
														"src": "3318:3:18"
													},
													"nativeSrc": "3318:14:18",
													"nodeType": "YulFunctionCall",
													"src": "3318:14:18"
												},
												{
													"hexValue": "496e73756666696369656e742062616c616e6365",
													"kind": "string",
													"nativeSrc": "3334:22:18",
													"nodeType": "YulLiteral",
													"src": "3334:22:18",
													"type": "",
													"value": "Insufficient balance"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3311:6:18",
												"nodeType": "YulIdentifier",
												"src": "3311:6:18"
											},
											"nativeSrc": "3311:46:18",
											"nodeType": "YulFunctionCall",
											"src": "3311:46:18"
										},
										"nativeSrc": "3311:46:18",
										"nodeType": "YulExpressionStatement",
										"src": "3311:46:18"
									}
								]
							},
							"name": "store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
							"nativeSrc": "3194:170:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "3292:6:18",
									"nodeType": "YulTypedName",
									"src": "3292:6:18",
									"type": ""
								}
							],
							"src": "3194:170:18"
						},
						{
							"body": {
								"nativeSrc": "3516:220:18",
								"nodeType": "YulBlock",
								"src": "3516:220:18",
								"statements": [
									{
										"nativeSrc": "3526:74:18",
										"nodeType": "YulAssignment",
										"src": "3526:74:18",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3592:3:18",
													"nodeType": "YulIdentifier",
													"src": "3592:3:18"
												},
												{
													"kind": "number",
													"nativeSrc": "3597:2:18",
													"nodeType": "YulLiteral",
													"src": "3597:2:18",
													"type": "",
													"value": "20"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "3533:58:18",
												"nodeType": "YulIdentifier",
												"src": "3533:58:18"
											},
											"nativeSrc": "3533:67:18",
											"nodeType": "YulFunctionCall",
											"src": "3533:67:18"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "3526:3:18",
												"nodeType": "YulIdentifier",
												"src": "3526:3:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3698:3:18",
													"nodeType": "YulIdentifier",
													"src": "3698:3:18"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
												"nativeSrc": "3609:88:18",
												"nodeType": "YulIdentifier",
												"src": "3609:88:18"
											},
											"nativeSrc": "3609:93:18",
											"nodeType": "YulFunctionCall",
											"src": "3609:93:18"
										},
										"nativeSrc": "3609:93:18",
										"nodeType": "YulExpressionStatement",
										"src": "3609:93:18"
									},
									{
										"nativeSrc": "3711:19:18",
										"nodeType": "YulAssignment",
										"src": "3711:19:18",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3722:3:18",
													"nodeType": "YulIdentifier",
													"src": "3722:3:18"
												},
												{
													"kind": "number",
													"nativeSrc": "3727:2:18",
													"nodeType": "YulLiteral",
													"src": "3727:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3718:3:18",
												"nodeType": "YulIdentifier",
												"src": "3718:3:18"
											},
											"nativeSrc": "3718:12:18",
											"nodeType": "YulFunctionCall",
											"src": "3718:12:18"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "3711:3:18",
												"nodeType": "YulIdentifier",
												"src": "3711:3:18"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "3370:366:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "3504:3:18",
									"nodeType": "YulTypedName",
									"src": "3504:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "3512:3:18",
									"nodeType": "YulTypedName",
									"src": "3512:3:18",
									"type": ""
								}
							],
							"src": "3370:366:18"
						},
						{
							"body": {
								"nativeSrc": "3913:248:18",
								"nodeType": "YulBlock",
								"src": "3913:248:18",
								"statements": [
									{
										"nativeSrc": "3923:26:18",
										"nodeType": "YulAssignment",
										"src": "3923:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3935:9:18",
													"nodeType": "YulIdentifier",
													"src": "3935:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "3946:2:18",
													"nodeType": "YulLiteral",
													"src": "3946:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3931:3:18",
												"nodeType": "YulIdentifier",
												"src": "3931:3:18"
											},
											"nativeSrc": "3931:18:18",
											"nodeType": "YulFunctionCall",
											"src": "3931:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "3923:4:18",
												"nodeType": "YulIdentifier",
												"src": "3923:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "3970:9:18",
															"nodeType": "YulIdentifier",
															"src": "3970:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "3981:1:18",
															"nodeType": "YulLiteral",
															"src": "3981:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3966:3:18",
														"nodeType": "YulIdentifier",
														"src": "3966:3:18"
													},
													"nativeSrc": "3966:17:18",
													"nodeType": "YulFunctionCall",
													"src": "3966:17:18"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "3989:4:18",
															"nodeType": "YulIdentifier",
															"src": "3989:4:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "3995:9:18",
															"nodeType": "YulIdentifier",
															"src": "3995:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "3985:3:18",
														"nodeType": "YulIdentifier",
														"src": "3985:3:18"
													},
													"nativeSrc": "3985:20:18",
													"nodeType": "YulFunctionCall",
													"src": "3985:20:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3959:6:18",
												"nodeType": "YulIdentifier",
												"src": "3959:6:18"
											},
											"nativeSrc": "3959:47:18",
											"nodeType": "YulFunctionCall",
											"src": "3959:47:18"
										},
										"nativeSrc": "3959:47:18",
										"nodeType": "YulExpressionStatement",
										"src": "3959:47:18"
									},
									{
										"nativeSrc": "4015:139:18",
										"nodeType": "YulAssignment",
										"src": "4015:139:18",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "4149:4:18",
													"nodeType": "YulIdentifier",
													"src": "4149:4:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "4023:124:18",
												"nodeType": "YulIdentifier",
												"src": "4023:124:18"
											},
											"nativeSrc": "4023:131:18",
											"nodeType": "YulFunctionCall",
											"src": "4023:131:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "4015:4:18",
												"nodeType": "YulIdentifier",
												"src": "4015:4:18"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "3742:419:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3893:9:18",
									"nodeType": "YulTypedName",
									"src": "3893:9:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "3908:4:18",
									"nodeType": "YulTypedName",
									"src": "3908:4:18",
									"type": ""
								}
							],
							"src": "3742:419:18"
						},
						{
							"body": {
								"nativeSrc": "4293:206:18",
								"nodeType": "YulBlock",
								"src": "4293:206:18",
								"statements": [
									{
										"nativeSrc": "4303:26:18",
										"nodeType": "YulAssignment",
										"src": "4303:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4315:9:18",
													"nodeType": "YulIdentifier",
													"src": "4315:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "4326:2:18",
													"nodeType": "YulLiteral",
													"src": "4326:2:18",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "4311:3:18",
												"nodeType": "YulIdentifier",
												"src": "4311:3:18"
											},
											"nativeSrc": "4311:18:18",
											"nodeType": "YulFunctionCall",
											"src": "4311:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "4303:4:18",
												"nodeType": "YulIdentifier",
												"src": "4303:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "4383:6:18",
													"nodeType": "YulIdentifier",
													"src": "4383:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4396:9:18",
															"nodeType": "YulIdentifier",
															"src": "4396:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4407:1:18",
															"nodeType": "YulLiteral",
															"src": "4407:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4392:3:18",
														"nodeType": "YulIdentifier",
														"src": "4392:3:18"
													},
													"nativeSrc": "4392:17:18",
													"nodeType": "YulFunctionCall",
													"src": "4392:17:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "4339:43:18",
												"nodeType": "YulIdentifier",
												"src": "4339:43:18"
											},
											"nativeSrc": "4339:71:18",
											"nodeType": "YulFunctionCall",
											"src": "4339:71:18"
										},
										"nativeSrc": "4339:71:18",
										"nodeType": "YulExpressionStatement",
										"src": "4339:71:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "4464:6:18",
													"nodeType": "YulIdentifier",
													"src": "4464:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4477:9:18",
															"nodeType": "YulIdentifier",
															"src": "4477:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "4488:2:18",
															"nodeType": "YulLiteral",
															"src": "4488:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4473:3:18",
														"nodeType": "YulIdentifier",
														"src": "4473:3:18"
													},
													"nativeSrc": "4473:18:18",
													"nodeType": "YulFunctionCall",
													"src": "4473:18:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "4420:43:18",
												"nodeType": "YulIdentifier",
												"src": "4420:43:18"
											},
											"nativeSrc": "4420:72:18",
											"nodeType": "YulFunctionCall",
											"src": "4420:72:18"
										},
										"nativeSrc": "4420:72:18",
										"nodeType": "YulExpressionStatement",
										"src": "4420:72:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
							"nativeSrc": "4167:332:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4257:9:18",
									"nodeType": "YulTypedName",
									"src": "4257:9:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "4269:6:18",
									"nodeType": "YulTypedName",
									"src": "4269:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "4277:6:18",
									"nodeType": "YulTypedName",
									"src": "4277:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4288:4:18",
									"nodeType": "YulTypedName",
									"src": "4288:4:18",
									"type": ""
								}
							],
							"src": "4167:332:18"
						},
						{
							"body": {
								"nativeSrc": "4547:48:18",
								"nodeType": "YulBlock",
								"src": "4547:48:18",
								"statements": [
									{
										"nativeSrc": "4557:32:18",
										"nodeType": "YulAssignment",
										"src": "4557:32:18",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "4582:5:18",
															"nodeType": "YulIdentifier",
															"src": "4582:5:18"
														}
													],
													"functionName": {
														"name": "iszero",
														"nativeSrc": "4575:6:18",
														"nodeType": "YulIdentifier",
														"src": "4575:6:18"
													},
													"nativeSrc": "4575:13:18",
													"nodeType": "YulFunctionCall",
													"src": "4575:13:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "4568:6:18",
												"nodeType": "YulIdentifier",
												"src": "4568:6:18"
											},
											"nativeSrc": "4568:21:18",
											"nodeType": "YulFunctionCall",
											"src": "4568:21:18"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "4557:7:18",
												"nodeType": "YulIdentifier",
												"src": "4557:7:18"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bool",
							"nativeSrc": "4505:90:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4529:5:18",
									"nodeType": "YulTypedName",
									"src": "4529:5:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "4539:7:18",
									"nodeType": "YulTypedName",
									"src": "4539:7:18",
									"type": ""
								}
							],
							"src": "4505:90:18"
						},
						{
							"body": {
								"nativeSrc": "4641:76:18",
								"nodeType": "YulBlock",
								"src": "4641:76:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "4695:16:18",
											"nodeType": "YulBlock",
											"src": "4695:16:18",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "4704:1:18",
																"nodeType": "YulLiteral",
																"src": "4704:1:18",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "4707:1:18",
																"nodeType": "YulLiteral",
																"src": "4707:1:18",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "4697:6:18",
															"nodeType": "YulIdentifier",
															"src": "4697:6:18"
														},
														"nativeSrc": "4697:12:18",
														"nodeType": "YulFunctionCall",
														"src": "4697:12:18"
													},
													"nativeSrc": "4697:12:18",
													"nodeType": "YulExpressionStatement",
													"src": "4697:12:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "4664:5:18",
															"nodeType": "YulIdentifier",
															"src": "4664:5:18"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "4686:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "4686:5:18"
																}
															],
															"functionName": {
																"name": "cleanup_t_bool",
																"nativeSrc": "4671:14:18",
																"nodeType": "YulIdentifier",
																"src": "4671:14:18"
															},
															"nativeSrc": "4671:21:18",
															"nodeType": "YulFunctionCall",
															"src": "4671:21:18"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "4661:2:18",
														"nodeType": "YulIdentifier",
														"src": "4661:2:18"
													},
													"nativeSrc": "4661:32:18",
													"nodeType": "YulFunctionCall",
													"src": "4661:32:18"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "4654:6:18",
												"nodeType": "YulIdentifier",
												"src": "4654:6:18"
											},
											"nativeSrc": "4654:40:18",
											"nodeType": "YulFunctionCall",
											"src": "4654:40:18"
										},
										"nativeSrc": "4651:60:18",
										"nodeType": "YulIf",
										"src": "4651:60:18"
									}
								]
							},
							"name": "validator_revert_t_bool",
							"nativeSrc": "4601:116:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "4634:5:18",
									"nodeType": "YulTypedName",
									"src": "4634:5:18",
									"type": ""
								}
							],
							"src": "4601:116:18"
						},
						{
							"body": {
								"nativeSrc": "4783:77:18",
								"nodeType": "YulBlock",
								"src": "4783:77:18",
								"statements": [
									{
										"nativeSrc": "4793:22:18",
										"nodeType": "YulAssignment",
										"src": "4793:22:18",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "4808:6:18",
													"nodeType": "YulIdentifier",
													"src": "4808:6:18"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "4802:5:18",
												"nodeType": "YulIdentifier",
												"src": "4802:5:18"
											},
											"nativeSrc": "4802:13:18",
											"nodeType": "YulFunctionCall",
											"src": "4802:13:18"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "4793:5:18",
												"nodeType": "YulIdentifier",
												"src": "4793:5:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "4848:5:18",
													"nodeType": "YulIdentifier",
													"src": "4848:5:18"
												}
											],
											"functionName": {
												"name": "validator_revert_t_bool",
												"nativeSrc": "4824:23:18",
												"nodeType": "YulIdentifier",
												"src": "4824:23:18"
											},
											"nativeSrc": "4824:30:18",
											"nodeType": "YulFunctionCall",
											"src": "4824:30:18"
										},
										"nativeSrc": "4824:30:18",
										"nodeType": "YulExpressionStatement",
										"src": "4824:30:18"
									}
								]
							},
							"name": "abi_decode_t_bool_fromMemory",
							"nativeSrc": "4723:137:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "4761:6:18",
									"nodeType": "YulTypedName",
									"src": "4761:6:18",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "4769:3:18",
									"nodeType": "YulTypedName",
									"src": "4769:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "4777:5:18",
									"nodeType": "YulTypedName",
									"src": "4777:5:18",
									"type": ""
								}
							],
							"src": "4723:137:18"
						},
						{
							"body": {
								"nativeSrc": "4940:271:18",
								"nodeType": "YulBlock",
								"src": "4940:271:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "4986:83:18",
											"nodeType": "YulBlock",
											"src": "4986:83:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "4988:77:18",
															"nodeType": "YulIdentifier",
															"src": "4988:77:18"
														},
														"nativeSrc": "4988:79:18",
														"nodeType": "YulFunctionCall",
														"src": "4988:79:18"
													},
													"nativeSrc": "4988:79:18",
													"nodeType": "YulExpressionStatement",
													"src": "4988:79:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "4961:7:18",
															"nodeType": "YulIdentifier",
															"src": "4961:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "4970:9:18",
															"nodeType": "YulIdentifier",
															"src": "4970:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "4957:3:18",
														"nodeType": "YulIdentifier",
														"src": "4957:3:18"
													},
													"nativeSrc": "4957:23:18",
													"nodeType": "YulFunctionCall",
													"src": "4957:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "4982:2:18",
													"nodeType": "YulLiteral",
													"src": "4982:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "4953:3:18",
												"nodeType": "YulIdentifier",
												"src": "4953:3:18"
											},
											"nativeSrc": "4953:32:18",
											"nodeType": "YulFunctionCall",
											"src": "4953:32:18"
										},
										"nativeSrc": "4950:119:18",
										"nodeType": "YulIf",
										"src": "4950:119:18"
									},
									{
										"nativeSrc": "5079:125:18",
										"nodeType": "YulBlock",
										"src": "5079:125:18",
										"statements": [
											{
												"nativeSrc": "5094:15:18",
												"nodeType": "YulVariableDeclaration",
												"src": "5094:15:18",
												"value": {
													"kind": "number",
													"nativeSrc": "5108:1:18",
													"nodeType": "YulLiteral",
													"src": "5108:1:18",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5098:6:18",
														"nodeType": "YulTypedName",
														"src": "5098:6:18",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5123:71:18",
												"nodeType": "YulAssignment",
												"src": "5123:71:18",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5166:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "5166:9:18"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5177:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "5177:6:18"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5162:3:18",
																"nodeType": "YulIdentifier",
																"src": "5162:3:18"
															},
															"nativeSrc": "5162:22:18",
															"nodeType": "YulFunctionCall",
															"src": "5162:22:18"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5186:7:18",
															"nodeType": "YulIdentifier",
															"src": "5186:7:18"
														}
													],
													"functionName": {
														"name": "abi_decode_t_bool_fromMemory",
														"nativeSrc": "5133:28:18",
														"nodeType": "YulIdentifier",
														"src": "5133:28:18"
													},
													"nativeSrc": "5133:61:18",
													"nodeType": "YulFunctionCall",
													"src": "5133:61:18"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "5123:6:18",
														"nodeType": "YulIdentifier",
														"src": "5123:6:18"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_bool_fromMemory",
							"nativeSrc": "4866:345:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4910:9:18",
									"nodeType": "YulTypedName",
									"src": "4910:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "4921:7:18",
									"nodeType": "YulTypedName",
									"src": "4921:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "4933:6:18",
									"nodeType": "YulTypedName",
									"src": "4933:6:18",
									"type": ""
								}
							],
							"src": "4866:345:18"
						},
						{
							"body": {
								"nativeSrc": "5245:152:18",
								"nodeType": "YulBlock",
								"src": "5245:152:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5262:1:18",
													"nodeType": "YulLiteral",
													"src": "5262:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "5265:77:18",
													"nodeType": "YulLiteral",
													"src": "5265:77:18",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5255:6:18",
												"nodeType": "YulIdentifier",
												"src": "5255:6:18"
											},
											"nativeSrc": "5255:88:18",
											"nodeType": "YulFunctionCall",
											"src": "5255:88:18"
										},
										"nativeSrc": "5255:88:18",
										"nodeType": "YulExpressionStatement",
										"src": "5255:88:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5359:1:18",
													"nodeType": "YulLiteral",
													"src": "5359:1:18",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "5362:4:18",
													"nodeType": "YulLiteral",
													"src": "5362:4:18",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5352:6:18",
												"nodeType": "YulIdentifier",
												"src": "5352:6:18"
											},
											"nativeSrc": "5352:15:18",
											"nodeType": "YulFunctionCall",
											"src": "5352:15:18"
										},
										"nativeSrc": "5352:15:18",
										"nodeType": "YulExpressionStatement",
										"src": "5352:15:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5383:1:18",
													"nodeType": "YulLiteral",
													"src": "5383:1:18",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "5386:4:18",
													"nodeType": "YulLiteral",
													"src": "5386:4:18",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "5376:6:18",
												"nodeType": "YulIdentifier",
												"src": "5376:6:18"
											},
											"nativeSrc": "5376:15:18",
											"nodeType": "YulFunctionCall",
											"src": "5376:15:18"
										},
										"nativeSrc": "5376:15:18",
										"nodeType": "YulExpressionStatement",
										"src": "5376:15:18"
									}
								]
							},
							"name": "panic_error_0x11",
							"nativeSrc": "5217:180:18",
							"nodeType": "YulFunctionDefinition",
							"src": "5217:180:18"
						},
						{
							"body": {
								"nativeSrc": "5448:149:18",
								"nodeType": "YulBlock",
								"src": "5448:149:18",
								"statements": [
									{
										"nativeSrc": "5458:25:18",
										"nodeType": "YulAssignment",
										"src": "5458:25:18",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "5481:1:18",
													"nodeType": "YulIdentifier",
													"src": "5481:1:18"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "5463:17:18",
												"nodeType": "YulIdentifier",
												"src": "5463:17:18"
											},
											"nativeSrc": "5463:20:18",
											"nodeType": "YulFunctionCall",
											"src": "5463:20:18"
										},
										"variableNames": [
											{
												"name": "x",
												"nativeSrc": "5458:1:18",
												"nodeType": "YulIdentifier",
												"src": "5458:1:18"
											}
										]
									},
									{
										"nativeSrc": "5492:25:18",
										"nodeType": "YulAssignment",
										"src": "5492:25:18",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "5515:1:18",
													"nodeType": "YulIdentifier",
													"src": "5515:1:18"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "5497:17:18",
												"nodeType": "YulIdentifier",
												"src": "5497:17:18"
											},
											"nativeSrc": "5497:20:18",
											"nodeType": "YulFunctionCall",
											"src": "5497:20:18"
										},
										"variableNames": [
											{
												"name": "y",
												"nativeSrc": "5492:1:18",
												"nodeType": "YulIdentifier",
												"src": "5492:1:18"
											}
										]
									},
									{
										"nativeSrc": "5526:17:18",
										"nodeType": "YulAssignment",
										"src": "5526:17:18",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "5538:1:18",
													"nodeType": "YulIdentifier",
													"src": "5538:1:18"
												},
												{
													"name": "y",
													"nativeSrc": "5541:1:18",
													"nodeType": "YulIdentifier",
													"src": "5541:1:18"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "5534:3:18",
												"nodeType": "YulIdentifier",
												"src": "5534:3:18"
											},
											"nativeSrc": "5534:9:18",
											"nodeType": "YulFunctionCall",
											"src": "5534:9:18"
										},
										"variableNames": [
											{
												"name": "diff",
												"nativeSrc": "5526:4:18",
												"nodeType": "YulIdentifier",
												"src": "5526:4:18"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "5568:22:18",
											"nodeType": "YulBlock",
											"src": "5568:22:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "5570:16:18",
															"nodeType": "YulIdentifier",
															"src": "5570:16:18"
														},
														"nativeSrc": "5570:18:18",
														"nodeType": "YulFunctionCall",
														"src": "5570:18:18"
													},
													"nativeSrc": "5570:18:18",
													"nodeType": "YulExpressionStatement",
													"src": "5570:18:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "diff",
													"nativeSrc": "5559:4:18",
													"nodeType": "YulIdentifier",
													"src": "5559:4:18"
												},
												{
													"name": "x",
													"nativeSrc": "5565:1:18",
													"nodeType": "YulIdentifier",
													"src": "5565:1:18"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "5556:2:18",
												"nodeType": "YulIdentifier",
												"src": "5556:2:18"
											},
											"nativeSrc": "5556:11:18",
											"nodeType": "YulFunctionCall",
											"src": "5556:11:18"
										},
										"nativeSrc": "5553:37:18",
										"nodeType": "YulIf",
										"src": "5553:37:18"
									}
								]
							},
							"name": "checked_sub_t_uint256",
							"nativeSrc": "5403:194:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "5434:1:18",
									"nodeType": "YulTypedName",
									"src": "5434:1:18",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "5437:1:18",
									"nodeType": "YulTypedName",
									"src": "5437:1:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "diff",
									"nativeSrc": "5443:4:18",
									"nodeType": "YulTypedName",
									"src": "5443:4:18",
									"type": ""
								}
							],
							"src": "5403:194:18"
						},
						{
							"body": {
								"nativeSrc": "5757:288:18",
								"nodeType": "YulBlock",
								"src": "5757:288:18",
								"statements": [
									{
										"nativeSrc": "5767:26:18",
										"nodeType": "YulAssignment",
										"src": "5767:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5779:9:18",
													"nodeType": "YulIdentifier",
													"src": "5779:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "5790:2:18",
													"nodeType": "YulLiteral",
													"src": "5790:2:18",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5775:3:18",
												"nodeType": "YulIdentifier",
												"src": "5775:3:18"
											},
											"nativeSrc": "5775:18:18",
											"nodeType": "YulFunctionCall",
											"src": "5775:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5767:4:18",
												"nodeType": "YulIdentifier",
												"src": "5767:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "5847:6:18",
													"nodeType": "YulIdentifier",
													"src": "5847:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5860:9:18",
															"nodeType": "YulIdentifier",
															"src": "5860:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5871:1:18",
															"nodeType": "YulLiteral",
															"src": "5871:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5856:3:18",
														"nodeType": "YulIdentifier",
														"src": "5856:3:18"
													},
													"nativeSrc": "5856:17:18",
													"nodeType": "YulFunctionCall",
													"src": "5856:17:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "5803:43:18",
												"nodeType": "YulIdentifier",
												"src": "5803:43:18"
											},
											"nativeSrc": "5803:71:18",
											"nodeType": "YulFunctionCall",
											"src": "5803:71:18"
										},
										"nativeSrc": "5803:71:18",
										"nodeType": "YulExpressionStatement",
										"src": "5803:71:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "5928:6:18",
													"nodeType": "YulIdentifier",
													"src": "5928:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5941:9:18",
															"nodeType": "YulIdentifier",
															"src": "5941:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "5952:2:18",
															"nodeType": "YulLiteral",
															"src": "5952:2:18",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5937:3:18",
														"nodeType": "YulIdentifier",
														"src": "5937:3:18"
													},
													"nativeSrc": "5937:18:18",
													"nodeType": "YulFunctionCall",
													"src": "5937:18:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "5884:43:18",
												"nodeType": "YulIdentifier",
												"src": "5884:43:18"
											},
											"nativeSrc": "5884:72:18",
											"nodeType": "YulFunctionCall",
											"src": "5884:72:18"
										},
										"nativeSrc": "5884:72:18",
										"nodeType": "YulExpressionStatement",
										"src": "5884:72:18"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "6010:6:18",
													"nodeType": "YulIdentifier",
													"src": "6010:6:18"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6023:9:18",
															"nodeType": "YulIdentifier",
															"src": "6023:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "6034:2:18",
															"nodeType": "YulLiteral",
															"src": "6034:2:18",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6019:3:18",
														"nodeType": "YulIdentifier",
														"src": "6019:3:18"
													},
													"nativeSrc": "6019:18:18",
													"nodeType": "YulFunctionCall",
													"src": "6019:18:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "5966:43:18",
												"nodeType": "YulIdentifier",
												"src": "5966:43:18"
											},
											"nativeSrc": "5966:72:18",
											"nodeType": "YulFunctionCall",
											"src": "5966:72:18"
										},
										"nativeSrc": "5966:72:18",
										"nodeType": "YulExpressionStatement",
										"src": "5966:72:18"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
							"nativeSrc": "5603:442:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5713:9:18",
									"nodeType": "YulTypedName",
									"src": "5713:9:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "5725:6:18",
									"nodeType": "YulTypedName",
									"src": "5725:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "5733:6:18",
									"nodeType": "YulTypedName",
									"src": "5733:6:18",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5741:6:18",
									"nodeType": "YulTypedName",
									"src": "5741:6:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5752:4:18",
									"nodeType": "YulTypedName",
									"src": "5752:4:18",
									"type": ""
								}
							],
							"src": "5603:442:18"
						},
						{
							"body": {
								"nativeSrc": "6095:147:18",
								"nodeType": "YulBlock",
								"src": "6095:147:18",
								"statements": [
									{
										"nativeSrc": "6105:25:18",
										"nodeType": "YulAssignment",
										"src": "6105:25:18",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "6128:1:18",
													"nodeType": "YulIdentifier",
													"src": "6128:1:18"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "6110:17:18",
												"nodeType": "YulIdentifier",
												"src": "6110:17:18"
											},
											"nativeSrc": "6110:20:18",
											"nodeType": "YulFunctionCall",
											"src": "6110:20:18"
										},
										"variableNames": [
											{
												"name": "x",
												"nativeSrc": "6105:1:18",
												"nodeType": "YulIdentifier",
												"src": "6105:1:18"
											}
										]
									},
									{
										"nativeSrc": "6139:25:18",
										"nodeType": "YulAssignment",
										"src": "6139:25:18",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "6162:1:18",
													"nodeType": "YulIdentifier",
													"src": "6162:1:18"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "6144:17:18",
												"nodeType": "YulIdentifier",
												"src": "6144:17:18"
											},
											"nativeSrc": "6144:20:18",
											"nodeType": "YulFunctionCall",
											"src": "6144:20:18"
										},
										"variableNames": [
											{
												"name": "y",
												"nativeSrc": "6139:1:18",
												"nodeType": "YulIdentifier",
												"src": "6139:1:18"
											}
										]
									},
									{
										"nativeSrc": "6173:16:18",
										"nodeType": "YulAssignment",
										"src": "6173:16:18",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "6184:1:18",
													"nodeType": "YulIdentifier",
													"src": "6184:1:18"
												},
												{
													"name": "y",
													"nativeSrc": "6187:1:18",
													"nodeType": "YulIdentifier",
													"src": "6187:1:18"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6180:3:18",
												"nodeType": "YulIdentifier",
												"src": "6180:3:18"
											},
											"nativeSrc": "6180:9:18",
											"nodeType": "YulFunctionCall",
											"src": "6180:9:18"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "6173:3:18",
												"nodeType": "YulIdentifier",
												"src": "6173:3:18"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "6213:22:18",
											"nodeType": "YulBlock",
											"src": "6213:22:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "6215:16:18",
															"nodeType": "YulIdentifier",
															"src": "6215:16:18"
														},
														"nativeSrc": "6215:18:18",
														"nodeType": "YulFunctionCall",
														"src": "6215:18:18"
													},
													"nativeSrc": "6215:18:18",
													"nodeType": "YulExpressionStatement",
													"src": "6215:18:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "6205:1:18",
													"nodeType": "YulIdentifier",
													"src": "6205:1:18"
												},
												{
													"name": "sum",
													"nativeSrc": "6208:3:18",
													"nodeType": "YulIdentifier",
													"src": "6208:3:18"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "6202:2:18",
												"nodeType": "YulIdentifier",
												"src": "6202:2:18"
											},
											"nativeSrc": "6202:10:18",
											"nodeType": "YulFunctionCall",
											"src": "6202:10:18"
										},
										"nativeSrc": "6199:36:18",
										"nodeType": "YulIf",
										"src": "6199:36:18"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nativeSrc": "6051:191:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "6082:1:18",
									"nodeType": "YulTypedName",
									"src": "6082:1:18",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "6085:1:18",
									"nodeType": "YulTypedName",
									"src": "6085:1:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "6091:3:18",
									"nodeType": "YulTypedName",
									"src": "6091:3:18",
									"type": ""
								}
							],
							"src": "6051:191:18"
						},
						{
							"body": {
								"nativeSrc": "6354:56:18",
								"nodeType": "YulBlock",
								"src": "6354:56:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "6376:6:18",
															"nodeType": "YulIdentifier",
															"src": "6376:6:18"
														},
														{
															"kind": "number",
															"nativeSrc": "6384:1:18",
															"nodeType": "YulLiteral",
															"src": "6384:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6372:3:18",
														"nodeType": "YulIdentifier",
														"src": "6372:3:18"
													},
													"nativeSrc": "6372:14:18",
													"nodeType": "YulFunctionCall",
													"src": "6372:14:18"
												},
												{
													"hexValue": "4674736f5265676973747279",
													"kind": "string",
													"nativeSrc": "6388:14:18",
													"nodeType": "YulLiteral",
													"src": "6388:14:18",
													"type": "",
													"value": "FtsoRegistry"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "6365:6:18",
												"nodeType": "YulIdentifier",
												"src": "6365:6:18"
											},
											"nativeSrc": "6365:38:18",
											"nodeType": "YulFunctionCall",
											"src": "6365:38:18"
										},
										"nativeSrc": "6365:38:18",
										"nodeType": "YulExpressionStatement",
										"src": "6365:38:18"
									}
								]
							},
							"name": "store_literal_in_memory_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f",
							"nativeSrc": "6248:162:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "6346:6:18",
									"nodeType": "YulTypedName",
									"src": "6346:6:18",
									"type": ""
								}
							],
							"src": "6248:162:18"
						},
						{
							"body": {
								"nativeSrc": "6562:220:18",
								"nodeType": "YulBlock",
								"src": "6562:220:18",
								"statements": [
									{
										"nativeSrc": "6572:74:18",
										"nodeType": "YulAssignment",
										"src": "6572:74:18",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6638:3:18",
													"nodeType": "YulIdentifier",
													"src": "6638:3:18"
												},
												{
													"kind": "number",
													"nativeSrc": "6643:2:18",
													"nodeType": "YulLiteral",
													"src": "6643:2:18",
													"type": "",
													"value": "12"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "6579:58:18",
												"nodeType": "YulIdentifier",
												"src": "6579:58:18"
											},
											"nativeSrc": "6579:67:18",
											"nodeType": "YulFunctionCall",
											"src": "6579:67:18"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "6572:3:18",
												"nodeType": "YulIdentifier",
												"src": "6572:3:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6744:3:18",
													"nodeType": "YulIdentifier",
													"src": "6744:3:18"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f",
												"nativeSrc": "6655:88:18",
												"nodeType": "YulIdentifier",
												"src": "6655:88:18"
											},
											"nativeSrc": "6655:93:18",
											"nodeType": "YulFunctionCall",
											"src": "6655:93:18"
										},
										"nativeSrc": "6655:93:18",
										"nodeType": "YulExpressionStatement",
										"src": "6655:93:18"
									},
									{
										"nativeSrc": "6757:19:18",
										"nodeType": "YulAssignment",
										"src": "6757:19:18",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "6768:3:18",
													"nodeType": "YulIdentifier",
													"src": "6768:3:18"
												},
												{
													"kind": "number",
													"nativeSrc": "6773:2:18",
													"nodeType": "YulLiteral",
													"src": "6773:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6764:3:18",
												"nodeType": "YulIdentifier",
												"src": "6764:3:18"
											},
											"nativeSrc": "6764:12:18",
											"nodeType": "YulFunctionCall",
											"src": "6764:12:18"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "6757:3:18",
												"nodeType": "YulIdentifier",
												"src": "6757:3:18"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "6416:366:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "6550:3:18",
									"nodeType": "YulTypedName",
									"src": "6550:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "6558:3:18",
									"nodeType": "YulTypedName",
									"src": "6558:3:18",
									"type": ""
								}
							],
							"src": "6416:366:18"
						},
						{
							"body": {
								"nativeSrc": "6959:248:18",
								"nodeType": "YulBlock",
								"src": "6959:248:18",
								"statements": [
									{
										"nativeSrc": "6969:26:18",
										"nodeType": "YulAssignment",
										"src": "6969:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6981:9:18",
													"nodeType": "YulIdentifier",
													"src": "6981:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "6992:2:18",
													"nodeType": "YulLiteral",
													"src": "6992:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "6977:3:18",
												"nodeType": "YulIdentifier",
												"src": "6977:3:18"
											},
											"nativeSrc": "6977:18:18",
											"nodeType": "YulFunctionCall",
											"src": "6977:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "6969:4:18",
												"nodeType": "YulIdentifier",
												"src": "6969:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7016:9:18",
															"nodeType": "YulIdentifier",
															"src": "7016:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "7027:1:18",
															"nodeType": "YulLiteral",
															"src": "7027:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7012:3:18",
														"nodeType": "YulIdentifier",
														"src": "7012:3:18"
													},
													"nativeSrc": "7012:17:18",
													"nodeType": "YulFunctionCall",
													"src": "7012:17:18"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "7035:4:18",
															"nodeType": "YulIdentifier",
															"src": "7035:4:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "7041:9:18",
															"nodeType": "YulIdentifier",
															"src": "7041:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "7031:3:18",
														"nodeType": "YulIdentifier",
														"src": "7031:3:18"
													},
													"nativeSrc": "7031:20:18",
													"nodeType": "YulFunctionCall",
													"src": "7031:20:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7005:6:18",
												"nodeType": "YulIdentifier",
												"src": "7005:6:18"
											},
											"nativeSrc": "7005:47:18",
											"nodeType": "YulFunctionCall",
											"src": "7005:47:18"
										},
										"nativeSrc": "7005:47:18",
										"nodeType": "YulExpressionStatement",
										"src": "7005:47:18"
									},
									{
										"nativeSrc": "7061:139:18",
										"nodeType": "YulAssignment",
										"src": "7061:139:18",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "7195:4:18",
													"nodeType": "YulIdentifier",
													"src": "7195:4:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "7069:124:18",
												"nodeType": "YulIdentifier",
												"src": "7069:124:18"
											},
											"nativeSrc": "7069:131:18",
											"nodeType": "YulFunctionCall",
											"src": "7069:131:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7061:4:18",
												"nodeType": "YulIdentifier",
												"src": "7061:4:18"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "6788:419:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6939:9:18",
									"nodeType": "YulTypedName",
									"src": "6939:9:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "6954:4:18",
									"nodeType": "YulTypedName",
									"src": "6954:4:18",
									"type": ""
								}
							],
							"src": "6788:419:18"
						},
						{
							"body": {
								"nativeSrc": "7276:80:18",
								"nodeType": "YulBlock",
								"src": "7276:80:18",
								"statements": [
									{
										"nativeSrc": "7286:22:18",
										"nodeType": "YulAssignment",
										"src": "7286:22:18",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "7301:6:18",
													"nodeType": "YulIdentifier",
													"src": "7301:6:18"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "7295:5:18",
												"nodeType": "YulIdentifier",
												"src": "7295:5:18"
											},
											"nativeSrc": "7295:13:18",
											"nodeType": "YulFunctionCall",
											"src": "7295:13:18"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "7286:5:18",
												"nodeType": "YulIdentifier",
												"src": "7286:5:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "7344:5:18",
													"nodeType": "YulIdentifier",
													"src": "7344:5:18"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nativeSrc": "7317:26:18",
												"nodeType": "YulIdentifier",
												"src": "7317:26:18"
											},
											"nativeSrc": "7317:33:18",
											"nodeType": "YulFunctionCall",
											"src": "7317:33:18"
										},
										"nativeSrc": "7317:33:18",
										"nodeType": "YulExpressionStatement",
										"src": "7317:33:18"
									}
								]
							},
							"name": "abi_decode_t_address_fromMemory",
							"nativeSrc": "7213:143:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "7254:6:18",
									"nodeType": "YulTypedName",
									"src": "7254:6:18",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "7262:3:18",
									"nodeType": "YulTypedName",
									"src": "7262:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "7270:5:18",
									"nodeType": "YulTypedName",
									"src": "7270:5:18",
									"type": ""
								}
							],
							"src": "7213:143:18"
						},
						{
							"body": {
								"nativeSrc": "7439:274:18",
								"nodeType": "YulBlock",
								"src": "7439:274:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "7485:83:18",
											"nodeType": "YulBlock",
											"src": "7485:83:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "7487:77:18",
															"nodeType": "YulIdentifier",
															"src": "7487:77:18"
														},
														"nativeSrc": "7487:79:18",
														"nodeType": "YulFunctionCall",
														"src": "7487:79:18"
													},
													"nativeSrc": "7487:79:18",
													"nodeType": "YulExpressionStatement",
													"src": "7487:79:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "7460:7:18",
															"nodeType": "YulIdentifier",
															"src": "7460:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "7469:9:18",
															"nodeType": "YulIdentifier",
															"src": "7469:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "7456:3:18",
														"nodeType": "YulIdentifier",
														"src": "7456:3:18"
													},
													"nativeSrc": "7456:23:18",
													"nodeType": "YulFunctionCall",
													"src": "7456:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "7481:2:18",
													"nodeType": "YulLiteral",
													"src": "7481:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "7452:3:18",
												"nodeType": "YulIdentifier",
												"src": "7452:3:18"
											},
											"nativeSrc": "7452:32:18",
											"nodeType": "YulFunctionCall",
											"src": "7452:32:18"
										},
										"nativeSrc": "7449:119:18",
										"nodeType": "YulIf",
										"src": "7449:119:18"
									},
									{
										"nativeSrc": "7578:128:18",
										"nodeType": "YulBlock",
										"src": "7578:128:18",
										"statements": [
											{
												"nativeSrc": "7593:15:18",
												"nodeType": "YulVariableDeclaration",
												"src": "7593:15:18",
												"value": {
													"kind": "number",
													"nativeSrc": "7607:1:18",
													"nodeType": "YulLiteral",
													"src": "7607:1:18",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "7597:6:18",
														"nodeType": "YulTypedName",
														"src": "7597:6:18",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "7622:74:18",
												"nodeType": "YulAssignment",
												"src": "7622:74:18",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "7668:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "7668:9:18"
																},
																{
																	"name": "offset",
																	"nativeSrc": "7679:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "7679:6:18"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "7664:3:18",
																"nodeType": "YulIdentifier",
																"src": "7664:3:18"
															},
															"nativeSrc": "7664:22:18",
															"nodeType": "YulFunctionCall",
															"src": "7664:22:18"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "7688:7:18",
															"nodeType": "YulIdentifier",
															"src": "7688:7:18"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nativeSrc": "7632:31:18",
														"nodeType": "YulIdentifier",
														"src": "7632:31:18"
													},
													"nativeSrc": "7632:64:18",
													"nodeType": "YulFunctionCall",
													"src": "7632:64:18"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "7622:6:18",
														"nodeType": "YulIdentifier",
														"src": "7622:6:18"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address_fromMemory",
							"nativeSrc": "7362:351:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7409:9:18",
									"nodeType": "YulTypedName",
									"src": "7409:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "7420:7:18",
									"nodeType": "YulTypedName",
									"src": "7420:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "7432:6:18",
									"nodeType": "YulTypedName",
									"src": "7432:6:18",
									"type": ""
								}
							],
							"src": "7362:351:18"
						},
						{
							"body": {
								"nativeSrc": "7825:51:18",
								"nodeType": "YulBlock",
								"src": "7825:51:18",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "7847:6:18",
															"nodeType": "YulIdentifier",
															"src": "7847:6:18"
														},
														{
															"kind": "number",
															"nativeSrc": "7855:1:18",
															"nodeType": "YulLiteral",
															"src": "7855:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7843:3:18",
														"nodeType": "YulIdentifier",
														"src": "7843:3:18"
													},
													"nativeSrc": "7843:14:18",
													"nodeType": "YulFunctionCall",
													"src": "7843:14:18"
												},
												{
													"hexValue": "74657374425443",
													"kind": "string",
													"nativeSrc": "7859:9:18",
													"nodeType": "YulLiteral",
													"src": "7859:9:18",
													"type": "",
													"value": "testBTC"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7836:6:18",
												"nodeType": "YulIdentifier",
												"src": "7836:6:18"
											},
											"nativeSrc": "7836:33:18",
											"nodeType": "YulFunctionCall",
											"src": "7836:33:18"
										},
										"nativeSrc": "7836:33:18",
										"nodeType": "YulExpressionStatement",
										"src": "7836:33:18"
									}
								]
							},
							"name": "store_literal_in_memory_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958",
							"nativeSrc": "7719:157:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "7817:6:18",
									"nodeType": "YulTypedName",
									"src": "7817:6:18",
									"type": ""
								}
							],
							"src": "7719:157:18"
						},
						{
							"body": {
								"nativeSrc": "8028:219:18",
								"nodeType": "YulBlock",
								"src": "8028:219:18",
								"statements": [
									{
										"nativeSrc": "8038:73:18",
										"nodeType": "YulAssignment",
										"src": "8038:73:18",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "8104:3:18",
													"nodeType": "YulIdentifier",
													"src": "8104:3:18"
												},
												{
													"kind": "number",
													"nativeSrc": "8109:1:18",
													"nodeType": "YulLiteral",
													"src": "8109:1:18",
													"type": "",
													"value": "7"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "8045:58:18",
												"nodeType": "YulIdentifier",
												"src": "8045:58:18"
											},
											"nativeSrc": "8045:66:18",
											"nodeType": "YulFunctionCall",
											"src": "8045:66:18"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "8038:3:18",
												"nodeType": "YulIdentifier",
												"src": "8038:3:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "8209:3:18",
													"nodeType": "YulIdentifier",
													"src": "8209:3:18"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958",
												"nativeSrc": "8120:88:18",
												"nodeType": "YulIdentifier",
												"src": "8120:88:18"
											},
											"nativeSrc": "8120:93:18",
											"nodeType": "YulFunctionCall",
											"src": "8120:93:18"
										},
										"nativeSrc": "8120:93:18",
										"nodeType": "YulExpressionStatement",
										"src": "8120:93:18"
									},
									{
										"nativeSrc": "8222:19:18",
										"nodeType": "YulAssignment",
										"src": "8222:19:18",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "8233:3:18",
													"nodeType": "YulIdentifier",
													"src": "8233:3:18"
												},
												{
													"kind": "number",
													"nativeSrc": "8238:2:18",
													"nodeType": "YulLiteral",
													"src": "8238:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8229:3:18",
												"nodeType": "YulIdentifier",
												"src": "8229:3:18"
											},
											"nativeSrc": "8229:12:18",
											"nodeType": "YulFunctionCall",
											"src": "8229:12:18"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "8222:3:18",
												"nodeType": "YulIdentifier",
												"src": "8222:3:18"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "7882:365:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "8016:3:18",
									"nodeType": "YulTypedName",
									"src": "8016:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "8024:3:18",
									"nodeType": "YulTypedName",
									"src": "8024:3:18",
									"type": ""
								}
							],
							"src": "7882:365:18"
						},
						{
							"body": {
								"nativeSrc": "8424:248:18",
								"nodeType": "YulBlock",
								"src": "8424:248:18",
								"statements": [
									{
										"nativeSrc": "8434:26:18",
										"nodeType": "YulAssignment",
										"src": "8434:26:18",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "8446:9:18",
													"nodeType": "YulIdentifier",
													"src": "8446:9:18"
												},
												{
													"kind": "number",
													"nativeSrc": "8457:2:18",
													"nodeType": "YulLiteral",
													"src": "8457:2:18",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "8442:3:18",
												"nodeType": "YulIdentifier",
												"src": "8442:3:18"
											},
											"nativeSrc": "8442:18:18",
											"nodeType": "YulFunctionCall",
											"src": "8442:18:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8434:4:18",
												"nodeType": "YulIdentifier",
												"src": "8434:4:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "8481:9:18",
															"nodeType": "YulIdentifier",
															"src": "8481:9:18"
														},
														{
															"kind": "number",
															"nativeSrc": "8492:1:18",
															"nodeType": "YulLiteral",
															"src": "8492:1:18",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "8477:3:18",
														"nodeType": "YulIdentifier",
														"src": "8477:3:18"
													},
													"nativeSrc": "8477:17:18",
													"nodeType": "YulFunctionCall",
													"src": "8477:17:18"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "8500:4:18",
															"nodeType": "YulIdentifier",
															"src": "8500:4:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "8506:9:18",
															"nodeType": "YulIdentifier",
															"src": "8506:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "8496:3:18",
														"nodeType": "YulIdentifier",
														"src": "8496:3:18"
													},
													"nativeSrc": "8496:20:18",
													"nodeType": "YulFunctionCall",
													"src": "8496:20:18"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8470:6:18",
												"nodeType": "YulIdentifier",
												"src": "8470:6:18"
											},
											"nativeSrc": "8470:47:18",
											"nodeType": "YulFunctionCall",
											"src": "8470:47:18"
										},
										"nativeSrc": "8470:47:18",
										"nodeType": "YulExpressionStatement",
										"src": "8470:47:18"
									},
									{
										"nativeSrc": "8526:139:18",
										"nodeType": "YulAssignment",
										"src": "8526:139:18",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "8660:4:18",
													"nodeType": "YulIdentifier",
													"src": "8660:4:18"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "8534:124:18",
												"nodeType": "YulIdentifier",
												"src": "8534:124:18"
											},
											"nativeSrc": "8534:131:18",
											"nodeType": "YulFunctionCall",
											"src": "8534:131:18"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "8526:4:18",
												"nodeType": "YulIdentifier",
												"src": "8526:4:18"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "8253:419:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "8404:9:18",
									"nodeType": "YulTypedName",
									"src": "8404:9:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "8419:4:18",
									"nodeType": "YulTypedName",
									"src": "8419:4:18",
									"type": ""
								}
							],
							"src": "8253:419:18"
						},
						{
							"body": {
								"nativeSrc": "8741:80:18",
								"nodeType": "YulBlock",
								"src": "8741:80:18",
								"statements": [
									{
										"nativeSrc": "8751:22:18",
										"nodeType": "YulAssignment",
										"src": "8751:22:18",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "8766:6:18",
													"nodeType": "YulIdentifier",
													"src": "8766:6:18"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "8760:5:18",
												"nodeType": "YulIdentifier",
												"src": "8760:5:18"
											},
											"nativeSrc": "8760:13:18",
											"nodeType": "YulFunctionCall",
											"src": "8760:13:18"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "8751:5:18",
												"nodeType": "YulIdentifier",
												"src": "8751:5:18"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "8809:5:18",
													"nodeType": "YulIdentifier",
													"src": "8809:5:18"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nativeSrc": "8782:26:18",
												"nodeType": "YulIdentifier",
												"src": "8782:26:18"
											},
											"nativeSrc": "8782:33:18",
											"nodeType": "YulFunctionCall",
											"src": "8782:33:18"
										},
										"nativeSrc": "8782:33:18",
										"nodeType": "YulExpressionStatement",
										"src": "8782:33:18"
									}
								]
							},
							"name": "abi_decode_t_uint256_fromMemory",
							"nativeSrc": "8678:143:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "8719:6:18",
									"nodeType": "YulTypedName",
									"src": "8719:6:18",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "8727:3:18",
									"nodeType": "YulTypedName",
									"src": "8727:3:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "8735:5:18",
									"nodeType": "YulTypedName",
									"src": "8735:5:18",
									"type": ""
								}
							],
							"src": "8678:143:18"
						},
						{
							"body": {
								"nativeSrc": "8938:552:18",
								"nodeType": "YulBlock",
								"src": "8938:552:18",
								"statements": [
									{
										"body": {
											"nativeSrc": "8984:83:18",
											"nodeType": "YulBlock",
											"src": "8984:83:18",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "8986:77:18",
															"nodeType": "YulIdentifier",
															"src": "8986:77:18"
														},
														"nativeSrc": "8986:79:18",
														"nodeType": "YulFunctionCall",
														"src": "8986:79:18"
													},
													"nativeSrc": "8986:79:18",
													"nodeType": "YulExpressionStatement",
													"src": "8986:79:18"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "8959:7:18",
															"nodeType": "YulIdentifier",
															"src": "8959:7:18"
														},
														{
															"name": "headStart",
															"nativeSrc": "8968:9:18",
															"nodeType": "YulIdentifier",
															"src": "8968:9:18"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "8955:3:18",
														"nodeType": "YulIdentifier",
														"src": "8955:3:18"
													},
													"nativeSrc": "8955:23:18",
													"nodeType": "YulFunctionCall",
													"src": "8955:23:18"
												},
												{
													"kind": "number",
													"nativeSrc": "8980:2:18",
													"nodeType": "YulLiteral",
													"src": "8980:2:18",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "8951:3:18",
												"nodeType": "YulIdentifier",
												"src": "8951:3:18"
											},
											"nativeSrc": "8951:32:18",
											"nodeType": "YulFunctionCall",
											"src": "8951:32:18"
										},
										"nativeSrc": "8948:119:18",
										"nodeType": "YulIf",
										"src": "8948:119:18"
									},
									{
										"nativeSrc": "9077:128:18",
										"nodeType": "YulBlock",
										"src": "9077:128:18",
										"statements": [
											{
												"nativeSrc": "9092:15:18",
												"nodeType": "YulVariableDeclaration",
												"src": "9092:15:18",
												"value": {
													"kind": "number",
													"nativeSrc": "9106:1:18",
													"nodeType": "YulLiteral",
													"src": "9106:1:18",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "9096:6:18",
														"nodeType": "YulTypedName",
														"src": "9096:6:18",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "9121:74:18",
												"nodeType": "YulAssignment",
												"src": "9121:74:18",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "9167:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "9167:9:18"
																},
																{
																	"name": "offset",
																	"nativeSrc": "9178:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "9178:6:18"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "9163:3:18",
																"nodeType": "YulIdentifier",
																"src": "9163:3:18"
															},
															"nativeSrc": "9163:22:18",
															"nodeType": "YulFunctionCall",
															"src": "9163:22:18"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "9187:7:18",
															"nodeType": "YulIdentifier",
															"src": "9187:7:18"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nativeSrc": "9131:31:18",
														"nodeType": "YulIdentifier",
														"src": "9131:31:18"
													},
													"nativeSrc": "9131:64:18",
													"nodeType": "YulFunctionCall",
													"src": "9131:64:18"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "9121:6:18",
														"nodeType": "YulIdentifier",
														"src": "9121:6:18"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "9215:129:18",
										"nodeType": "YulBlock",
										"src": "9215:129:18",
										"statements": [
											{
												"nativeSrc": "9230:16:18",
												"nodeType": "YulVariableDeclaration",
												"src": "9230:16:18",
												"value": {
													"kind": "number",
													"nativeSrc": "9244:2:18",
													"nodeType": "YulLiteral",
													"src": "9244:2:18",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "9234:6:18",
														"nodeType": "YulTypedName",
														"src": "9234:6:18",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "9260:74:18",
												"nodeType": "YulAssignment",
												"src": "9260:74:18",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "9306:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "9306:9:18"
																},
																{
																	"name": "offset",
																	"nativeSrc": "9317:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "9317:6:18"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "9302:3:18",
																"nodeType": "YulIdentifier",
																"src": "9302:3:18"
															},
															"nativeSrc": "9302:22:18",
															"nodeType": "YulFunctionCall",
															"src": "9302:22:18"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "9326:7:18",
															"nodeType": "YulIdentifier",
															"src": "9326:7:18"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nativeSrc": "9270:31:18",
														"nodeType": "YulIdentifier",
														"src": "9270:31:18"
													},
													"nativeSrc": "9270:64:18",
													"nodeType": "YulFunctionCall",
													"src": "9270:64:18"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "9260:6:18",
														"nodeType": "YulIdentifier",
														"src": "9260:6:18"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "9354:129:18",
										"nodeType": "YulBlock",
										"src": "9354:129:18",
										"statements": [
											{
												"nativeSrc": "9369:16:18",
												"nodeType": "YulVariableDeclaration",
												"src": "9369:16:18",
												"value": {
													"kind": "number",
													"nativeSrc": "9383:2:18",
													"nodeType": "YulLiteral",
													"src": "9383:2:18",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "9373:6:18",
														"nodeType": "YulTypedName",
														"src": "9373:6:18",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "9399:74:18",
												"nodeType": "YulAssignment",
												"src": "9399:74:18",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "9445:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "9445:9:18"
																},
																{
																	"name": "offset",
																	"nativeSrc": "9456:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "9456:6:18"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "9441:3:18",
																"nodeType": "YulIdentifier",
																"src": "9441:3:18"
															},
															"nativeSrc": "9441:22:18",
															"nodeType": "YulFunctionCall",
															"src": "9441:22:18"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "9465:7:18",
															"nodeType": "YulIdentifier",
															"src": "9465:7:18"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nativeSrc": "9409:31:18",
														"nodeType": "YulIdentifier",
														"src": "9409:31:18"
													},
													"nativeSrc": "9409:64:18",
													"nodeType": "YulFunctionCall",
													"src": "9409:64:18"
												},
												"variableNames": [
													{
														"name": "value2",
														"nativeSrc": "9399:6:18",
														"nodeType": "YulIdentifier",
														"src": "9399:6:18"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory",
							"nativeSrc": "8827:663:18",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "8892:9:18",
									"nodeType": "YulTypedName",
									"src": "8892:9:18",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "8903:7:18",
									"nodeType": "YulTypedName",
									"src": "8903:7:18",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "8915:6:18",
									"nodeType": "YulTypedName",
									"src": "8915:6:18",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "8923:6:18",
									"nodeType": "YulTypedName",
									"src": "8923:6:18",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "8931:6:18",
									"nodeType": "YulTypedName",
									"src": "8931:6:18",
									"type": ""
								}
							],
							"src": "8827:663:18"
						}
					]
				},
				"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient balance\")\n\n    }\n\n    function abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f(memPtr) {\n\n        mstore(add(memPtr, 0), \"FtsoRegistry\")\n\n    }\n\n    function abi_encode_t_stringliteral_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n        store_literal_in_memory_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2751d350b91ccc0d59e1824e87b5da60b9483c795d034dceabe6fd4269bb745f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958(memPtr) {\n\n        mstore(add(memPtr, 0), \"testBTC\")\n\n    }\n\n    function abi_encode_t_stringliteral_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 7)\n        store_literal_in_memory_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_77ade177257fd579f57b668546e544864a4fd6cc1b157ac8d9577ba843018958_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
				"id": 18,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {},
		"linkReferences": {},
		"object": "608060405234801561001057600080fd5b50600436106100625760003560e01c806327e235e3146100675780632e1a7d4d1461009757806335403023146100b3578063670ab5e9146100cf578063ac75409a146100ed578063e54f08801461011d575b600080fd5b610081600480360381019061007c91906105d3565b61013d565b60405161008e9190610619565b60405180910390f35b6100b160048036038101906100ac9190610660565b610155565b005b6100cd60048036038101906100c89190610660565b6102cf565b005b6100d76103c9565b6040516100e4919061069c565b60405180910390f35b610107600480360381019061010291906105d3565b6103f2565b6040516101149190610619565b60405180910390f35b61012561043b565b604051610134939291906106b7565b60405180910390f35b60016020528060005260406000206000915090505481565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156101d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ce9061074b565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161023292919061076b565b6020604051808303816000875af1158015610251573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027591906107cc565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c59190610828565b9250508190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161032c9392919061085c565b6020604051808303816000875af115801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f91906107cc565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103bf9190610893565b9250508190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080600080600073ad67fe66660fb8dfe9d6b1b4240d8650e30f6019905060008173ffffffffffffffffffffffffffffffffffffffff166382760fca6040518163ffffffff1660e01b815260040161049690610913565b602060405180830381865afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190610948565b90508073ffffffffffffffffffffffffffffffffffffffff1663a69afdc66040518163ffffffff1660e01b8152600401610510906109c1565b606060405180830381865afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055191906109f6565b8095508196508297505050508484849750975097505050505050909192565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105a082610575565b9050919050565b6105b081610595565b81146105bb57600080fd5b50565b6000813590506105cd816105a7565b92915050565b6000602082840312156105e9576105e8610570565b5b60006105f7848285016105be565b91505092915050565b6000819050919050565b61061381610600565b82525050565b600060208201905061062e600083018461060a565b92915050565b61063d81610600565b811461064857600080fd5b50565b60008135905061065a81610634565b92915050565b60006020828403121561067657610675610570565b5b60006106848482850161064b565b91505092915050565b61069681610595565b82525050565b60006020820190506106b1600083018461068d565b92915050565b60006060820190506106cc600083018661060a565b6106d9602083018561060a565b6106e6604083018461060a565b949350505050565b600082825260208201905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006107356014836106ee565b9150610740826106ff565b602082019050919050565b6000602082019050818103600083015261076481610728565b9050919050565b6000604082019050610780600083018561068d565b61078d602083018461060a565b9392505050565b60008115159050919050565b6107a981610794565b81146107b457600080fd5b50565b6000815190506107c6816107a0565b92915050565b6000602082840312156107e2576107e1610570565b5b60006107f0848285016107b7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061083382610600565b915061083e83610600565b9250828203905081811115610856576108556107f9565b5b92915050565b6000606082019050610871600083018661068d565b61087e602083018561068d565b61088b604083018461060a565b949350505050565b600061089e82610600565b91506108a983610600565b92508282019050808211156108c1576108c06107f9565b5b92915050565b7f4674736f52656769737472790000000000000000000000000000000000000000600082015250565b60006108fd600c836106ee565b9150610908826108c7565b602082019050919050565b6000602082019050818103600083015261092c816108f0565b9050919050565b600081519050610942816105a7565b92915050565b60006020828403121561095e5761095d610570565b5b600061096c84828501610933565b91505092915050565b7f7465737442544300000000000000000000000000000000000000000000000000600082015250565b60006109ab6007836106ee565b91506109b682610975565b602082019050919050565b600060208201905081810360008301526109da8161099e565b9050919050565b6000815190506109f081610634565b92915050565b600080600060608486031215610a0f57610a0e610570565b5b6000610a1d868287016109e1565b9350506020610a2e868287016109e1565b9250506040610a3f868287016109e1565b915050925092509256fea2646970667358221220888ff0eaa63c195f20779878a15a9701af06881d39b0c12575a96e965beedd3064736f6c63430008180033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x35403023 EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x670AB5E9 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xAC75409A EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xE54F0880 EQ PUSH2 0x11D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x81 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x5D3 JUMP JUMPDEST PUSH2 0x13D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E SWAP2 SWAP1 PUSH2 0x619 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x660 JUMP JUMPDEST PUSH2 0x155 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0x660 JUMP JUMPDEST PUSH2 0x2CF JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD7 PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x107 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x102 SWAP2 SWAP1 PUSH2 0x5D3 JUMP JUMPDEST PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x114 SWAP2 SWAP1 PUSH2 0x619 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x125 PUSH2 0x43B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x6B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CE SWAP1 PUSH2 0x74B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x232 SWAP3 SWAP2 SWAP1 PUSH2 0x76B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x251 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x275 SWAP2 SWAP1 PUSH2 0x7CC JUMP JUMPDEST POP DUP1 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x828 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x85C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x34B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x7CC JUMP JUMPDEST POP DUP1 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x893 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0xAD67FE66660FB8DFE9D6B1B4240D8650E30F6019 SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x82760FCA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x496 SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4D7 SWAP2 SWAP1 PUSH2 0x948 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA69AFDC6 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x510 SWAP1 PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x9F6 JUMP JUMPDEST DUP1 SWAP6 POP DUP2 SWAP7 POP DUP3 SWAP8 POP POP POP POP DUP5 DUP5 DUP5 SWAP8 POP SWAP8 POP SWAP8 POP POP POP POP POP POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A0 DUP3 PUSH2 0x575 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5B0 DUP2 PUSH2 0x595 JUMP JUMPDEST DUP2 EQ PUSH2 0x5BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x5CD DUP2 PUSH2 0x5A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5E9 JUMPI PUSH2 0x5E8 PUSH2 0x570 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x5F7 DUP5 DUP3 DUP6 ADD PUSH2 0x5BE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x613 DUP2 PUSH2 0x600 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x62E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x60A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x63D DUP2 PUSH2 0x600 JUMP JUMPDEST DUP2 EQ PUSH2 0x648 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x65A DUP2 PUSH2 0x634 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x676 JUMPI PUSH2 0x675 PUSH2 0x570 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x684 DUP5 DUP3 DUP6 ADD PUSH2 0x64B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x696 DUP2 PUSH2 0x595 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x6B1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x68D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x6CC PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x60A JUMP JUMPDEST PUSH2 0x6D9 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x60A JUMP JUMPDEST PUSH2 0x6E6 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x60A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E742062616C616E6365000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x735 PUSH1 0x14 DUP4 PUSH2 0x6EE JUMP JUMPDEST SWAP2 POP PUSH2 0x740 DUP3 PUSH2 0x6FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x764 DUP2 PUSH2 0x728 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x780 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x68D JUMP JUMPDEST PUSH2 0x78D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x60A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7A9 DUP2 PUSH2 0x794 JUMP JUMPDEST DUP2 EQ PUSH2 0x7B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7C6 DUP2 PUSH2 0x7A0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7E2 JUMPI PUSH2 0x7E1 PUSH2 0x570 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x7F0 DUP5 DUP3 DUP6 ADD PUSH2 0x7B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x833 DUP3 PUSH2 0x600 JUMP JUMPDEST SWAP2 POP PUSH2 0x83E DUP4 PUSH2 0x600 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x856 JUMPI PUSH2 0x855 PUSH2 0x7F9 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x871 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x68D JUMP JUMPDEST PUSH2 0x87E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x68D JUMP JUMPDEST PUSH2 0x88B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x60A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89E DUP3 PUSH2 0x600 JUMP JUMPDEST SWAP2 POP PUSH2 0x8A9 DUP4 PUSH2 0x600 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x8C1 JUMPI PUSH2 0x8C0 PUSH2 0x7F9 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4674736F52656769737472790000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FD PUSH1 0xC DUP4 PUSH2 0x6EE JUMP JUMPDEST SWAP2 POP PUSH2 0x908 DUP3 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x92C DUP2 PUSH2 0x8F0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x942 DUP2 PUSH2 0x5A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x95E JUMPI PUSH2 0x95D PUSH2 0x570 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x96C DUP5 DUP3 DUP6 ADD PUSH2 0x933 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x7465737442544300000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9AB PUSH1 0x7 DUP4 PUSH2 0x6EE JUMP JUMPDEST SWAP2 POP PUSH2 0x9B6 DUP3 PUSH2 0x975 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x9DA DUP2 PUSH2 0x99E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x9F0 DUP2 PUSH2 0x634 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA0F JUMPI PUSH2 0xA0E PUSH2 0x570 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA1D DUP7 DUP3 DUP8 ADD PUSH2 0x9E1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xA2E DUP7 DUP3 DUP8 ADD PUSH2 0x9E1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xA3F DUP7 DUP3 DUP8 ADD PUSH2 0x9E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 DUP16 CREATE 0xEA 0xA6 EXTCODECOPY NOT PUSH0 KECCAK256 PUSH24 0x9878A15A9701AF06881D39B0C12575A96E965BEEDD306473 PUSH16 0x6C634300081800330000000000000000 ",
		"sourceMap": "323:1640:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;477:43;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1004:223;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;709:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1865:96;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;887:111;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1233:626;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;477:43;;;;;;;;;;;;;;;;;:::o;1004:223::-;1089:6;1065:8;:20;1074:10;1065:20;;;;;;;;;;;;;;;;:30;;1057:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1145:4;;;;;;;;;;1130:30;;;1161:10;1173:6;1130:50;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1214:6;1190:8;:20;1199:10;1190:20;;;;;;;;;;;;;;;;:30;;;;;;;:::i;:::-;;;;;;;;1004:223;:::o;709:167::-;775:4;;;;;;;;;;760:34;;;795:10;815:4;822:6;760:69;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;863:6;839:8;:20;848:10;839:20;;;;;;;;;;;;;;;;:30;;;;;;;:::i;:::-;;;;;;;;709:167;:::o;1865:96::-;1915:7;1949:4;;;;;;;;;;;1934:20;;1865:96;:::o;887:111::-;951:7;977:8;:14;986:4;977:14;;;;;;;;;;;;;;;;970:21;;887:111;;;:::o;1233:626::-;1281:7;1290;1299;1317:14;1341:18;1369:17;1397:39;585:42;1397:102;;1551:26;1607:16;:41;;;:57;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1551:114;;1753:12;:40;;;:51;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1707:97;;;;;;;;;;;;1822:6;1830:10;1842:9;1814:38;;;;;;;;;;;1233:626;;;:::o;88:117:18:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:77::-;1213:7;1242:5;1231:16;;1176:77;;;:::o;1259:118::-;1346:24;1364:5;1346:24;:::i;:::-;1341:3;1334:37;1259:118;;:::o;1383:222::-;1476:4;1514:2;1503:9;1499:18;1491:26;;1527:71;1595:1;1584:9;1580:17;1571:6;1527:71;:::i;:::-;1383:222;;;;:::o;1611:122::-;1684:24;1702:5;1684:24;:::i;:::-;1677:5;1674:35;1664:63;;1723:1;1720;1713:12;1664:63;1611:122;:::o;1739:139::-;1785:5;1823:6;1810:20;1801:29;;1839:33;1866:5;1839:33;:::i;:::-;1739:139;;;;:::o;1884:329::-;1943:6;1992:2;1980:9;1971:7;1967:23;1963:32;1960:119;;;1998:79;;:::i;:::-;1960:119;2118:1;2143:53;2188:7;2179:6;2168:9;2164:22;2143:53;:::i;:::-;2133:63;;2089:117;1884:329;;;;:::o;2219:118::-;2306:24;2324:5;2306:24;:::i;:::-;2301:3;2294:37;2219:118;;:::o;2343:222::-;2436:4;2474:2;2463:9;2459:18;2451:26;;2487:71;2555:1;2544:9;2540:17;2531:6;2487:71;:::i;:::-;2343:222;;;;:::o;2571:442::-;2720:4;2758:2;2747:9;2743:18;2735:26;;2771:71;2839:1;2828:9;2824:17;2815:6;2771:71;:::i;:::-;2852:72;2920:2;2909:9;2905:18;2896:6;2852:72;:::i;:::-;2934;3002:2;2991:9;2987:18;2978:6;2934:72;:::i;:::-;2571:442;;;;;;:::o;3019:169::-;3103:11;3137:6;3132:3;3125:19;3177:4;3172:3;3168:14;3153:29;;3019:169;;;;:::o;3194:170::-;3334:22;3330:1;3322:6;3318:14;3311:46;3194:170;:::o;3370:366::-;3512:3;3533:67;3597:2;3592:3;3533:67;:::i;:::-;3526:74;;3609:93;3698:3;3609:93;:::i;:::-;3727:2;3722:3;3718:12;3711:19;;3370:366;;;:::o;3742:419::-;3908:4;3946:2;3935:9;3931:18;3923:26;;3995:9;3989:4;3985:20;3981:1;3970:9;3966:17;3959:47;4023:131;4149:4;4023:131;:::i;:::-;4015:139;;3742:419;;;:::o;4167:332::-;4288:4;4326:2;4315:9;4311:18;4303:26;;4339:71;4407:1;4396:9;4392:17;4383:6;4339:71;:::i;:::-;4420:72;4488:2;4477:9;4473:18;4464:6;4420:72;:::i;:::-;4167:332;;;;;:::o;4505:90::-;4539:7;4582:5;4575:13;4568:21;4557:32;;4505:90;;;:::o;4601:116::-;4671:21;4686:5;4671:21;:::i;:::-;4664:5;4661:32;4651:60;;4707:1;4704;4697:12;4651:60;4601:116;:::o;4723:137::-;4777:5;4808:6;4802:13;4793:22;;4824:30;4848:5;4824:30;:::i;:::-;4723:137;;;;:::o;4866:345::-;4933:6;4982:2;4970:9;4961:7;4957:23;4953:32;4950:119;;;4988:79;;:::i;:::-;4950:119;5108:1;5133:61;5186:7;5177:6;5166:9;5162:22;5133:61;:::i;:::-;5123:71;;5079:125;4866:345;;;;:::o;5217:180::-;5265:77;5262:1;5255:88;5362:4;5359:1;5352:15;5386:4;5383:1;5376:15;5403:194;5443:4;5463:20;5481:1;5463:20;:::i;:::-;5458:25;;5497:20;5515:1;5497:20;:::i;:::-;5492:25;;5541:1;5538;5534:9;5526:17;;5565:1;5559:4;5556:11;5553:37;;;5570:18;;:::i;:::-;5553:37;5403:194;;;;:::o;5603:442::-;5752:4;5790:2;5779:9;5775:18;5767:26;;5803:71;5871:1;5860:9;5856:17;5847:6;5803:71;:::i;:::-;5884:72;5952:2;5941:9;5937:18;5928:6;5884:72;:::i;:::-;5966;6034:2;6023:9;6019:18;6010:6;5966:72;:::i;:::-;5603:442;;;;;;:::o;6051:191::-;6091:3;6110:20;6128:1;6110:20;:::i;:::-;6105:25;;6144:20;6162:1;6144:20;:::i;:::-;6139:25;;6187:1;6184;6180:9;6173:16;;6208:3;6205:1;6202:10;6199:36;;;6215:18;;:::i;:::-;6199:36;6051:191;;;;:::o;6248:162::-;6388:14;6384:1;6376:6;6372:14;6365:38;6248:162;:::o;6416:366::-;6558:3;6579:67;6643:2;6638:3;6579:67;:::i;:::-;6572:74;;6655:93;6744:3;6655:93;:::i;:::-;6773:2;6768:3;6764:12;6757:19;;6416:366;;;:::o;6788:419::-;6954:4;6992:2;6981:9;6977:18;6969:26;;7041:9;7035:4;7031:20;7027:1;7016:9;7012:17;7005:47;7069:131;7195:4;7069:131;:::i;:::-;7061:139;;6788:419;;;:::o;7213:143::-;7270:5;7301:6;7295:13;7286:22;;7317:33;7344:5;7317:33;:::i;:::-;7213:143;;;;:::o;7362:351::-;7432:6;7481:2;7469:9;7460:7;7456:23;7452:32;7449:119;;;7487:79;;:::i;:::-;7449:119;7607:1;7632:64;7688:7;7679:6;7668:9;7664:22;7632:64;:::i;:::-;7622:74;;7578:128;7362:351;;;;:::o;7719:157::-;7859:9;7855:1;7847:6;7843:14;7836:33;7719:157;:::o;7882:365::-;8024:3;8045:66;8109:1;8104:3;8045:66;:::i;:::-;8038:73;;8120:93;8209:3;8120:93;:::i;:::-;8238:2;8233:3;8229:12;8222:19;;7882:365;;;:::o;8253:419::-;8419:4;8457:2;8446:9;8442:18;8434:26;;8506:9;8500:4;8496:20;8492:1;8481:9;8477:17;8470:47;8534:131;8660:4;8534:131;:::i;:::-;8526:139;;8253:419;;;:::o;8678:143::-;8735:5;8766:6;8760:13;8751:22;;8782:33;8809:5;8782:33;:::i;:::-;8678:143;;;;:::o;8827:663::-;8915:6;8923;8931;8980:2;8968:9;8959:7;8955:23;8951:32;8948:119;;;8986:79;;:::i;:::-;8948:119;9106:1;9131:64;9187:7;9178:6;9167:9;9163:22;9131:64;:::i;:::-;9121:74;;9077:128;9244:2;9270:64;9326:7;9317:6;9306:9;9302:22;9270:64;:::i;:::-;9260:74;;9215:129;9383:2;9409:64;9465:7;9456:6;9445:9;9441:22;9409:64;:::i;:::-;9399:74;;9354:129;8827:663;;;;;:::o"
	},
	"Assembly": ".code\n  PUSH 80\t\t\tcontract WBTCReserve {\\n\\n    ...\n  PUSH 40\t\t\tcontract WBTCReserve {\\n\\n    ...\n  MSTORE \t\t\tcontract WBTCReserve {\\n\\n    ...\n  CALLVALUE \t\t\tconstructor(address _wBTC) {\\n...\n  DUP1 \t\t\tconstructor(address _wBTC) {\\n...\n  ISZERO \t\t\tconstructor(address _wBTC) {\\n...\n  PUSH [tag] 1\t\t\tconstructor(address _wBTC) {\\n...\n  JUMPI \t\t\tconstructor(address _wBTC) {\\n...\n  PUSH 0\t\t\tconstructor(address _wBTC) {\\n...\n  DUP1 \t\t\tconstructor(address _wBTC) {\\n...\n  REVERT \t\t\tconstructor(address _wBTC) {\\n...\ntag 1\t\t\tconstructor(address _wBTC) {\\n...\n  JUMPDEST \t\t\tconstructor(address _wBTC) {\\n...\n  POP \t\t\tconstructor(address _wBTC) {\\n...\n  PUSH 40\t\t\tconstructor(address _wBTC) {\\n...\n  MLOAD \t\t\tconstructor(address _wBTC) {\\n...\n  PUSHSIZE \t\t\tconstructor(address _wBTC) {\\n...\n  CODESIZE \t\t\tconstructor(address _wBTC) {\\n...\n  SUB \t\t\tconstructor(address _wBTC) {\\n...\n  DUP1 \t\t\tconstructor(address _wBTC) {\\n...\n  PUSHSIZE \t\t\tconstructor(address _wBTC) {\\n...\n  DUP4 \t\t\tconstructor(address _wBTC) {\\n...\n  CODECOPY \t\t\tconstructor(address _wBTC) {\\n...\n  DUP2 \t\t\tconstructor(address _wBTC) {\\n...\n  DUP2 \t\t\tconstructor(address _wBTC) {\\n...\n  ADD \t\t\tconstructor(address _wBTC) {\\n...\n  PUSH 40\t\t\tconstructor(address _wBTC) {\\n...\n  MSTORE \t\t\tconstructor(address _wBTC) {\\n...\n  DUP2 \t\t\tconstructor(address _wBTC) {\\n...\n  ADD \t\t\tconstructor(address _wBTC) {\\n...\n  SWAP1 \t\t\tconstructor(address _wBTC) {\\n...\n  PUSH [tag] 2\t\t\tconstructor(address _wBTC) {\\n...\n  SWAP2 \t\t\tconstructor(address _wBTC) {\\n...\n  SWAP1 \t\t\tconstructor(address _wBTC) {\\n...\n  PUSH [tag] 3\t\t\tconstructor(address _wBTC) {\\n...\n  JUMP \t\t\tconstructor(address _wBTC) {\\n...\ntag 2\t\t\tconstructor(address _wBTC) {\\n...\n  JUMPDEST \t\t\tconstructor(address _wBTC) {\\n...\n  DUP1 \t\t\t_wBTC\n  PUSH 0\t\t\twbtc\n  DUP1 \t\t\twbtc\n  PUSH 100\t\t\twbtc = IERC20(_wBTC)\n  EXP \t\t\twbtc = IERC20(_wBTC)\n  DUP2 \t\t\twbtc = IERC20(_wBTC)\n  SLOAD \t\t\twbtc = IERC20(_wBTC)\n  DUP2 \t\t\twbtc = IERC20(_wBTC)\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twbtc = IERC20(_wBTC)\n  MUL \t\t\twbtc = IERC20(_wBTC)\n  NOT \t\t\twbtc = IERC20(_wBTC)\n  AND \t\t\twbtc = IERC20(_wBTC)\n  SWAP1 \t\t\twbtc = IERC20(_wBTC)\n  DUP4 \t\t\twbtc = IERC20(_wBTC)\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twbtc = IERC20(_wBTC)\n  AND \t\t\twbtc = IERC20(_wBTC)\n  MUL \t\t\twbtc = IERC20(_wBTC)\n  OR \t\t\twbtc = IERC20(_wBTC)\n  SWAP1 \t\t\twbtc = IERC20(_wBTC)\n  SSTORE \t\t\twbtc = IERC20(_wBTC)\n  POP \t\t\twbtc = IERC20(_wBTC)\n  POP \t\t\tconstructor(address _wBTC) {\\n...\n  PUSH [tag] 6\t\t\tcontract WBTCReserve {\\n\\n    ...\n  JUMP \t\t\tcontract WBTCReserve {\\n\\n    ...\ntag 8\t\t\t/token/ERC20/IERC20.sol\";\\nimp...\n  JUMPDEST \t\t\t/token/ERC20/IERC20.sol\";\\nimp...\n  PUSH 0\t\t\t/\n  DUP1 \t\t\tc\n  REVERT \t\t\tInterfaces/I\ntag 10\t\t\tTCReserve {\\n\\n    struct pric...\n  JUMPDEST \t\t\tTCReserve {\\n\\n    struct pric...\n  PUSH 0\t\t\t\\n      \n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttimestamp;\\n        uint256 de...\n  DUP3 \t\t\tint25\n  AND \t\t\t   uint256 timestamp;\\n       ...\n  SWAP1 \t\t\trice;\\n        uint256 timesta...\n  POP \t\t\trice;\\n        uint256 timesta...\n  SWAP2 \t\t\tTCReserve {\\n\\n    struct pric...\n  SWAP1 \t\t\tTCReserve {\\n\\n    struct pric...\n  POP \t\t\tTCReserve {\\n\\n    struct pric...\n  JUMP \t\t\tTCReserve {\\n\\n    struct pric...\ntag 11\t\t\t wbtc;\\n    mapping(address =>...\n  JUMPDEST \t\t\t wbtc;\\n    mapping(address =>...\n  PUSH 0\t\t\t) publi\n  PUSH [tag] 20\t\t\ts private constant FLARE\n  DUP3 \t\t\t FLAR\n  PUSH [tag] 10\t\t\ts private constant FLARE\n  JUMP \t\t\ts private constant FLARE\ntag 20\t\t\ts private constant FLARE\n  JUMPDEST \t\t\ts private constant FLARE\n  SWAP1 \t\t\t\\n    address private constant...\n  POP \t\t\t\\n    address private constant...\n  SWAP2 \t\t\t wbtc;\\n    mapping(address =>...\n  SWAP1 \t\t\t wbtc;\\n    mapping(address =>...\n  POP \t\t\t wbtc;\\n    mapping(address =>...\n  JUMP \t\t\t wbtc;\\n    mapping(address =>...\ntag 12\t\t\tGISTRY =\\n        0xaD67FE6666...\n  JUMPDEST \t\t\tGISTRY =\\n        0xaD67FE6666...\n  PUSH [tag] 22\t\t\tnstructor(address _wBTC)\n  DUP2 \t\t\t_wBTC\n  PUSH [tag] 11\t\t\tnstructor(address _wBTC)\n  JUMP \t\t\tnstructor(address _wBTC)\ntag 22\t\t\tnstructor(address _wBTC)\n  JUMPDEST \t\t\tnstructor(address _wBTC)\n  DUP2 \t\t\t\\n    \n  EQ \t\t\t   \\n    constructor(address _...\n  PUSH [tag] 23\t\t\t0F6019;\\n\\n    \\n    construct...\n  JUMPI \t\t\t0F6019;\\n\\n    \\n    construct...\n  PUSH 0\t\t\t \n  DUP1 \t\t\tb\n  REVERT \t\t\t      wbtc =\ntag 23\t\t\t0F6019;\\n\\n    \\n    construct...\n  JUMPDEST \t\t\t0F6019;\\n\\n    \\n    construct...\n  POP \t\t\tGISTRY =\\n        0xaD67FE6666...\n  JUMP \t\t\tGISTRY =\\n        0xaD67FE6666...\ntag 13\t\t\t;\\n    }\\n\\n    function suppl...\n  JUMPDEST \t\t\t;\\n    }\\n\\n    function suppl...\n  PUSH 0\t\t\t     \n  DUP2 \t\t\tansfer\n  MLOAD \t\t\tc)).transferF\n  SWAP1 \t\t\tdress(wbtc)).transferF\n  POP \t\t\tdress(wbtc)).transferF\n  PUSH [tag] 25\t\t\tender, address(this), amount);...\n  DUP2 \t\t\tt);\\n \n  PUSH [tag] 12\t\t\tender, address(this), amount);...\n  JUMP \t\t\tender, address(this), amount);...\ntag 25\t\t\tender, address(this), amount);...\n  JUMPDEST \t\t\tender, address(this), amount);...\n  SWAP3 \t\t\t;\\n    }\\n\\n    function suppl...\n  SWAP2 \t\t\t;\\n    }\\n\\n    function suppl...\n  POP \t\t\t;\\n    }\\n\\n    function suppl...\n  POP \t\t\t;\\n    }\\n\\n    function suppl...\n  JUMP \t\t\t;\\n    }\\n\\n    function suppl...\ntag 3\t\t\tes[msg.sender] += amount;\\n   ...\n  JUMPDEST \t\t\tes[msg.sender] += amount;\\n   ...\n  PUSH 0\t\t\tddress\n  PUSH 20\t\t\t  \n  DUP3 \t\t\tint256) {\n  DUP5 \t\t\teturns \n  SUB \t\t\tew returns (uint256) {\\n\n  SLT \t\t\tl view returns (uint256) {\\n  ...\n  ISZERO \t\t\trnal view returns (uint256) {\\...\n  PUSH [tag] 27\t\t\trnal view returns (uint256) {\\...\n  JUMPI \t\t\trnal view returns (uint256) {\\...\n  PUSH [tag] 28\t\t\treturn balances[user];\\n    }\\...\n  PUSH [tag] 8\t\t\treturn balances[user];\\n    }\\...\n  JUMP \t\t\treturn balances[user];\\n    }\\...\ntag 28\t\t\treturn balances[user];\\n    }\\...\n  JUMPDEST \t\t\treturn balances[user];\\n    }\\...\ntag 27\t\t\trnal view returns (uint256) {\\...\n  JUMPDEST \t\t\trnal view returns (uint256) {\\...\n  PUSH 0\t\t\tm\n  PUSH [tag] 29\t\t\tnce\");\\n        IERC20(address...\n  DUP5 \t\t\t, amoun\n  DUP3 \t\t\tsg.sen\n  DUP6 \t\t\t.transfer\n  ADD \t\t\ttc)).transfer(msg.send\n  PUSH [tag] 13\t\t\tnce\");\\n        IERC20(address...\n  JUMP \t\t\tnce\");\\n        IERC20(address...\ntag 29\t\t\tnce\");\\n        IERC20(address...\n  JUMPDEST \t\t\tnce\");\\n        IERC20(address...\n  SWAP2 \t\t\tcient balance\");\\n        IERC...\n  POP \t\t\tcient balance\");\\n        IERC...\n  POP \t\t\tire(balances[msg.sender] >= am...\n  SWAP3 \t\t\tes[msg.sender] += amount;\\n   ...\n  SWAP2 \t\t\tes[msg.sender] += amount;\\n   ...\n  POP \t\t\tes[msg.sender] += amount;\\n   ...\n  POP \t\t\tes[msg.sender] += amount;\\n   ...\n  JUMP \t\t\tes[msg.sender] += amount;\\n   ...\ntag 6\t\t\tcontract WBTCReserve {\\n\\n    ...\n  JUMPDEST \t\t\tcontract WBTCReserve {\\n\\n    ...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract WBTCReserve {\\n\\n    ...\n  DUP1 \t\t\tcontract WBTCReserve {\\n\\n    ...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract WBTCReserve {\\n\\n    ...\n  PUSH 0\t\t\tcontract WBTCReserve {\\n\\n    ...\n  CODECOPY \t\t\tcontract WBTCReserve {\\n\\n    ...\n  PUSH 0\t\t\tcontract WBTCReserve {\\n\\n    ...\n  RETURN \t\t\tcontract WBTCReserve {\\n\\n    ...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH 40\t\t\tcontract WBTCReserve {\\n\\n    ...\n      MSTORE \t\t\tcontract WBTCReserve {\\n\\n    ...\n      CALLVALUE \t\t\tcontract WBTCReserve {\\n\\n    ...\n      DUP1 \t\t\tcontract WBTCReserve {\\n\\n    ...\n      ISZERO \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH [tag] 1\t\t\tcontract WBTCReserve {\\n\\n    ...\n      JUMPI \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH 0\t\t\tcontract WBTCReserve {\\n\\n    ...\n      DUP1 \t\t\tcontract WBTCReserve {\\n\\n    ...\n      REVERT \t\t\tcontract WBTCReserve {\\n\\n    ...\n    tag 1\t\t\tcontract WBTCReserve {\\n\\n    ...\n      JUMPDEST \t\t\tcontract WBTCReserve {\\n\\n    ...\n      POP \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH 4\t\t\tcontract WBTCReserve {\\n\\n    ...\n      CALLDATASIZE \t\t\tcontract WBTCReserve {\\n\\n    ...\n      LT \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH [tag] 2\t\t\tcontract WBTCReserve {\\n\\n    ...\n      JUMPI \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH 0\t\t\tcontract WBTCReserve {\\n\\n    ...\n      CALLDATALOAD \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH E0\t\t\tcontract WBTCReserve {\\n\\n    ...\n      SHR \t\t\tcontract WBTCReserve {\\n\\n    ...\n      DUP1 \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH 27E235E3\t\t\tcontract WBTCReserve {\\n\\n    ...\n      EQ \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH [tag] 3\t\t\tcontract WBTCReserve {\\n\\n    ...\n      JUMPI \t\t\tcontract WBTCReserve {\\n\\n    ...\n      DUP1 \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH 2E1A7D4D\t\t\tcontract WBTCReserve {\\n\\n    ...\n      EQ \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH [tag] 4\t\t\tcontract WBTCReserve {\\n\\n    ...\n      JUMPI \t\t\tcontract WBTCReserve {\\n\\n    ...\n      DUP1 \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH 35403023\t\t\tcontract WBTCReserve {\\n\\n    ...\n      EQ \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH [tag] 5\t\t\tcontract WBTCReserve {\\n\\n    ...\n      JUMPI \t\t\tcontract WBTCReserve {\\n\\n    ...\n      DUP1 \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH 670AB5E9\t\t\tcontract WBTCReserve {\\n\\n    ...\n      EQ \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH [tag] 6\t\t\tcontract WBTCReserve {\\n\\n    ...\n      JUMPI \t\t\tcontract WBTCReserve {\\n\\n    ...\n      DUP1 \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH AC75409A\t\t\tcontract WBTCReserve {\\n\\n    ...\n      EQ \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH [tag] 7\t\t\tcontract WBTCReserve {\\n\\n    ...\n      JUMPI \t\t\tcontract WBTCReserve {\\n\\n    ...\n      DUP1 \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH E54F0880\t\t\tcontract WBTCReserve {\\n\\n    ...\n      EQ \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH [tag] 8\t\t\tcontract WBTCReserve {\\n\\n    ...\n      JUMPI \t\t\tcontract WBTCReserve {\\n\\n    ...\n    tag 2\t\t\tcontract WBTCReserve {\\n\\n    ...\n      JUMPDEST \t\t\tcontract WBTCReserve {\\n\\n    ...\n      PUSH 0\t\t\tcontract WBTCReserve {\\n\\n    ...\n      DUP1 \t\t\tcontract WBTCReserve {\\n\\n    ...\n      REVERT \t\t\tcontract WBTCReserve {\\n\\n    ...\n    tag 3\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 9\t\t\tmapping(address => uint256) pu...\n      PUSH 4\t\t\tmapping(address => uint256) pu...\n      DUP1 \t\t\tmapping(address => uint256) pu...\n      CALLDATASIZE \t\t\tmapping(address => uint256) pu...\n      SUB \t\t\tmapping(address => uint256) pu...\n      DUP2 \t\t\tmapping(address => uint256) pu...\n      ADD \t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 10\t\t\tmapping(address => uint256) pu...\n      SWAP2 \t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 11\t\t\tmapping(address => uint256) pu...\n      JUMP \t\t\tmapping(address => uint256) pu...\n    tag 10\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 12\t\t\tmapping(address => uint256) pu...\n      JUMP \t\t\tmapping(address => uint256) pu...\n    tag 9\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH 40\t\t\tmapping(address => uint256) pu...\n      MLOAD \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 13\t\t\tmapping(address => uint256) pu...\n      SWAP2 \t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 14\t\t\tmapping(address => uint256) pu...\n      JUMP \t\t\tmapping(address => uint256) pu...\n    tag 13\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH 40\t\t\tmapping(address => uint256) pu...\n      MLOAD \t\t\tmapping(address => uint256) pu...\n      DUP1 \t\t\tmapping(address => uint256) pu...\n      SWAP2 \t\t\tmapping(address => uint256) pu...\n      SUB \t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      RETURN \t\t\tmapping(address => uint256) pu...\n    tag 4\t\t\tfunction withdraw(uint256 amou...\n      JUMPDEST \t\t\tfunction withdraw(uint256 amou...\n      PUSH [tag] 15\t\t\tfunction withdraw(uint256 amou...\n      PUSH 4\t\t\tfunction withdraw(uint256 amou...\n      DUP1 \t\t\tfunction withdraw(uint256 amou...\n      CALLDATASIZE \t\t\tfunction withdraw(uint256 amou...\n      SUB \t\t\tfunction withdraw(uint256 amou...\n      DUP2 \t\t\tfunction withdraw(uint256 amou...\n      ADD \t\t\tfunction withdraw(uint256 amou...\n      SWAP1 \t\t\tfunction withdraw(uint256 amou...\n      PUSH [tag] 16\t\t\tfunction withdraw(uint256 amou...\n      SWAP2 \t\t\tfunction withdraw(uint256 amou...\n      SWAP1 \t\t\tfunction withdraw(uint256 amou...\n      PUSH [tag] 17\t\t\tfunction withdraw(uint256 amou...\n      JUMP \t\t\tfunction withdraw(uint256 amou...\n    tag 16\t\t\tfunction withdraw(uint256 amou...\n      JUMPDEST \t\t\tfunction withdraw(uint256 amou...\n      PUSH [tag] 18\t\t\tfunction withdraw(uint256 amou...\n      JUMP \t\t\tfunction withdraw(uint256 amou...\n    tag 15\t\t\tfunction withdraw(uint256 amou...\n      JUMPDEST \t\t\tfunction withdraw(uint256 amou...\n      STOP \t\t\tfunction withdraw(uint256 amou...\n    tag 5\t\t\tfunction supply(uint256 amount...\n      JUMPDEST \t\t\tfunction supply(uint256 amount...\n      PUSH [tag] 19\t\t\tfunction supply(uint256 amount...\n      PUSH 4\t\t\tfunction supply(uint256 amount...\n      DUP1 \t\t\tfunction supply(uint256 amount...\n      CALLDATASIZE \t\t\tfunction supply(uint256 amount...\n      SUB \t\t\tfunction supply(uint256 amount...\n      DUP2 \t\t\tfunction supply(uint256 amount...\n      ADD \t\t\tfunction supply(uint256 amount...\n      SWAP1 \t\t\tfunction supply(uint256 amount...\n      PUSH [tag] 20\t\t\tfunction supply(uint256 amount...\n      SWAP2 \t\t\tfunction supply(uint256 amount...\n      SWAP1 \t\t\tfunction supply(uint256 amount...\n      PUSH [tag] 17\t\t\tfunction supply(uint256 amount...\n      JUMP \t\t\tfunction supply(uint256 amount...\n    tag 20\t\t\tfunction supply(uint256 amount...\n      JUMPDEST \t\t\tfunction supply(uint256 amount...\n      PUSH [tag] 21\t\t\tfunction supply(uint256 amount...\n      JUMP \t\t\tfunction supply(uint256 amount...\n    tag 19\t\t\tfunction supply(uint256 amount...\n      JUMPDEST \t\t\tfunction supply(uint256 amount...\n      STOP \t\t\tfunction supply(uint256 amount...\n    tag 6\t\t\tfunction getAssetAddress() ext...\n      JUMPDEST \t\t\tfunction getAssetAddress() ext...\n      PUSH [tag] 22\t\t\tfunction getAssetAddress() ext...\n      PUSH [tag] 23\t\t\tfunction getAssetAddress() ext...\n      JUMP \t\t\tfunction getAssetAddress() ext...\n    tag 22\t\t\tfunction getAssetAddress() ext...\n      JUMPDEST \t\t\tfunction getAssetAddress() ext...\n      PUSH 40\t\t\tfunction getAssetAddress() ext...\n      MLOAD \t\t\tfunction getAssetAddress() ext...\n      PUSH [tag] 24\t\t\tfunction getAssetAddress() ext...\n      SWAP2 \t\t\tfunction getAssetAddress() ext...\n      SWAP1 \t\t\tfunction getAssetAddress() ext...\n      PUSH [tag] 25\t\t\tfunction getAssetAddress() ext...\n      JUMP \t\t\tfunction getAssetAddress() ext...\n    tag 24\t\t\tfunction getAssetAddress() ext...\n      JUMPDEST \t\t\tfunction getAssetAddress() ext...\n      PUSH 40\t\t\tfunction getAssetAddress() ext...\n      MLOAD \t\t\tfunction getAssetAddress() ext...\n      DUP1 \t\t\tfunction getAssetAddress() ext...\n      SWAP2 \t\t\tfunction getAssetAddress() ext...\n      SUB \t\t\tfunction getAssetAddress() ext...\n      SWAP1 \t\t\tfunction getAssetAddress() ext...\n      RETURN \t\t\tfunction getAssetAddress() ext...\n    tag 7\t\t\tfunction getSupplyedAmount(add...\n      JUMPDEST \t\t\tfunction getSupplyedAmount(add...\n      PUSH [tag] 26\t\t\tfunction getSupplyedAmount(add...\n      PUSH 4\t\t\tfunction getSupplyedAmount(add...\n      DUP1 \t\t\tfunction getSupplyedAmount(add...\n      CALLDATASIZE \t\t\tfunction getSupplyedAmount(add...\n      SUB \t\t\tfunction getSupplyedAmount(add...\n      DUP2 \t\t\tfunction getSupplyedAmount(add...\n      ADD \t\t\tfunction getSupplyedAmount(add...\n      SWAP1 \t\t\tfunction getSupplyedAmount(add...\n      PUSH [tag] 27\t\t\tfunction getSupplyedAmount(add...\n      SWAP2 \t\t\tfunction getSupplyedAmount(add...\n      SWAP1 \t\t\tfunction getSupplyedAmount(add...\n      PUSH [tag] 11\t\t\tfunction getSupplyedAmount(add...\n      JUMP \t\t\tfunction getSupplyedAmount(add...\n    tag 27\t\t\tfunction getSupplyedAmount(add...\n      JUMPDEST \t\t\tfunction getSupplyedAmount(add...\n      PUSH [tag] 28\t\t\tfunction getSupplyedAmount(add...\n      JUMP \t\t\tfunction getSupplyedAmount(add...\n    tag 26\t\t\tfunction getSupplyedAmount(add...\n      JUMPDEST \t\t\tfunction getSupplyedAmount(add...\n      PUSH 40\t\t\tfunction getSupplyedAmount(add...\n      MLOAD \t\t\tfunction getSupplyedAmount(add...\n      PUSH [tag] 29\t\t\tfunction getSupplyedAmount(add...\n      SWAP2 \t\t\tfunction getSupplyedAmount(add...\n      SWAP1 \t\t\tfunction getSupplyedAmount(add...\n      PUSH [tag] 14\t\t\tfunction getSupplyedAmount(add...\n      JUMP \t\t\tfunction getSupplyedAmount(add...\n    tag 29\t\t\tfunction getSupplyedAmount(add...\n      JUMPDEST \t\t\tfunction getSupplyedAmount(add...\n      PUSH 40\t\t\tfunction getSupplyedAmount(add...\n      MLOAD \t\t\tfunction getSupplyedAmount(add...\n      DUP1 \t\t\tfunction getSupplyedAmount(add...\n      SWAP2 \t\t\tfunction getSupplyedAmount(add...\n      SUB \t\t\tfunction getSupplyedAmount(add...\n      SWAP1 \t\t\tfunction getSupplyedAmount(add...\n      RETURN \t\t\tfunction getSupplyedAmount(add...\n    tag 8\t\t\tfunction getAssetPrice() exter...\n      JUMPDEST \t\t\tfunction getAssetPrice() exter...\n      PUSH [tag] 30\t\t\tfunction getAssetPrice() exter...\n      PUSH [tag] 31\t\t\tfunction getAssetPrice() exter...\n      JUMP \t\t\tfunction getAssetPrice() exter...\n    tag 30\t\t\tfunction getAssetPrice() exter...\n      JUMPDEST \t\t\tfunction getAssetPrice() exter...\n      PUSH 40\t\t\tfunction getAssetPrice() exter...\n      MLOAD \t\t\tfunction getAssetPrice() exter...\n      PUSH [tag] 32\t\t\tfunction getAssetPrice() exter...\n      SWAP4 \t\t\tfunction getAssetPrice() exter...\n      SWAP3 \t\t\tfunction getAssetPrice() exter...\n      SWAP2 \t\t\tfunction getAssetPrice() exter...\n      SWAP1 \t\t\tfunction getAssetPrice() exter...\n      PUSH [tag] 33\t\t\tfunction getAssetPrice() exter...\n      JUMP \t\t\tfunction getAssetPrice() exter...\n    tag 32\t\t\tfunction getAssetPrice() exter...\n      JUMPDEST \t\t\tfunction getAssetPrice() exter...\n      PUSH 40\t\t\tfunction getAssetPrice() exter...\n      MLOAD \t\t\tfunction getAssetPrice() exter...\n      DUP1 \t\t\tfunction getAssetPrice() exter...\n      SWAP2 \t\t\tfunction getAssetPrice() exter...\n      SUB \t\t\tfunction getAssetPrice() exter...\n      SWAP1 \t\t\tfunction getAssetPrice() exter...\n      RETURN \t\t\tfunction getAssetPrice() exter...\n    tag 12\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH 1\t\t\tmapping(address => uint256) pu...\n      PUSH 20\t\t\tmapping(address => uint256) pu...\n      MSTORE \t\t\tmapping(address => uint256) pu...\n      DUP1 \t\t\tmapping(address => uint256) pu...\n      PUSH 0\t\t\tmapping(address => uint256) pu...\n      MSTORE \t\t\tmapping(address => uint256) pu...\n      PUSH 40\t\t\tmapping(address => uint256) pu...\n      PUSH 0\t\t\tmapping(address => uint256) pu...\n      KECCAK256 \t\t\tmapping(address => uint256) pu...\n      PUSH 0\t\t\tmapping(address => uint256) pu...\n      SWAP2 \t\t\tmapping(address => uint256) pu...\n      POP \t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      POP \t\t\tmapping(address => uint256) pu...\n      SLOAD \t\t\tmapping(address => uint256) pu...\n      DUP2 \t\t\tmapping(address => uint256) pu...\n      JUMP \t\t\tmapping(address => uint256) pu...\n    tag 18\t\t\tfunction withdraw(uint256 amou...\n      JUMPDEST \t\t\tfunction withdraw(uint256 amou...\n      DUP1 \t\t\tamount\n      PUSH 1\t\t\tbalances\n      PUSH 0\t\t\tbalances[msg.sender]\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbalances[msg.sender]\n      AND \t\t\tbalances[msg.sender]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbalances[msg.sender]\n      AND \t\t\tbalances[msg.sender]\n      DUP2 \t\t\tbalances[msg.sender]\n      MSTORE \t\t\tbalances[msg.sender]\n      PUSH 20\t\t\tbalances[msg.sender]\n      ADD \t\t\tbalances[msg.sender]\n      SWAP1 \t\t\tbalances[msg.sender]\n      DUP2 \t\t\tbalances[msg.sender]\n      MSTORE \t\t\tbalances[msg.sender]\n      PUSH 20\t\t\tbalances[msg.sender]\n      ADD \t\t\tbalances[msg.sender]\n      PUSH 0\t\t\tbalances[msg.sender]\n      KECCAK256 \t\t\tbalances[msg.sender]\n      SLOAD \t\t\tbalances[msg.sender]\n      LT \t\t\tbalances[msg.sender] >= amount\n      ISZERO \t\t\tbalances[msg.sender] >= amount\n      PUSH [tag] 35\t\t\trequire(balances[msg.sender] >...\n      JUMPI \t\t\trequire(balances[msg.sender] >...\n      PUSH 40\t\t\trequire(balances[msg.sender] >...\n      MLOAD \t\t\trequire(balances[msg.sender] >...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(balances[msg.sender] >...\n      DUP2 \t\t\trequire(balances[msg.sender] >...\n      MSTORE \t\t\trequire(balances[msg.sender] >...\n      PUSH 4\t\t\trequire(balances[msg.sender] >...\n      ADD \t\t\trequire(balances[msg.sender] >...\n      PUSH [tag] 36\t\t\trequire(balances[msg.sender] >...\n      SWAP1 \t\t\trequire(balances[msg.sender] >...\n      PUSH [tag] 37\t\t\trequire(balances[msg.sender] >...\n      JUMP \t\t\trequire(balances[msg.sender] >...\n    tag 36\t\t\trequire(balances[msg.sender] >...\n      JUMPDEST \t\t\trequire(balances[msg.sender] >...\n      PUSH 40\t\t\trequire(balances[msg.sender] >...\n      MLOAD \t\t\trequire(balances[msg.sender] >...\n      DUP1 \t\t\trequire(balances[msg.sender] >...\n      SWAP2 \t\t\trequire(balances[msg.sender] >...\n      SUB \t\t\trequire(balances[msg.sender] >...\n      SWAP1 \t\t\trequire(balances[msg.sender] >...\n      REVERT \t\t\trequire(balances[msg.sender] >...\n    tag 35\t\t\trequire(balances[msg.sender] >...\n      JUMPDEST \t\t\trequire(balances[msg.sender] >...\n      PUSH 0\t\t\twbtc\n      DUP1 \t\t\twbtc\n      SLOAD \t\t\twbtc\n      SWAP1 \t\t\twbtc\n      PUSH 100\t\t\twbtc\n      EXP \t\t\twbtc\n      SWAP1 \t\t\twbtc\n      DIV \t\t\twbtc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twbtc\n      AND \t\t\twbtc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tIERC20(address(wbtc)).transfer\n      AND \t\t\tIERC20(address(wbtc)).transfer\n      PUSH A9059CBB\t\t\tIERC20(address(wbtc)).transfer\n      CALLER \t\t\tmsg.sender\n      DUP4 \t\t\tamount\n      PUSH 40\t\t\tIERC20(address(wbtc)).transfer...\n      MLOAD \t\t\tIERC20(address(wbtc)).transfer...\n      DUP4 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH FFFFFFFF\t\t\tIERC20(address(wbtc)).transfer...\n      AND \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH E0\t\t\tIERC20(address(wbtc)).transfer...\n      SHL \t\t\tIERC20(address(wbtc)).transfer...\n      DUP2 \t\t\tIERC20(address(wbtc)).transfer...\n      MSTORE \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 4\t\t\tIERC20(address(wbtc)).transfer...\n      ADD \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH [tag] 38\t\t\tIERC20(address(wbtc)).transfer...\n      SWAP3 \t\t\tIERC20(address(wbtc)).transfer...\n      SWAP2 \t\t\tIERC20(address(wbtc)).transfer...\n      SWAP1 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH [tag] 39\t\t\tIERC20(address(wbtc)).transfer...\n      JUMP \t\t\tIERC20(address(wbtc)).transfer...\n    tag 38\t\t\tIERC20(address(wbtc)).transfer...\n      JUMPDEST \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 20\t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 40\t\t\tIERC20(address(wbtc)).transfer...\n      MLOAD \t\t\tIERC20(address(wbtc)).transfer...\n      DUP1 \t\t\tIERC20(address(wbtc)).transfer...\n      DUP4 \t\t\tIERC20(address(wbtc)).transfer...\n      SUB \t\t\tIERC20(address(wbtc)).transfer...\n      DUP2 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 0\t\t\tIERC20(address(wbtc)).transfer...\n      DUP8 \t\t\tIERC20(address(wbtc)).transfer...\n      GAS \t\t\tIERC20(address(wbtc)).transfer...\n      CALL \t\t\tIERC20(address(wbtc)).transfer...\n      ISZERO \t\t\tIERC20(address(wbtc)).transfer...\n      DUP1 \t\t\tIERC20(address(wbtc)).transfer...\n      ISZERO \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH [tag] 41\t\t\tIERC20(address(wbtc)).transfer...\n      JUMPI \t\t\tIERC20(address(wbtc)).transfer...\n      RETURNDATASIZE \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 0\t\t\tIERC20(address(wbtc)).transfer...\n      DUP1 \t\t\tIERC20(address(wbtc)).transfer...\n      RETURNDATACOPY \t\t\tIERC20(address(wbtc)).transfer...\n      RETURNDATASIZE \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 0\t\t\tIERC20(address(wbtc)).transfer...\n      REVERT \t\t\tIERC20(address(wbtc)).transfer...\n    tag 41\t\t\tIERC20(address(wbtc)).transfer...\n      JUMPDEST \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 40\t\t\tIERC20(address(wbtc)).transfer...\n      MLOAD \t\t\tIERC20(address(wbtc)).transfer...\n      RETURNDATASIZE \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 1F\t\t\tIERC20(address(wbtc)).transfer...\n      NOT \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 1F\t\t\tIERC20(address(wbtc)).transfer...\n      DUP3 \t\t\tIERC20(address(wbtc)).transfer...\n      ADD \t\t\tIERC20(address(wbtc)).transfer...\n      AND \t\t\tIERC20(address(wbtc)).transfer...\n      DUP3 \t\t\tIERC20(address(wbtc)).transfer...\n      ADD \t\t\tIERC20(address(wbtc)).transfer...\n      DUP1 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 40\t\t\tIERC20(address(wbtc)).transfer...\n      MSTORE \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      DUP2 \t\t\tIERC20(address(wbtc)).transfer...\n      ADD \t\t\tIERC20(address(wbtc)).transfer...\n      SWAP1 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH [tag] 42\t\t\tIERC20(address(wbtc)).transfer...\n      SWAP2 \t\t\tIERC20(address(wbtc)).transfer...\n      SWAP1 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH [tag] 43\t\t\tIERC20(address(wbtc)).transfer...\n      JUMP \t\t\tIERC20(address(wbtc)).transfer...\n    tag 42\t\t\tIERC20(address(wbtc)).transfer...\n      JUMPDEST \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      DUP1 \t\t\tamount\n      PUSH 1\t\t\tbalances\n      PUSH 0\t\t\tbalances[msg.sender]\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbalances[msg.sender]\n      AND \t\t\tbalances[msg.sender]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbalances[msg.sender]\n      AND \t\t\tbalances[msg.sender]\n      DUP2 \t\t\tbalances[msg.sender]\n      MSTORE \t\t\tbalances[msg.sender]\n      PUSH 20\t\t\tbalances[msg.sender]\n      ADD \t\t\tbalances[msg.sender]\n      SWAP1 \t\t\tbalances[msg.sender]\n      DUP2 \t\t\tbalances[msg.sender]\n      MSTORE \t\t\tbalances[msg.sender]\n      PUSH 20\t\t\tbalances[msg.sender]\n      ADD \t\t\tbalances[msg.sender]\n      PUSH 0\t\t\tbalances[msg.sender]\n      KECCAK256 \t\t\tbalances[msg.sender]\n      PUSH 0\t\t\tbalances[msg.sender]\n      DUP3 \t\t\tbalances[msg.sender] -= amount\n      DUP3 \t\t\tbalances[msg.sender] -= amount\n      SLOAD \t\t\tbalances[msg.sender] -= amount\n      PUSH [tag] 44\t\t\tbalances[msg.sender] -= amount\n      SWAP2 \t\t\tbalances[msg.sender] -= amount\n      SWAP1 \t\t\tbalances[msg.sender] -= amount\n      PUSH [tag] 45\t\t\tbalances[msg.sender] -= amount\n      JUMP \t\t\tbalances[msg.sender] -= amount\n    tag 44\t\t\tbalances[msg.sender] -= amount\n      JUMPDEST \t\t\tbalances[msg.sender] -= amount\n      SWAP3 \t\t\tbalances[msg.sender] -= amount\n      POP \t\t\tbalances[msg.sender] -= amount\n      POP \t\t\tbalances[msg.sender] -= amount\n      DUP2 \t\t\tbalances[msg.sender] -= amount\n      SWAP1 \t\t\tbalances[msg.sender] -= amount\n      SSTORE \t\t\tbalances[msg.sender] -= amount\n      POP \t\t\tbalances[msg.sender] -= amount\n      POP \t\t\tfunction withdraw(uint256 amou...\n      JUMP \t\t\tfunction withdraw(uint256 amou...\n    tag 21\t\t\tfunction supply(uint256 amount...\n      JUMPDEST \t\t\tfunction supply(uint256 amount...\n      PUSH 0\t\t\twbtc\n      DUP1 \t\t\twbtc\n      SLOAD \t\t\twbtc\n      SWAP1 \t\t\twbtc\n      PUSH 100\t\t\twbtc\n      EXP \t\t\twbtc\n      SWAP1 \t\t\twbtc\n      DIV \t\t\twbtc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twbtc\n      AND \t\t\twbtc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tIERC20(address(wbtc)).transfer...\n      AND \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 23B872DD\t\t\tIERC20(address(wbtc)).transfer...\n      CALLER \t\t\tmsg.sender\n      ADDRESS \t\t\tthis\n      DUP5 \t\t\tamount\n      PUSH 40\t\t\tIERC20(address(wbtc)).transfer...\n      MLOAD \t\t\tIERC20(address(wbtc)).transfer...\n      DUP5 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH FFFFFFFF\t\t\tIERC20(address(wbtc)).transfer...\n      AND \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH E0\t\t\tIERC20(address(wbtc)).transfer...\n      SHL \t\t\tIERC20(address(wbtc)).transfer...\n      DUP2 \t\t\tIERC20(address(wbtc)).transfer...\n      MSTORE \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 4\t\t\tIERC20(address(wbtc)).transfer...\n      ADD \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH [tag] 47\t\t\tIERC20(address(wbtc)).transfer...\n      SWAP4 \t\t\tIERC20(address(wbtc)).transfer...\n      SWAP3 \t\t\tIERC20(address(wbtc)).transfer...\n      SWAP2 \t\t\tIERC20(address(wbtc)).transfer...\n      SWAP1 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH [tag] 48\t\t\tIERC20(address(wbtc)).transfer...\n      JUMP \t\t\tIERC20(address(wbtc)).transfer...\n    tag 47\t\t\tIERC20(address(wbtc)).transfer...\n      JUMPDEST \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 20\t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 40\t\t\tIERC20(address(wbtc)).transfer...\n      MLOAD \t\t\tIERC20(address(wbtc)).transfer...\n      DUP1 \t\t\tIERC20(address(wbtc)).transfer...\n      DUP4 \t\t\tIERC20(address(wbtc)).transfer...\n      SUB \t\t\tIERC20(address(wbtc)).transfer...\n      DUP2 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 0\t\t\tIERC20(address(wbtc)).transfer...\n      DUP8 \t\t\tIERC20(address(wbtc)).transfer...\n      GAS \t\t\tIERC20(address(wbtc)).transfer...\n      CALL \t\t\tIERC20(address(wbtc)).transfer...\n      ISZERO \t\t\tIERC20(address(wbtc)).transfer...\n      DUP1 \t\t\tIERC20(address(wbtc)).transfer...\n      ISZERO \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH [tag] 50\t\t\tIERC20(address(wbtc)).transfer...\n      JUMPI \t\t\tIERC20(address(wbtc)).transfer...\n      RETURNDATASIZE \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 0\t\t\tIERC20(address(wbtc)).transfer...\n      DUP1 \t\t\tIERC20(address(wbtc)).transfer...\n      RETURNDATACOPY \t\t\tIERC20(address(wbtc)).transfer...\n      RETURNDATASIZE \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 0\t\t\tIERC20(address(wbtc)).transfer...\n      REVERT \t\t\tIERC20(address(wbtc)).transfer...\n    tag 50\t\t\tIERC20(address(wbtc)).transfer...\n      JUMPDEST \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 40\t\t\tIERC20(address(wbtc)).transfer...\n      MLOAD \t\t\tIERC20(address(wbtc)).transfer...\n      RETURNDATASIZE \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 1F\t\t\tIERC20(address(wbtc)).transfer...\n      NOT \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 1F\t\t\tIERC20(address(wbtc)).transfer...\n      DUP3 \t\t\tIERC20(address(wbtc)).transfer...\n      ADD \t\t\tIERC20(address(wbtc)).transfer...\n      AND \t\t\tIERC20(address(wbtc)).transfer...\n      DUP3 \t\t\tIERC20(address(wbtc)).transfer...\n      ADD \t\t\tIERC20(address(wbtc)).transfer...\n      DUP1 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH 40\t\t\tIERC20(address(wbtc)).transfer...\n      MSTORE \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      DUP2 \t\t\tIERC20(address(wbtc)).transfer...\n      ADD \t\t\tIERC20(address(wbtc)).transfer...\n      SWAP1 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH [tag] 51\t\t\tIERC20(address(wbtc)).transfer...\n      SWAP2 \t\t\tIERC20(address(wbtc)).transfer...\n      SWAP1 \t\t\tIERC20(address(wbtc)).transfer...\n      PUSH [tag] 43\t\t\tIERC20(address(wbtc)).transfer...\n      JUMP \t\t\tIERC20(address(wbtc)).transfer...\n    tag 51\t\t\tIERC20(address(wbtc)).transfer...\n      JUMPDEST \t\t\tIERC20(address(wbtc)).transfer...\n      POP \t\t\tIERC20(address(wbtc)).transfer...\n      DUP1 \t\t\tamount\n      PUSH 1\t\t\tbalances\n      PUSH 0\t\t\tbalances[msg.sender]\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbalances[msg.sender]\n      AND \t\t\tbalances[msg.sender]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbalances[msg.sender]\n      AND \t\t\tbalances[msg.sender]\n      DUP2 \t\t\tbalances[msg.sender]\n      MSTORE \t\t\tbalances[msg.sender]\n      PUSH 20\t\t\tbalances[msg.sender]\n      ADD \t\t\tbalances[msg.sender]\n      SWAP1 \t\t\tbalances[msg.sender]\n      DUP2 \t\t\tbalances[msg.sender]\n      MSTORE \t\t\tbalances[msg.sender]\n      PUSH 20\t\t\tbalances[msg.sender]\n      ADD \t\t\tbalances[msg.sender]\n      PUSH 0\t\t\tbalances[msg.sender]\n      KECCAK256 \t\t\tbalances[msg.sender]\n      PUSH 0\t\t\tbalances[msg.sender]\n      DUP3 \t\t\tbalances[msg.sender] += amount\n      DUP3 \t\t\tbalances[msg.sender] += amount\n      SLOAD \t\t\tbalances[msg.sender] += amount\n      PUSH [tag] 52\t\t\tbalances[msg.sender] += amount\n      SWAP2 \t\t\tbalances[msg.sender] += amount\n      SWAP1 \t\t\tbalances[msg.sender] += amount\n      PUSH [tag] 53\t\t\tbalances[msg.sender] += amount\n      JUMP \t\t\tbalances[msg.sender] += amount\n    tag 52\t\t\tbalances[msg.sender] += amount\n      JUMPDEST \t\t\tbalances[msg.sender] += amount\n      SWAP3 \t\t\tbalances[msg.sender] += amount\n      POP \t\t\tbalances[msg.sender] += amount\n      POP \t\t\tbalances[msg.sender] += amount\n      DUP2 \t\t\tbalances[msg.sender] += amount\n      SWAP1 \t\t\tbalances[msg.sender] += amount\n      SSTORE \t\t\tbalances[msg.sender] += amount\n      POP \t\t\tbalances[msg.sender] += amount\n      POP \t\t\tfunction supply(uint256 amount...\n      JUMP \t\t\tfunction supply(uint256 amount...\n    tag 23\t\t\tfunction getAssetAddress() ext...\n      JUMPDEST \t\t\tfunction getAssetAddress() ext...\n      PUSH 0\t\t\taddress\n      DUP1 \t\t\twbtc\n      PUSH 0\t\t\twbtc\n      SWAP1 \t\t\twbtc\n      SLOAD \t\t\twbtc\n      SWAP1 \t\t\twbtc\n      PUSH 100\t\t\twbtc\n      EXP \t\t\twbtc\n      SWAP1 \t\t\twbtc\n      DIV \t\t\twbtc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twbtc\n      AND \t\t\twbtc\n      SWAP1 \t\t\treturn address(wbtc)\n      POP \t\t\treturn address(wbtc)\n      SWAP1 \t\t\tfunction getAssetAddress() ext...\n      JUMP \t\t\tfunction getAssetAddress() ext...\n    tag 28\t\t\tfunction getSupplyedAmount(add...\n      JUMPDEST \t\t\tfunction getSupplyedAmount(add...\n      PUSH 0\t\t\tuint256\n      PUSH 1\t\t\tbalances\n      PUSH 0\t\t\tbalances[user]\n      DUP4 \t\t\tuser\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbalances[user]\n      AND \t\t\tbalances[user]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tbalances[user]\n      AND \t\t\tbalances[user]\n      DUP2 \t\t\tbalances[user]\n      MSTORE \t\t\tbalances[user]\n      PUSH 20\t\t\tbalances[user]\n      ADD \t\t\tbalances[user]\n      SWAP1 \t\t\tbalances[user]\n      DUP2 \t\t\tbalances[user]\n      MSTORE \t\t\tbalances[user]\n      PUSH 20\t\t\tbalances[user]\n      ADD \t\t\tbalances[user]\n      PUSH 0\t\t\tbalances[user]\n      KECCAK256 \t\t\tbalances[user]\n      SLOAD \t\t\tbalances[user]\n      SWAP1 \t\t\treturn balances[user]\n      POP \t\t\treturn balances[user]\n      SWAP2 \t\t\tfunction getSupplyedAmount(add...\n      SWAP1 \t\t\tfunction getSupplyedAmount(add...\n      POP \t\t\tfunction getSupplyedAmount(add...\n      JUMP \t\t\tfunction getSupplyedAmount(add...\n    tag 31\t\t\tfunction getAssetPrice() exter...\n      JUMPDEST \t\t\tfunction getAssetPrice() exter...\n      PUSH 0\t\t\tuint256\n      DUP1 \t\t\tuint256\n      PUSH 0\t\t\tuint256\n      DUP1 \t\t\tuint256 _price\n      PUSH 0\t\t\tuint256 _timestamp\n      DUP1 \t\t\tuint256 _decimals\n      PUSH 0\t\t\tIFlareContractRegistry contrac...\n      PUSH AD67FE66660FB8DFE9D6B1B4240D8650E30F6019\t\t\t0xaD67FE66660Fb8dFE9d6b1b4240d...\n      SWAP1 \t\t\tIFlareContractRegistry contrac...\n      POP \t\t\tIFlareContractRegistry contrac...\n      PUSH 0\t\t\tIFtsoRegistry ftsoRegistry\n      DUP2 \t\t\tcontractRegistry\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tcontractRegistry.getContractAd...\n      AND \t\t\tcontractRegistry.getContractAd...\n      PUSH 82760FCA\t\t\tcontractRegistry.getContractAd...\n      PUSH 40\t\t\tcontractRegistry.getContractAd...\n      MLOAD \t\t\tcontractRegistry.getContractAd...\n      DUP2 \t\t\tcontractRegistry.getContractAd...\n      PUSH FFFFFFFF\t\t\tcontractRegistry.getContractAd...\n      AND \t\t\tcontractRegistry.getContractAd...\n      PUSH E0\t\t\tcontractRegistry.getContractAd...\n      SHL \t\t\tcontractRegistry.getContractAd...\n      DUP2 \t\t\tcontractRegistry.getContractAd...\n      MSTORE \t\t\tcontractRegistry.getContractAd...\n      PUSH 4\t\t\tcontractRegistry.getContractAd...\n      ADD \t\t\tcontractRegistry.getContractAd...\n      PUSH [tag] 57\t\t\tcontractRegistry.getContractAd...\n      SWAP1 \t\t\tcontractRegistry.getContractAd...\n      PUSH [tag] 58\t\t\tcontractRegistry.getContractAd...\n      JUMP \t\t\tcontractRegistry.getContractAd...\n    tag 57\t\t\tcontractRegistry.getContractAd...\n      JUMPDEST \t\t\tcontractRegistry.getContractAd...\n      PUSH 20\t\t\tcontractRegistry.getContractAd...\n      PUSH 40\t\t\tcontractRegistry.getContractAd...\n      MLOAD \t\t\tcontractRegistry.getContractAd...\n      DUP1 \t\t\tcontractRegistry.getContractAd...\n      DUP4 \t\t\tcontractRegistry.getContractAd...\n      SUB \t\t\tcontractRegistry.getContractAd...\n      DUP2 \t\t\tcontractRegistry.getContractAd...\n      DUP7 \t\t\tcontractRegistry.getContractAd...\n      GAS \t\t\tcontractRegistry.getContractAd...\n      STATICCALL \t\t\tcontractRegistry.getContractAd...\n      ISZERO \t\t\tcontractRegistry.getContractAd...\n      DUP1 \t\t\tcontractRegistry.getContractAd...\n      ISZERO \t\t\tcontractRegistry.getContractAd...\n      PUSH [tag] 60\t\t\tcontractRegistry.getContractAd...\n      JUMPI \t\t\tcontractRegistry.getContractAd...\n      RETURNDATASIZE \t\t\tcontractRegistry.getContractAd...\n      PUSH 0\t\t\tcontractRegistry.getContractAd...\n      DUP1 \t\t\tcontractRegistry.getContractAd...\n      RETURNDATACOPY \t\t\tcontractRegistry.getContractAd...\n      RETURNDATASIZE \t\t\tcontractRegistry.getContractAd...\n      PUSH 0\t\t\tcontractRegistry.getContractAd...\n      REVERT \t\t\tcontractRegistry.getContractAd...\n    tag 60\t\t\tcontractRegistry.getContractAd...\n      JUMPDEST \t\t\tcontractRegistry.getContractAd...\n      POP \t\t\tcontractRegistry.getContractAd...\n      POP \t\t\tcontractRegistry.getContractAd...\n      POP \t\t\tcontractRegistry.getContractAd...\n      POP \t\t\tcontractRegistry.getContractAd...\n      PUSH 40\t\t\tcontractRegistry.getContractAd...\n      MLOAD \t\t\tcontractRegistry.getContractAd...\n      RETURNDATASIZE \t\t\tcontractRegistry.getContractAd...\n      PUSH 1F\t\t\tcontractRegistry.getContractAd...\n      NOT \t\t\tcontractRegistry.getContractAd...\n      PUSH 1F\t\t\tcontractRegistry.getContractAd...\n      DUP3 \t\t\tcontractRegistry.getContractAd...\n      ADD \t\t\tcontractRegistry.getContractAd...\n      AND \t\t\tcontractRegistry.getContractAd...\n      DUP3 \t\t\tcontractRegistry.getContractAd...\n      ADD \t\t\tcontractRegistry.getContractAd...\n      DUP1 \t\t\tcontractRegistry.getContractAd...\n      PUSH 40\t\t\tcontractRegistry.getContractAd...\n      MSTORE \t\t\tcontractRegistry.getContractAd...\n      POP \t\t\tcontractRegistry.getContractAd...\n      DUP2 \t\t\tcontractRegistry.getContractAd...\n      ADD \t\t\tcontractRegistry.getContractAd...\n      SWAP1 \t\t\tcontractRegistry.getContractAd...\n      PUSH [tag] 61\t\t\tcontractRegistry.getContractAd...\n      SWAP2 \t\t\tcontractRegistry.getContractAd...\n      SWAP1 \t\t\tcontractRegistry.getContractAd...\n      PUSH [tag] 62\t\t\tcontractRegistry.getContractAd...\n      JUMP \t\t\tcontractRegistry.getContractAd...\n    tag 61\t\t\tcontractRegistry.getContractAd...\n      JUMPDEST \t\t\tcontractRegistry.getContractAd...\n      SWAP1 \t\t\tIFtsoRegistry ftsoRegistry = I...\n      POP \t\t\tIFtsoRegistry ftsoRegistry = I...\n      DUP1 \t\t\tftsoRegistry\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tftsoRegistry.getCurrentPriceWi...\n      AND \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH A69AFDC6\t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH 40\t\t\tftsoRegistry.getCurrentPriceWi...\n      MLOAD \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP2 \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH FFFFFFFF\t\t\tftsoRegistry.getCurrentPriceWi...\n      AND \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH E0\t\t\tftsoRegistry.getCurrentPriceWi...\n      SHL \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP2 \t\t\tftsoRegistry.getCurrentPriceWi...\n      MSTORE \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH 4\t\t\tftsoRegistry.getCurrentPriceWi...\n      ADD \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH [tag] 63\t\t\tftsoRegistry.getCurrentPriceWi...\n      SWAP1 \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH [tag] 64\t\t\tftsoRegistry.getCurrentPriceWi...\n      JUMP \t\t\tftsoRegistry.getCurrentPriceWi...\n    tag 63\t\t\tftsoRegistry.getCurrentPriceWi...\n      JUMPDEST \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH 60\t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH 40\t\t\tftsoRegistry.getCurrentPriceWi...\n      MLOAD \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP1 \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP4 \t\t\tftsoRegistry.getCurrentPriceWi...\n      SUB \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP2 \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP7 \t\t\tftsoRegistry.getCurrentPriceWi...\n      GAS \t\t\tftsoRegistry.getCurrentPriceWi...\n      STATICCALL \t\t\tftsoRegistry.getCurrentPriceWi...\n      ISZERO \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP1 \t\t\tftsoRegistry.getCurrentPriceWi...\n      ISZERO \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH [tag] 66\t\t\tftsoRegistry.getCurrentPriceWi...\n      JUMPI \t\t\tftsoRegistry.getCurrentPriceWi...\n      RETURNDATASIZE \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH 0\t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP1 \t\t\tftsoRegistry.getCurrentPriceWi...\n      RETURNDATACOPY \t\t\tftsoRegistry.getCurrentPriceWi...\n      RETURNDATASIZE \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH 0\t\t\tftsoRegistry.getCurrentPriceWi...\n      REVERT \t\t\tftsoRegistry.getCurrentPriceWi...\n    tag 66\t\t\tftsoRegistry.getCurrentPriceWi...\n      JUMPDEST \t\t\tftsoRegistry.getCurrentPriceWi...\n      POP \t\t\tftsoRegistry.getCurrentPriceWi...\n      POP \t\t\tftsoRegistry.getCurrentPriceWi...\n      POP \t\t\tftsoRegistry.getCurrentPriceWi...\n      POP \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH 40\t\t\tftsoRegistry.getCurrentPriceWi...\n      MLOAD \t\t\tftsoRegistry.getCurrentPriceWi...\n      RETURNDATASIZE \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH 1F\t\t\tftsoRegistry.getCurrentPriceWi...\n      NOT \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH 1F\t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP3 \t\t\tftsoRegistry.getCurrentPriceWi...\n      ADD \t\t\tftsoRegistry.getCurrentPriceWi...\n      AND \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP3 \t\t\tftsoRegistry.getCurrentPriceWi...\n      ADD \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP1 \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH 40\t\t\tftsoRegistry.getCurrentPriceWi...\n      MSTORE \t\t\tftsoRegistry.getCurrentPriceWi...\n      POP \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP2 \t\t\tftsoRegistry.getCurrentPriceWi...\n      ADD \t\t\tftsoRegistry.getCurrentPriceWi...\n      SWAP1 \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH [tag] 67\t\t\tftsoRegistry.getCurrentPriceWi...\n      SWAP2 \t\t\tftsoRegistry.getCurrentPriceWi...\n      SWAP1 \t\t\tftsoRegistry.getCurrentPriceWi...\n      PUSH [tag] 68\t\t\tftsoRegistry.getCurrentPriceWi...\n      JUMP \t\t\tftsoRegistry.getCurrentPriceWi...\n    tag 67\t\t\tftsoRegistry.getCurrentPriceWi...\n      JUMPDEST \t\t\tftsoRegistry.getCurrentPriceWi...\n      DUP1 \t\t\t(_price, _timestamp, _decimals...\n      SWAP6 \t\t\t(_price, _timestamp, _decimals...\n      POP \t\t\t(_price, _timestamp, _decimals...\n      DUP2 \t\t\t(_price, _timestamp, _decimals...\n      SWAP7 \t\t\t(_price, _timestamp, _decimals...\n      POP \t\t\t(_price, _timestamp, _decimals...\n      DUP3 \t\t\t(_price, _timestamp, _decimals...\n      SWAP8 \t\t\t(_price, _timestamp, _decimals...\n      POP \t\t\t(_price, _timestamp, _decimals...\n      POP \t\t\t(_price, _timestamp, _decimals...\n      POP \t\t\t(_price, _timestamp, _decimals...\n      POP \t\t\t(_price, _timestamp, _decimals...\n      DUP5 \t\t\t_price\n      DUP5 \t\t\t_timestamp\n      DUP5 \t\t\t_decimals\n      SWAP8 \t\t\treturn (_price, _timestamp, _d...\n      POP \t\t\treturn (_price, _timestamp, _d...\n      SWAP8 \t\t\treturn (_price, _timestamp, _d...\n      POP \t\t\treturn (_price, _timestamp, _d...\n      SWAP8 \t\t\treturn (_price, _timestamp, _d...\n      POP \t\t\treturn (_price, _timestamp, _d...\n      POP \t\t\treturn (_price, _timestamp, _d...\n      POP \t\t\treturn (_price, _timestamp, _d...\n      POP \t\t\treturn (_price, _timestamp, _d...\n      POP \t\t\treturn (_price, _timestamp, _d...\n      POP \t\t\treturn (_price, _timestamp, _d...\n      SWAP1 \t\t\tfunction getAssetPrice() exter...\n      SWAP2 \t\t\tfunction getAssetPrice() exter...\n      SWAP3 \t\t\tfunction getAssetPrice() exter...\n      JUMP \t\t\tfunction getAssetPrice() exter...\n    tag 70\t\t\t/token/ERC20/IERC20.sol\";\\nimp...\n      JUMPDEST \t\t\t/token/ERC20/IERC20.sol\";\\nimp...\n      PUSH 0\t\t\t/\n      DUP1 \t\t\tc\n      REVERT \t\t\tInterfaces/I\n    tag 72\t\t\tTCReserve {\\n\\n    struct pric...\n      JUMPDEST \t\t\tTCReserve {\\n\\n    struct pric...\n      PUSH 0\t\t\t\\n      \n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttimestamp;\\n        uint256 de...\n      DUP3 \t\t\tint25\n      AND \t\t\t   uint256 timestamp;\\n       ...\n      SWAP1 \t\t\trice;\\n        uint256 timesta...\n      POP \t\t\trice;\\n        uint256 timesta...\n      SWAP2 \t\t\tTCReserve {\\n\\n    struct pric...\n      SWAP1 \t\t\tTCReserve {\\n\\n    struct pric...\n      POP \t\t\tTCReserve {\\n\\n    struct pric...\n      JUMP \t\t\tTCReserve {\\n\\n    struct pric...\n    tag 73\t\t\t wbtc;\\n    mapping(address =>...\n      JUMPDEST \t\t\t wbtc;\\n    mapping(address =>...\n      PUSH 0\t\t\t) publi\n      PUSH [tag] 100\t\t\ts private constant FLARE\n      DUP3 \t\t\t FLAR\n      PUSH [tag] 72\t\t\ts private constant FLARE\n      JUMP \t\t\ts private constant FLARE\n    tag 100\t\t\ts private constant FLARE\n      JUMPDEST \t\t\ts private constant FLARE\n      SWAP1 \t\t\t\\n    address private constant...\n      POP \t\t\t\\n    address private constant...\n      SWAP2 \t\t\t wbtc;\\n    mapping(address =>...\n      SWAP1 \t\t\t wbtc;\\n    mapping(address =>...\n      POP \t\t\t wbtc;\\n    mapping(address =>...\n      JUMP \t\t\t wbtc;\\n    mapping(address =>...\n    tag 74\t\t\tGISTRY =\\n        0xaD67FE6666...\n      JUMPDEST \t\t\tGISTRY =\\n        0xaD67FE6666...\n      PUSH [tag] 102\t\t\tnstructor(address _wBTC)\n      DUP2 \t\t\t_wBTC\n      PUSH [tag] 73\t\t\tnstructor(address _wBTC)\n      JUMP \t\t\tnstructor(address _wBTC)\n    tag 102\t\t\tnstructor(address _wBTC)\n      JUMPDEST \t\t\tnstructor(address _wBTC)\n      DUP2 \t\t\t\\n    \n      EQ \t\t\t   \\n    constructor(address _...\n      PUSH [tag] 103\t\t\t0F6019;\\n\\n    \\n    construct...\n      JUMPI \t\t\t0F6019;\\n\\n    \\n    construct...\n      PUSH 0\t\t\t \n      DUP1 \t\t\tb\n      REVERT \t\t\t      wbtc =\n    tag 103\t\t\t0F6019;\\n\\n    \\n    construct...\n      JUMPDEST \t\t\t0F6019;\\n\\n    \\n    construct...\n      POP \t\t\tGISTRY =\\n        0xaD67FE6666...\n      JUMP \t\t\tGISTRY =\\n        0xaD67FE6666...\n    tag 75\t\t\t;\\n    }\\n\\n    function suppl...\n      JUMPDEST \t\t\t;\\n    }\\n\\n    function suppl...\n      PUSH 0\t\t\txtern\n      DUP2 \t\t\t).tran\n      CALLDATALOAD \t\t\taddress(wbtc)).trans\n      SWAP1 \t\t\t  IERC20(address(wbtc)).trans\n      POP \t\t\t  IERC20(address(wbtc)).trans\n      PUSH [tag] 105\t\t\tsg.sender, address(this), amou...\n      DUP2 \t\t\tmount\n      PUSH [tag] 74\t\t\tsg.sender, address(this), amou...\n      JUMP \t\t\tsg.sender, address(this), amou...\n    tag 105\t\t\tsg.sender, address(this), amou...\n      JUMPDEST \t\t\tsg.sender, address(this), amou...\n      SWAP3 \t\t\t;\\n    }\\n\\n    function suppl...\n      SWAP2 \t\t\t;\\n    }\\n\\n    function suppl...\n      POP \t\t\t;\\n    }\\n\\n    function suppl...\n      POP \t\t\t;\\n    }\\n\\n    function suppl...\n      JUMP \t\t\t;\\n    }\\n\\n    function suppl...\n    tag 11\t\t\tlances[msg.sender] += amount;\\...\n      JUMPDEST \t\t\tlances[msg.sender] += amount;\\...\n      PUSH 0\t\t\tupplye\n      PUSH 20\t\t\t (\n      DUP3 \t\t\tview retu\n      DUP5 \t\t\texterna\n      SUB \t\t\ter) external view retur\n      SLT \t\t\ts user) external view returns ...\n      ISZERO \t\t\tress user) external view retur...\n      PUSH [tag] 107\t\t\tress user) external view retur...\n      JUMPI \t\t\tress user) external view retur...\n      PUSH [tag] 108\t\t\t256) {\\n        return balance...\n      PUSH [tag] 70\t\t\t256) {\\n        return balance...\n      JUMP \t\t\t256) {\\n        return balance...\n    tag 108\t\t\t256) {\\n        return balance...\n      JUMPDEST \t\t\t256) {\\n        return balance...\n    tag 107\t\t\tress user) external view retur...\n      JUMPDEST \t\t\tress user) external view retur...\n      PUSH 0\t\t\ts\n      PUSH [tag] 109\t\t\tsufficient balance\");\\n       ...\n      DUP5 \t\t\twbtc)).\n      DUP3 \t\t\t(addre\n      DUP6 \t\t\t     IERC\n      ADD \t\t\t\\n        IERC20(addres\n      PUSH [tag] 75\t\t\tsufficient balance\");\\n       ...\n      JUMP \t\t\tsufficient balance\");\\n       ...\n    tag 109\t\t\tsufficient balance\");\\n       ...\n      JUMPDEST \t\t\tsufficient balance\");\\n       ...\n      SWAP2 \t\t\tmount, \"Insufficient balance\")...\n      POP \t\t\tmount, \"Insufficient balance\")...\n      POP \t\t\t {\\n        require(balances[m...\n      SWAP3 \t\t\tlances[msg.sender] += amount;\\...\n      SWAP2 \t\t\tlances[msg.sender] += amount;\\...\n      POP \t\t\tlances[msg.sender] += amount;\\...\n      POP \t\t\tlances[msg.sender] += amount;\\...\n      JUMP \t\t\tlances[msg.sender] += amount;\\...\n    tag 76\t\t\tunt);\\n        balances[msg.se...\n      JUMPDEST \t\t\tunt);\\n        balances[msg.se...\n      PUSH 0\t\t\t amount\n      DUP2 \t\t\tgetAs\n      SWAP1 \t\t\t  function getAs\n      POP \t\t\t  function getAs\n      SWAP2 \t\t\tunt);\\n        balances[msg.se...\n      SWAP1 \t\t\tunt);\\n        balances[msg.se...\n      POP \t\t\tunt);\\n        balances[msg.se...\n      JUMP \t\t\tunt);\\n        balances[msg.se...\n    tag 77\t\t\txternal view returns (uint256,...\n      JUMPDEST \t\t\txternal view returns (uint256,...\n      PUSH [tag] 112\t\t\t56 _timestamp;\\n        u\n      DUP2 \t\t\t     \n      PUSH [tag] 76\t\t\t56 _timestamp;\\n        u\n      JUMP \t\t\t56 _timestamp;\\n        u\n    tag 112\t\t\t56 _timestamp;\\n        u\n      JUMPDEST \t\t\t56 _timestamp;\\n        u\n      DUP3 \t\t\tuin\n      MSTORE \t\t\t       uint256 _timestamp;\\n  ...\n      POP \t\t\txternal view returns (uint256,...\n      POP \t\t\txternal view returns (uint256,...\n      JUMP \t\t\txternal view returns (uint256,...\n    tag 14\t\t\tals;\\n\\n        IFlareContract...\n      JUMPDEST \t\t\tals;\\n\\n        IFlareContract...\n      PUSH 0\t\t\tLARE\n      PUSH 20\t\t\t. \n      DUP3 \t\t\t       //\n      ADD \t\t\t;\\n\\n        // 3. R\n      SWAP1 \t\t\tEGISTRY);\\n\\n        // 3. R\n      POP \t\t\tEGISTRY);\\n\\n        // 3. R\n      PUSH [tag] 114\t\t\te FTSO Registry\\n        IFtso...\n      PUSH 0\t\t\t \n      DUP4 \t\t\toRegistry\n      ADD \t\t\tIFtsoRegistry(\\n  \n      DUP5 \t\t\tgistry\n      PUSH [tag] 77\t\t\te FTSO Registry\\n        IFtso...\n      JUMP \t\t\te FTSO Registry\\n        IFtso...\n    tag 114\t\t\te FTSO Registry\\n        IFtso...\n      JUMPDEST \t\t\te FTSO Registry\\n        IFtso...\n      SWAP3 \t\t\tals;\\n\\n        IFlareContract...\n      SWAP2 \t\t\tals;\\n\\n        IFlareContract...\n      POP \t\t\tals;\\n\\n        IFlareContract...\n      POP \t\t\tals;\\n\\n        IFlareContract...\n      JUMP \t\t\tals;\\n\\n        IFlareContract...\n    tag 78\t\t\tractRegistry.getContractAddres...\n      JUMPDEST \t\t\tractRegistry.getContractAddres...\n      PUSH [tag] 116\t\t\tt latest price\\n        (\n      DUP2 \t\t\t     \n      PUSH [tag] 76\t\t\tt latest price\\n        (\n      JUMP \t\t\tt latest price\\n        (\n    tag 116\t\t\tt latest price\\n        (\n      JUMPDEST \t\t\tt latest price\\n        (\n      DUP2 \t\t\t/ 4. \n      EQ \t\t\t  // 4. Get latest price\\n    ...\n      PUSH [tag] 117\t\t\t);\\n\\n        // 4. Get latest...\n      JUMPI \t\t\t);\\n\\n        // 4. Get latest...\n      PUSH 0\t\t\ta\n      DUP1 \t\t\te\n      REVERT \t\t\te, _timestam\n    tag 117\t\t\t);\\n\\n        // 4. Get latest...\n      JUMPDEST \t\t\t);\\n\\n        // 4. Get latest...\n      POP \t\t\tractRegistry.getContractAddres...\n      JUMP \t\t\tractRegistry.getContractAddres...\n    tag 79\t\t\t=\\n            ftsoRegistry.ge...\n      JUMPDEST \t\t\t=\\n            ftsoRegistry.ge...\n      PUSH 0\t\t\tDecim\n      DUP2 \t\t\tprice,\n      CALLDATALOAD \t\t\t    return (_price, \n      SWAP1 \t\t\tC\");\\n        return (_price, \n      POP \t\t\tC\");\\n        return (_price, \n      PUSH [tag] 119\t\t\tp, _decimals);\\n    }\\n\\n    f...\n      DUP2 \t\t\tuncti\n      PUSH [tag] 78\t\t\tp, _decimals);\\n    }\\n\\n    f...\n      JUMP \t\t\tp, _decimals);\\n    }\\n\\n    f...\n    tag 119\t\t\tp, _decimals);\\n    }\\n\\n    f...\n      JUMPDEST \t\t\tp, _decimals);\\n    }\\n\\n    f...\n      SWAP3 \t\t\t=\\n            ftsoRegistry.ge...\n      SWAP2 \t\t\t=\\n            ftsoRegistry.ge...\n      POP \t\t\t=\\n            ftsoRegistry.ge...\n      POP \t\t\t=\\n            ftsoRegistry.ge...\n      JUMP \t\t\t=\\n            ftsoRegistry.ge...\n    tag 17\t\t\tdress() external view returns ...\n      JUMPDEST \t\t\tdress() external view returns ...\n      PUSH 0\t\t\tdress(\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\\n\n      ISZERO \t\t\t}\\n}\\n\n      PUSH [tag] 121\t\t\t}\\n}\\n\n      JUMPI \t\t\t}\\n}\\n\n      PUSH [tag] 122\t\t\t\n      PUSH [tag] 70\t\t\t\n      JUMP \t\t\t\n    tag 122\t\t\t\n      JUMPDEST \t\t\t\n    tag 121\t\t\t}\\n}\\n\n      JUMPDEST \t\t\t}\\n}\\n\n      PUSH 0\t\t\t\n      PUSH [tag] 123\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 79\t\t\t\n      JUMP \t\t\t\n    tag 123\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\tdress() external view returns ...\n      SWAP2 \t\t\tdress() external view returns ...\n      POP \t\t\tdress() external view returns ...\n      POP \t\t\tdress() external view returns ...\n      JUMP \t\t\tdress() external view returns ...\n    tag 80\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 125\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 73\t\t\t\n      JUMP \t\t\t\n    tag 125\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 25\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 127\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMP \t\t\t\n    tag 127\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 33\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 129\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 129\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 130\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 130\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 131\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 131\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 81\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 82\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 496E73756666696369656E742062616C616E6365000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 83\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 135\t\t\t\n      PUSH 14\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 81\t\t\t\n      JUMP \t\t\t\n    tag 135\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 136\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 82\t\t\t\n      JUMP \t\t\t\n    tag 136\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 37\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 138\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 83\t\t\t\n      JUMP \t\t\t\n    tag 138\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 39\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 140\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMP \t\t\t\n    tag 140\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 141\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 141\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 84\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 85\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 144\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 84\t\t\t\n      JUMP \t\t\t\n    tag 144\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 145\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 145\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 86\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 147\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMP \t\t\t\n    tag 147\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 43\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 149\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 150\t\t\t\n      PUSH [tag] 70\t\t\t\n      JUMP \t\t\t\n    tag 150\t\t\t\n      JUMPDEST \t\t\t\n    tag 149\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 151\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 86\t\t\t\n      JUMP \t\t\t\n    tag 151\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 87\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 45\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 154\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 154\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 155\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 155\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 157\t\t\t\n      PUSH [tag] 87\t\t\t\n      JUMP \t\t\t\n    tag 157\t\t\t\n      JUMPDEST \t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 48\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 159\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMP \t\t\t\n    tag 159\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 160\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMP \t\t\t\n    tag 160\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 161\t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 77\t\t\t\n      JUMP \t\t\t\n    tag 161\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 53\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 163\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 163\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 164\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 164\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 165\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 166\t\t\t\n      PUSH [tag] 87\t\t\t\n      JUMP \t\t\t\n    tag 166\t\t\t\n      JUMPDEST \t\t\t\n    tag 165\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 88\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4674736F52656769737472790000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 89\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 169\t\t\t\n      PUSH C\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 81\t\t\t\n      JUMP \t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 170\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 88\t\t\t\n      JUMP \t\t\t\n    tag 170\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 58\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 172\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 89\t\t\t\n      JUMP \t\t\t\n    tag 172\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 90\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 174\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 74\t\t\t\n      JUMP \t\t\t\n    tag 174\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 62\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 176\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 177\t\t\t\n      PUSH [tag] 70\t\t\t\n      JUMP \t\t\t\n    tag 177\t\t\t\n      JUMPDEST \t\t\t\n    tag 176\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 178\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMP \t\t\t\n    tag 178\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 91\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 7465737442544300000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 92\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 181\t\t\t\n      PUSH 7\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 81\t\t\t\n      JUMP \t\t\t\n    tag 181\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 182\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 91\t\t\t\n      JUMP \t\t\t\n    tag 182\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 64\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 184\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 92\t\t\t\n      JUMP \t\t\t\n    tag 184\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 93\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 186\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 78\t\t\t\n      JUMP \t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 68\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 188\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 189\t\t\t\n      PUSH [tag] 70\t\t\t\n      JUMP \t\t\t\n    tag 189\t\t\t\n      JUMPDEST \t\t\t\n    tag 188\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 190\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 93\t\t\t\n      JUMP \t\t\t\n    tag 190\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 191\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 93\t\t\t\n      JUMP \t\t\t\n    tag 191\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      PUSH [tag] 192\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 93\t\t\t\n      JUMP \t\t\t\n    tag 192\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      JUMP \t\t\t\n    .data\n"
}