{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"contracts/SimplePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./WBTCReserve.sol\\\";\\nimport \\\"./USDCReserve.sol\\\";\\n\\n\\ncontract SimplePool {\\n    WBTCReserve wBTCReserve;\\n    USDCReserve usdcReserve;\\n    address public wBTC;\\n    address public usdc;\\n    mapping(address => uint256) borrowedUSDC;\\n    uint8 wBTCLTV = uint8(80);\\n\\n    constructor(WBTCReserve _wBTCReserve, USDCReserve _usdcReserve, address _wBTC, address _usdc) {\\n        wBTC = _wBTC;\\n        usdc = _usdc;\\n        wBTCReserve = _wBTCReserve;\\n        usdcReserve = _usdcReserve;\\n    }\\n\\n    function getReserve(address token) public view returns (address reserveAddress) {\\n        if (token == wBTC) {\\n            return address(wBTCReserve);\\n        } else if (token == usdc) {\\n            return address(usdcReserve);\\n        }\\n    }\\n\\n    function getwBTC() public view returns (address){\\n        return address(wBTC);\\n    }\\n\\n    function getUSDC() public view returns (address){\\n        return address(usdc);\\n    }\\n\\n    function getAssetsPrice() external view returns (uint256[] memory) {\\n        (uint256 wBTCPrice, uint256 _timestamp, uint256 _decimals) = wBTCReserve.getAssetPrice();\\n        uint256 usdcPrice = usdcReserve.getAssetPrice();\\n        uint256[] memory prices = new uint256[](2);\\n        prices[0] = wBTCPrice;\\n        prices[1] = usdcPrice;\\n        return prices;\\n    }\\n\\n    function getSupplyedBalances(address user)  external view returns (uint256[] memory) {\\n        uint256[] memory balances = new uint256[](2);\\n        balances[0] = wBTCReserve.getSupplyedAmount(user);\\n        balances[1] = usdcReserve.getSupplyedAmount(user);\\n        return balances;\\n    }\\n\\n    function borrow(address asset, uint256 amount) external {\\n        require(asset == usdc);\\n        uint256 collateralValue = this.getDepositValue(msg.sender);\\n        uint256 maxValueBorred = collateralValue * wBTCLTV / 100;\\n        uint256 currentBorrowed = this.getDebt(msg.sender);\\n        require((currentBorrowed + amount) < maxValueBorred, \\\"You want to more more value than allowed\\\");\\n        borrowedUSDC[msg.sender] += amount;\\n        usdcReserve.executeTransaction(msg.sender, amount);\\n    }\\n\\n    function getDebt(address user) external view returns (uint256){\\n        uint256 debt = borrowedUSDC[user] * usdcReserve.getAssetPrice();\\n        return debt;\\n    }\\n\\n    function getDepositValue(address user) external view returns (uint256){\\n        (uint256 wBTCPrice, uint256 _timestamp, uint256 _decimals) = wBTCReserve.getAssetPrice();\\n        uint256 collatValue = wBTCReserve.getSupplyedAmount(user) * wBTCPrice / (10 ** _decimals);\\n        return collatValue;\\n    }\\n\\n\\n\\n\\n\\n    \\n\\n}\\n\"},\"contracts/USDCReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract USDCReserve {\\n\\n    IERC20 usdc;\\n    mapping(address => uint256) public balances;\\n    address owner;\\n    address pool;\\n\\n    \\n    constructor(address _usdc) {\\n        usdc = IERC20(_usdc);\\n        owner = msg.sender;\\n    }\\n\\n    function supply(uint256 amount) external {\\n        IERC20(address(usdc)).transferFrom(msg.sender, address(this), amount);\\n        balances[msg.sender] += amount;\\n    }\\n    \\n\\n    function getSupplyedAmount(address user) external view returns (uint256) {\\n        return balances[user];\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        require(balances[msg.sender] >= amount, \\\"Insufficient balance\\\");\\n        IERC20(address(usdc)).transfer(msg.sender, amount);\\n        balances[msg.sender] -= amount;\\n    }\\n\\n    function getAssetPrice() external view returns (uint256) {\\n        return 1;\\n    }\\n\\n    function getAssetAddress() external view returns (address) {\\n        return address(usdc);\\n    }\\n\\n    function setPool(address _pool) external{\\n        require(msg.sender == address(owner));\\n        pool = _pool;\\n    }\\n\\n    function executeTransaction(address user, uint256 amount) external {\\n        require(msg.sender == pool);\\n        IERC20(address(usdc)).transfer(user, amount);\\n    }\\n}\\n\"},\"contracts/WBTCReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\\\";\\nimport \\\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\\\";\\n\\n\\ncontract WBTCReserve {\\n\\n    struct priceStruct {\\n        uint256 price;\\n        uint256 timestamp;\\n        uint256 decimals;\\n\\n    }\\n\\n    IERC20 wbtc;\\n    mapping(address => uint256) public balances;\\n    address private constant FLARE_CONTRACT_REGISTRY =\\n        0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019;\\n\\n    \\n    constructor(address _wBTC) {\\n        wbtc = IERC20(_wBTC);\\n    }\\n\\n    function supply(uint256 amount) external {\\n        IERC20(address(wbtc)).transferFrom(msg.sender, address(this), amount);\\n        balances[msg.sender] += amount;\\n    }\\n    \\n\\n    function getSupplyedAmount(address user) external view returns (uint256) {\\n        return balances[user];\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        require(balances[msg.sender] >= amount, \\\"Insufficient balance\\\");\\n        IERC20(address(wbtc)).transfer(msg.sender, amount);\\n        balances[msg.sender] -= amount;\\n    }\\n\\n    function getAssetPrice() external view returns (uint256, uint256, uint256){\\n        uint256 _price;\\n        uint256 _timestamp;\\n        uint256 _decimals;\\n\\n        IFlareContractRegistry contractRegistry = IFlareContractRegistry(\\n            FLARE_CONTRACT_REGISTRY);\\n\\n        // 3. Retrieve the FTSO Registry\\n        IFtsoRegistry ftsoRegistry = IFtsoRegistry(\\n            contractRegistry.getContractAddressByName('FtsoRegistry'));\\n\\n        // 4. Get latest price\\n        (_price, _timestamp, _decimals) =\\n            ftsoRegistry.getCurrentPriceWithDecimals(\\\"testBTC\\\");\\n        return (_price, _timestamp, _decimals);\\n    }\\n\\n    function getAssetAddress() external view returns (address) {\\n        return address(wbtc);\\n    }\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\nimport \\\"../ftso/interface/IIFtso.sol\\\";\\nimport \\\"../genesis/interface/IFtsoRegistryGenesis.sol\\\";\\n\\ninterface IFtsoRegistry is IFtsoRegistryGenesis {\\n\\n    struct PriceInfo {\\n        uint256 ftsoIndex;\\n        uint256 price;\\n        uint256 decimals;\\n        uint256 timestamp;\\n    }\\n\\n    function getFtso(uint256 _ftsoIndex) external view returns(IIFtso _activeFtsoAddress);\\n    function getFtsoBySymbol(string memory _symbol) external view returns(IIFtso _activeFtsoAddress);\\n    function getSupportedIndices() external view returns(uint256[] memory _supportedIndices);\\n    function getSupportedSymbols() external view returns(string[] memory _supportedSymbols);\\n    function getSupportedFtsos() external view returns(IIFtso[] memory _ftsos);\\n    function getFtsoIndex(string memory _symbol) external view returns (uint256 _assetIndex);\\n    function getFtsoSymbol(uint256 _ftsoIndex) external view returns (string memory _symbol);\\n    function getCurrentPrice(uint256 _ftsoIndex) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPrice(string memory _symbol) external view returns(uint256 _price, uint256 _timestamp);\\n    function getCurrentPriceWithDecimals(uint256 _assetIndex) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n    function getCurrentPriceWithDecimals(string memory _symbol) external view\\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\\n\\n    function getAllCurrentPrices() external view returns (PriceInfo[] memory);\\n    function getCurrentPricesByIndices(uint256[] memory _indices) external view returns (PriceInfo[] memory);\\n    function getCurrentPricesBySymbols(string[] memory _symbols) external view returns (PriceInfo[] memory);\\n\\n    function getSupportedIndicesAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, IIFtso[] memory _ftsos);\\n\\n    function getSupportedSymbolsAndFtsos() external view \\n        returns(string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n\\n    function getSupportedIndicesAndSymbols() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols);\\n\\n    function getSupportedIndicesSymbolsAndFtsos() external view \\n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\ninterface IFlareContractRegistry {\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(string calldata _name) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"./IFtsoGenesis.sol\\\";\\n\\n\\ninterface IFtsoRegistryGenesis {\\n\\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/ftso/interface/IIFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../genesis/interface/IFtsoGenesis.sol\\\";\\nimport \\\"../../userInterfaces/IFtso.sol\\\";\\nimport \\\"../../../util-contracts/token/token/interface/IIVPToken.sol\\\";\\n\\n\\ninterface IIFtso is IFtso, IFtsoGenesis {\\n\\n    /// function finalizePriceReveal\\n    /// called by reward manager only on correct timing.\\n    /// if price reveal period for epoch x ended. finalize.\\n    /// iterate list of price submissions\\n    /// find weighted median\\n    /// find adjucant 50% of price submissions.\\n    /// Allocate reward for any price submission which is same as a \\\"winning\\\" submission\\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\\n        returns(\\n            address[] memory _eligibleAddresses,\\n            uint256[] memory _natWeights,\\n            uint256 _totalNatWeight\\n        );\\n\\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\\n\\n    // activateFtso will be called by ftso manager once ftso is added \\n    // before this is done, FTSO can't run\\n    function activateFtso(\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    ) external;\\n\\n    function deactivateFtso() external;\\n\\n    // update initial price and timestamp - only if not active\\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\\n\\n    function configureEpochs(\\n        uint256 _maxVotePowerNatThresholdFraction,\\n        uint256 _maxVotePowerAssetThresholdFraction,\\n        uint256 _lowAssetUSDThreshold,\\n        uint256 _highAssetUSDThreshold,\\n        uint256 _highAssetTurnoutThresholdBIPS,\\n        uint256 _lowNatTurnoutThresholdBIPS,\\n        uint256 _elasticBandRewardBIPS,\\n        uint256 _elasticBandWidthPPM,\\n        address[] memory _trustedAddresses\\n    ) external;\\n\\n    function setAsset(IIVPToken _asset) external;\\n\\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\\n\\n    // current vote power block will update per reward epoch. \\n    // the FTSO doesn't have notion of reward epochs.\\n    // reward manager only can set this data. \\n    function setVotePowerBlock(uint256 _blockNumber) external;\\n\\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\\n  \\n    /**\\n     * @notice Returns ftso manager address\\n     */\\n    function ftsoManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns the FTSO asset\\n     * @dev Asset is null in case of multi-asset FTSO\\n     */\\n    function getAsset() external view returns (IIVPToken);\\n\\n    /**\\n     * @notice Returns the Asset FTSOs\\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\\n     */\\n    function getAssetFtsos() external view returns (IIFtso[] memory);\\n\\n    /**\\n     * @notice Returns current configuration of epoch state\\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \\n        elastic band (prices within _elasticBandWidthPPM of the median) \\n        and 10000 - elasticBandRewardBIPS to the IQR \\n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\\n     */\\n    function epochsConfiguration() external view \\n        returns (\\n            uint256 _maxVotePowerNatThresholdFraction,\\n            uint256 _maxVotePowerAssetThresholdFraction,\\n            uint256 _lowAssetUSDThreshold,\\n            uint256 _highAssetUSDThreshold,\\n            uint256 _highAssetTurnoutThresholdBIPS,\\n            uint256 _lowNatTurnoutThresholdBIPS,\\n            uint256 _elasticBandRewardBIPS,\\n            uint256 _elasticBandWidthPPM,\\n            address[] memory _trustedAddresses\\n        );\\n\\n    /**\\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\\n     * @return _assets                  the list of Assets that are accounted in vote\\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\\n     * @return _totalVotePowerNat       total native token vote power at block\\n     * @return _totalVotePowerAsset     total combined asset vote power at block\\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\\n     * @return _votePowerBlock          vote powewr block for given epoch\\n     */\\n    function getVoteWeightingParameters() external view \\n        returns (\\n            IIVPToken[] memory _assets,\\n            uint256[] memory _assetMultipliers,\\n            uint256 _totalVotePowerNat,\\n            uint256 _totalVotePowerAsset,\\n            uint256 _assetWeightRatio,\\n            uint256 _votePowerBlock\\n        );\\n\\n    function wNat() external view returns (IIVPToken);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoGenesis.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\ninterface IFtsoGenesis {\\n\\n    /**\\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @param _price                Submitted price in USD\\n     * @notice The hash of _price and _random must be equal to the submitted hash\\n     * @notice Emits PriceRevealed event\\n     */\\n    function revealPriceSubmitter(\\n        address _voter,\\n        uint256 _epochId,\\n        uint256 _price,\\n        uint256 _wNatVP\\n    ) external;\\n\\n    /**\\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\\n     * @param _voter                Voter address\\n     * @param _epochId              Id of the epoch in which the price hash was submitted\\n     * @return wNat vote power\\n     */\\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IIVPContract.sol\\\";\\nimport \\\"./IIGovernanceVotePower.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPToken is IVPToken, IICleanable {\\n    /**\\n     * Set the contract that is allowed to set cleanupBlockNumber.\\n     * Usually this will be an instance of CleanupBlockNumberManager.\\n     */\\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\\n    \\n    /**\\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\\n     * and delegate governance vote power. \\n     */\\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtso.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IFtso {\\n    enum PriceFinalizationType {\\n        // initial state\\n        NOT_FINALIZED,\\n        // median calculation used to find price\\n        WEIGHTED_MEDIAN,\\n        // low turnout - price calculated from median of trusted addresses\\n        TRUSTED_ADDRESSES,\\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\\n        PREVIOUS_PRICE_COPIED,\\n        // price calculated from median of trusted addresses - triggered due to an exception\\n        TRUSTED_ADDRESSES_EXCEPTION,\\n        // previous price copied - triggered due to an exception\\n        PREVIOUS_PRICE_COPIED_EXCEPTION\\n    }\\n\\n    event PriceRevealed(\\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 timestamp,\\n        uint256 votePowerNat, uint256 votePowerAsset\\n    );\\n\\n    event PriceFinalized(\\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \\n        PriceFinalizationType finalizationType, uint256 timestamp\\n    );\\n\\n    event PriceEpochInitializedOnFtso(\\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\\n    );\\n\\n    event LowTurnout(\\n        uint256 indexed epochId,\\n        uint256 natTurnout,\\n        uint256 lowNatTurnoutThresholdBIPS,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Returns if FTSO is active\\n     */\\n    function active() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the FTSO symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns current epoch id\\n     */\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\\n     * @param _timestamp            Timestamp as seconds from unix epoch\\n     */\\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\\n    \\n    /**\\n     * @notice Returns random number of the specified epoch\\n     * @param _epochId              Id of the epoch\\n     */\\n    function getRandom(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns asset price consented in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _epochId                 Current epoch id\\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\\n     * @return _votePowerBlock          Vote power block for the current epoch\\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\\n     * @dev half-closed intervals - end time not included\\n     */\\n    function getPriceEpochData() external view returns (\\n        uint256 _epochId,\\n        uint256 _epochSubmitEndTime,\\n        uint256 _epochRevealEndTime,\\n        uint256 _votePowerBlock,\\n        bool _fallbackMode\\n    );\\n\\n    /**\\n     * @notice Returns current epoch data\\n     * @return _firstEpochStartTs           First epoch start timestamp\\n     * @return _submitPeriodSeconds         Submit period in seconds\\n     * @return _revealPeriodSeconds         Reveal period in seconds\\n     */\\n    function getPriceEpochConfiguration() external view returns (\\n        uint256 _firstEpochStartTs,\\n        uint256 _submitPeriodSeconds,\\n        uint256 _revealPeriodSeconds\\n    );\\n    \\n    /**\\n     * @notice Returns asset price submitted by voter in specific epoch\\n     * @param _epochId              Id of the epoch\\n     * @param _voter                Address of the voter\\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     */\\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns current asset price\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimals() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n    \\n    /**\\n     * @notice Returns current asset price calculated from trusted providers\\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp           Time when price was updated for the last time\\n     */\\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\\n\\n    /**\\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _timestamp               Time when price was updated for the last time\\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\\n     */\\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\\n        uint256 _price,\\n        uint256 _timestamp,\\n        uint256 _assetPriceUsdDecimals\\n    );\\n\\n    /**\\n     * @notice Returns current asset price details\\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\\n     * @return _priceTimestamp                          Time when price was updated for the last time\\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\\n     */\\n    function getCurrentPriceDetails() external view returns (\\n        uint256 _price,\\n        uint256 _priceTimestamp,\\n        PriceFinalizationType _priceFinalizationType,\\n        uint256 _lastPriceEpochFinalizationTimestamp,\\n        PriceFinalizationType _lastPriceEpochFinalizationType\\n    );\\n\\n    /**\\n     * @notice Returns current random number\\n     */\\n    function getCurrentRandom() external view returns (uint256);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IICleanable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IICleanable {\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n    \\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\\n     * history before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be before current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n    \\n    /**\\n     * Get the current cleanup block number.\\n     */\\n    function cleanupBlockNumber() external view returns (uint256);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../../infrastructure/userInterfaces/IPChainStakeMirror.sol\\\";\\nimport \\\"../../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\n\\n/**\\n * Internal interface for contracts delegating their governance vote power.\\n */\\ninterface IIGovernanceVotePower is IGovernanceVotePower {\\n    /**\\n     * Emitted when a delegate's vote power changes, as a result of a new delegation\\n     * or a token transfer, for example.\\n     *\\n     * The event is always emitted from a `GovernanceVotePower` contract.\\n     * @param delegate The account receiving the changing delegated vote power.\\n     * @param previousBalance Delegated vote power before the change.\\n     * @param newBalance Delegated vote power after the change.\\n     */\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * Emitted when an account starts delegating vote power or switches its delegation\\n     * to another address.\\n     *\\n     * The event is always emitted from a `GovernanceVotePower` contract.\\n     * @param delegator Account delegating its vote power.\\n     * @param fromDelegate Account receiving the delegation before the change.\\n     * Can be address(0) if there was no previous delegation.\\n     * @param toDelegate Account receiving the delegation after the change.\\n     * Can be address(0) if `delegator` just undelegated all its vote power.\\n     */\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /**\\n     * Update governance vote power of all involved delegates after tokens are transferred.\\n     *\\n     * This function **MUST** be called after each governance token transfer for the\\n     * delegates to reflect the correct balance.\\n     * @param _from Source address of the transfer.\\n     * @param _to Destination address of the transfer.\\n     * @param _fromBalance _Ignored._\\n     * @param _toBalance _Ignored._\\n     * @param _amount Amount being transferred.\\n     */\\n    function updateAtTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * Set the cleanup block number.\\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased.\\n     * History before that block should never be used since it can be inconsistent.\\n     * In particular, cleanup block number must be lower than the current vote power block.\\n     * @param _blockNumber The new cleanup block number.\\n     */\\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\\n\\n    /**\\n     * Set the contract that is allowed to call history cleaning methods.\\n     * @param _cleanerContract Address of the cleanup contract.\\n     * Usually this will be an instance of `CleanupBlockNumberManager`.\\n     */\\n    function setCleanerContract(address _cleanerContract) external;\\n\\n    /**\\n     * Get the token that this governance vote power contract belongs to.\\n     * @return The IVPToken interface owning this contract.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n\\n    /**\\n     * Get the stake mirror contract that this governance vote power contract belongs to.\\n     * @return The IPChainStakeMirror interface owning this contract.\\n     */\\n    function pChainStakeMirror() external view returns (IPChainStakeMirror);\\n\\n    /**\\n     * Get the current cleanup block number set with `setCleanupBlockNumber()`.\\n     * @return The currently set cleanup block number.\\n     */\\n    function getCleanupBlockNumber() external view returns(uint256);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport \\\"../../userInterfaces/IVPToken.sol\\\";\\nimport \\\"../../userInterfaces/IVPContractEvents.sol\\\";\\nimport \\\"./IICleanable.sol\\\";\\n\\ninterface IIVPContract is IICleanable, IVPContractEvents {\\n    /**\\n     * Update vote powers when tokens are transfered.\\n     * Also update delegated vote powers for percentage delegation\\n     * and check for enough funds for explicit delegations.\\n     **/\\n    function updateAtTokenTransfer(\\n        address _from, \\n        address _to, \\n        uint256 _fromBalance,\\n        uint256 _toBalance,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cumulative - every call resets the delegation value (and value of 0 revokes delegation).\\n     **/\\n    function delegate(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint256 _bips\\n    ) external;\\n    \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _from The address of the delegator\\n     * @param _to The address of the recipient\\n     * @param _balance The delegator's current balance\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(\\n        address _from, \\n        address _to, \\n        uint256 _balance, \\n        uint _amount\\n    ) external;    \\n\\n    /**\\n     * @notice Revoke all delegation from sender to `_who` at given block. \\n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n     *    Block `_blockNumber` must be in the past. \\n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n     * @param _from The address of the delegator\\n     * @param _who Address of the delegatee\\n     * @param _balance The delegator's current balance\\n     * @param _blockNumber The block number at which to revoke delegation.\\n     **/\\n    function revokeDelegationAt(\\n        address _from, \\n        address _who, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external;\\n    \\n        /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     **/\\n    function undelegateAll(\\n        address _from,\\n        uint256 _balance\\n    ) external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _from The address of the delegator\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(\\n        address _from, \\n        address[] memory _delegateAddresses\\n    ) external returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    *   Reads/updates cache and upholds revocations.\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\\n    \\n    /**\\n     * @notice Get the current vote power of `_who`.\\n     * @param _who The address to get voting power.\\n     * @return Current vote power of `_who`.\\n     */\\n    function votePowerOf(address _who) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `_who` at block `_blockNumber`, ignoring revocation information (and cache).\\n    * @param _who The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_who` at `_blockNumber`. Result doesn't change if vote power is revoked.\\n    */\\n    function votePowerOfAtIgnoringRevocation(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several addresses in a batch.\\n     * @param _owners The list of addresses to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */    \\n    function batchVotePowerOfAt(\\n        address[] memory _owners, \\n        uint256 _blockNumber\\n    )\\n        external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(\\n        address _from, \\n        address _to, \\n        uint256 _balance\\n    ) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _balance The delegator's current balance\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(\\n        address _from, \\n        address _to, \\n        uint256 _balance,\\n        uint _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _balance Owner's current balance\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(\\n        address _owner,\\n        uint256 _balance\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(\\n        address _owner, \\n        uint256 _balance,\\n        uint256 _blockNumber\\n    ) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value.\\n     * @param _who The address to get delegation mode.\\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\\n     */\\n    function delegationModeOf(address _who) external view returns (uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `_delegateAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(\\n        address _owner\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\\n    * @param _owner The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips,\\n            uint256 _count,\\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * The VPToken (or some other contract) that owns this VPContract.\\n     * All state changing methods may be called only from this address.\\n     * This is because original msg.sender is sent in `_from` parameter\\n     * and we must be sure that it cannot be faked by directly calling VPContract.\\n     * Owner token is also used in case of replacement to recover vote powers from balances.\\n     */\\n    function ownerToken() external view returns (IVPToken);\\n    \\n    /**\\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\\n     * It means that vote powers are not necessarily correct at the initialization, therefore\\n     * every method that reads vote power must check whether it is initialized for that address and block.\\n     */\\n    function isReplacement() external view returns (bool);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/governance/userInterfaces/IGovernanceVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * Interface for contracts delegating their governance vote power.\\n */\\ninterface IGovernanceVotePower {\\n    /**\\n     * Delegates all governance vote power of `msg.sender` to address `_to`.\\n     * @param _to The address of the recipient.\\n     */\\n    function delegate(address _to) external;\\n\\n    /**\\n     * Undelegates all governance vote power of `msg.sender`.\\n     */\\n    function undelegate() external;\\n\\n    /**\\n     * Gets the governance vote power of an address at a given block number, including\\n     * all delegations made to it.\\n     * @param _who The address being queried.\\n     * @param _blockNumber The block number at which to fetch the vote power.\\n     * @return Governance vote power of `_who` at `_blockNumber`.\\n     */\\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Gets the governance vote power of an address at the latest block, including\\n     * all delegations made to it.\\n     * @param _who The address being queried.\\n     * @return Governance vote power of `account` at the lastest block.\\n     */\\n    function getVotes(address _who) external view returns (uint256);\\n\\n    /**\\n     * Gets the address an account is delegating its governance vote power to, at a given block number.\\n     * @param _who The address being queried.\\n     * @param _blockNumber The block number at which to fetch the address.\\n     * @return Address where `_who` was delegating its governance vote power at block `_blockNumber`.\\n     */\\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\\n\\n    /**\\n     * Gets the address an account is delegating its governance vote power to, at the latest block number.\\n     * @param _who The address being queried.\\n     * @return Address where `_who` is currently delegating its governance vote power.\\n     */\\n    function getDelegateOfAtNow(address _who) external view returns (address);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../governance/userInterfaces/IGovernanceVotePower.sol\\\";\\nimport \\\"./IVPContractEvents.sol\\\";\\n\\ninterface IVPToken is IERC20 {\\n    /**\\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/\\n    function delegate(address _to, uint256 _bips) external;\\n    \\n    /**\\n     * @notice Undelegate all percentage delegations from the sender and then delegate corresponding \\n     *   `_bips` percentage of voting power from the sender to each member of `_delegatees`.\\n     * @param _delegatees The addresses of the new recipients.\\n     * @param _bips The percentages of voting power to be delegated expressed in basis points (1/100 of one percent).\\n     *   Total of all `_bips` values must be at most 10000.\\n     **/\\n    function batchDelegate(address[] memory _delegatees, uint256[] memory _bips) external;\\n        \\n    /**\\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\\n     * @param _to The address of the recipient\\n     * @param _amount An explicit vote power amount to be delegated.\\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\\n     **/    \\n    function delegateExplicit(address _to, uint _amount) external;\\n\\n    /**\\n    * @notice Revoke all delegation from sender to `_who` at given block. \\n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\\n    *    Block `_blockNumber` must be in the past. \\n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\\n    * @param _who Address of the delegatee\\n    * @param _blockNumber The block number at which to revoke delegation.\\n    */\\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\\n    \\n    /**\\n     * @notice Undelegate all voting power for delegates of `msg.sender`\\n     *    Can only be used with percentage delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     **/\\n    function undelegateAll() external;\\n    \\n    /**\\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\\n     *    Can only be used with explicit delegation.\\n     *    Does not reset delegation mode back to NOTSET.\\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \\n     *   so the caller must supply them.\\n     * @return The amount still delegated (in case the list of delegates was incomplete).\\n     */\\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\\n\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Should be compatible with ERC20 method\\n     */\\n    function decimals() external view returns (uint8);\\n    \\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n\\n    \\n    /**\\n     * @notice Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the current vote power of `_owner`.\\n     * @param _owner The address to get voting power.\\n     * @return Current vote power of `_owner`.\\n     */\\n    function votePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * @notice Get the vote power of `_owner` at block `_blockNumber`, ignoring revocation information (and cache).\\n    * @param _owner The address to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`. Result doesn't change if vote power is revoked.\\n    */\\n    function votePowerOfAtIgnoringRevocation(address _owner, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \\n     *  it never changes, even if all delegations are removed.\\n     * @param _who The address to get delegation mode.\\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\\n     */\\n    function delegationModeOf(address _who) external view returns(uint256);\\n        \\n    /**\\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\\n    * @param _from Address of delegator\\n    * @param _to Address of delegatee\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The delegated vote power.\\n    */\\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\\n    \\n    /**\\n     * @notice Compute the current undelegated vote power of `_owner`\\n     * @param _owner The address to get undelegated voting power.\\n     * @return The unallocated vote power of `_owner`\\n     */\\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\\n    \\n    /**\\n     * @notice Get the undelegated vote power of `_owner` at given block.\\n     * @param _owner The address to get undelegated voting power.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\\n     */\\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\\n    \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOf(address _who)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses,\\n            uint256[] memory _bips,\\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n        \\n    /**\\n    * @notice Get the vote power delegation `delegationAddresses` \\n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\\n    * @param _who The address to get delegations.\\n    * @param _blockNumber The block for which we want to know the delegations.\\n    * @return _delegateAddresses Positional array of delegation addresses.\\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\\n    * @return _count The number of delegates.\\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\\n    */\\n    function delegatesOfAt(address _who, uint256 _blockNumber)\\n        external view \\n        returns (\\n            address[] memory _delegateAddresses, \\n            uint256[] memory _bips, \\n            uint256 _count, \\n            uint256 _delegationMode\\n        );\\n\\n    /**\\n     * Returns VPContract used for readonly operations (view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before).\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Revoke` only).\\n     */\\n    function readVotePowerContract() external view returns (IVPContractEvents);\\n\\n    /**\\n     * Returns VPContract used for state changing operations (non-view methods).\\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\\n     *\\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\\n     * except during upgrade from one VPContract to a new version (which should happen\\n     * rarely or never and will be anounced before). In the case of upgrade,\\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\\n     *\\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\\n     * via VPToken (and state changing methods are forbidden from direct calls). \\n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\\n     * for listening to events (`Delegate` and `Revoke` only).\\n     */\\n    function writeVotePowerContract() external view returns (IVPContractEvents);\\n    \\n    /**\\n     * When set, allows token owners to participate in governance voting\\n     * and delegate governance vote power.\\n     */\\n    function governanceVotePower() external view returns (IGovernanceVotePower);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\ninterface IVPContractEvents {\\n    /**\\n     * Event triggered when an account delegates or undelegates another account. \\n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * For undelegation, `newVotePower` is 0.\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\\n     */\\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\\n    \\n    /**\\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\\n     * for a single block in the past (typically the current vote block).\\n     *\\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\\n     */\\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirror.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\nimport \\\"./IPChainVotePower.sol\\\";\\nimport \\\"./IPChainStakeMirrorVerifier.sol\\\";\\n\\n\\n/**\\n * Interface for the `PChainStakeMirror` contract.\\n */\\ninterface IPChainStakeMirror is IPChainVotePower {\\n\\n    /**\\n     * Event emitted when max updates per block is set.\\n     * @param maxUpdatesPerBlock new number of max updated per block\\n     */\\n    event MaxUpdatesPerBlockSet(uint256 maxUpdatesPerBlock);\\n\\n    /**\\n     * Event emitted when the stake is confirmed.\\n     * @param owner The address who opened the stake.\\n     * @param nodeId Node id to which the stake was added.\\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\\n     * @param amountWei Stake amount (in wei).\\n     * @param pChainTxId P-chain transaction id.\\n     */\\n    event StakeConfirmed(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        bytes32 indexed txHash,\\n        uint256 amountWei,\\n        bytes32 pChainTxId\\n    );\\n\\n    /**\\n     * Event emitted when the stake has ended.\\n     * @param owner The address whose stake has ended.\\n     * @param nodeId Node id from which the stake was removed.\\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\\n     * @param amountWei Stake amount (in wei).\\n     */\\n    event StakeEnded(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        bytes32 indexed txHash,\\n        uint256 amountWei\\n    );\\n\\n    /**\\n     * Event emitted when the stake was revoked.\\n     * @param owner The address whose stake has ended.\\n     * @param nodeId Node id from which the stake was removed.\\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\\n     * @param amountWei Stake amount (in wei).\\n     */\\n    event StakeRevoked(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        bytes32 indexed txHash,\\n        uint256 amountWei\\n    );\\n\\n    /**\\n     * Method for P-chain stake mirroring using `PChainStake` data and Merkle proof.\\n     * @param _stakeData Information about P-chain stake.\\n     * @param _merkleProof Merkle proof that should be used to prove the P-chain stake.\\n     */\\n    function mirrorStake(\\n        IPChainStakeMirrorVerifier.PChainStake calldata _stakeData,\\n        bytes32[] calldata _merkleProof\\n    )\\n        external;\\n\\n    /**\\n     * Method for checking if active stake (stake start time <= block.timestamp < stake end time) was already mirrored.\\n     * @param _txId P-chain stake transaction id.\\n     * @param _inputAddress P-chain address that opened stake.\\n     * @return True if stake is active and mirrored.\\n     */\\n    function isActiveStakeMirrored(bytes32 _txId, bytes20 _inputAddress) external view returns(bool);\\n\\n    /**\\n     * Total amount of tokens at current block.\\n     * @return The current total amount of tokens.\\n     **/\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried.\\n     * @return The total amount of tokens at `_blockNumber`.\\n     **/\\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Queries the token balance of `_owner` at current block.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @return The current balance.\\n     **/\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /**\\n     * Queries the token balance of `_owner` at a specific `_blockNumber`.\\n     * @param _owner The address from which the balance will be retrieved.\\n     * @param _blockNumber The block number when the balance is queried.\\n     * @return The balance at `_blockNumber`.\\n     **/\\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirrorVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\n/**\\n * Interface with structure for P-chain stake mirror verifications.\\n */\\ninterface IPChainStakeMirrorVerifier {\\n\\n    /**\\n     * Structure describing the P-chain stake.\\n     */\\n    struct PChainStake {\\n        // Hash of the transaction on the underlying chain.\\n        bytes32 txId;\\n        // Type of the staking/delegation transaction: '0' for 'ADD_VALIDATOR_TX' and '1' for 'ADD_DELEGATOR_TX'.\\n        uint8 stakingType;\\n        // Input address that triggered the staking or delegation transaction.\\n        // See https://support.avax.network/en/articles/4596397-what-is-an-address for address definition for P-chain.\\n        bytes20 inputAddress;\\n        // NodeID to which staking or delegation is done.\\n        // For definitions, see https://github.com/ava-labs/avalanchego/blob/master/ids/node_id.go.\\n        bytes20 nodeId;\\n        // Start time of the staking/delegation in seconds (Unix epoch).\\n        uint64 startTime;\\n        // End time of the staking/delegation in seconds (Unix epoch).\\n        uint64 endTime;\\n        // Staked or delegated amount in Gwei (nano FLR).\\n        uint64 weight;\\n    }\\n}\\n\"},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainVotePower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * Interface for the vote power part of the `PChainStakeMirror` contract.\\n */\\ninterface IPChainVotePower {\\n\\n    /**\\n     * Event triggered when a stake is confirmed or at the time it ends.\\n     * Definition: `votePowerFromTo(owner, nodeId)` is `changed` from `priorVotePower` to `newVotePower`.\\n     * @param owner The account that has changed the amount of vote power it is staking.\\n     * @param nodeId The node id whose received vote power has changed.\\n     * @param priorVotePower The vote power originally on that node id.\\n     * @param newVotePower The new vote power that triggered this event.\\n     */\\n    event VotePowerChanged(\\n        address indexed owner,\\n        bytes20 indexed nodeId,\\n        uint256 priorVotePower,\\n        uint256 newVotePower\\n    );\\n\\n    /**\\n     * Emitted when a vote power cache entry is created.\\n     * Allows history cleaners to track vote power cache cleanup opportunities off-chain.\\n     * @param nodeId The node id whose vote power has just been cached.\\n     * @param blockNumber The block number at which the vote power has been cached.\\n     */\\n    event VotePowerCacheCreated(bytes20 nodeId, uint256 blockNumber);\\n\\n    /**\\n    * Get the vote power of `_owner` at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.\\n    * @param _owner The node id to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_owner` at `_blockNumber`.\\n    */\\n    function votePowerOfAtCached(bytes20 _owner, uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n    * Get the total vote power at block `_blockNumber` using cache.\\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\\n\\n    /**\\n     * Get the current total vote power.\\n     * @return The current total vote power (sum of all accounts' vote powers).\\n     */\\n    function totalVotePower() external view returns(uint256);\\n\\n    /**\\n    * Get the total vote power at block `_blockNumber`\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\\n    */\\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Get the amounts and node ids being staked to by a vote power owner.\\n     * @param _owner The address being queried.\\n     * @return _nodeIds Array of node ids.\\n     * @return _amounts Array of staked amounts, for each node id.\\n     */\\n    function stakesOf(address _owner)\\n        external view\\n        returns (\\n            bytes20[] memory _nodeIds,\\n            uint256[] memory _amounts\\n        );\\n\\n    /**\\n     * Get the amounts and node ids being staked to by a vote power owner,\\n     * at a given block.\\n     * @param _owner The address being queried.\\n     * @param _blockNumber The block number being queried.\\n     * @return _nodeIds Array of node ids.\\n     * @return _amounts Array of staked amounts, for each node id.\\n     */\\n    function stakesOfAt(\\n        address _owner,\\n        uint256 _blockNumber\\n    )\\n        external view\\n        returns (\\n            bytes20[] memory _nodeIds,\\n            uint256[] memory _amounts\\n        );\\n\\n    /**\\n     * Get the current vote power of `_nodeId`.\\n     * @param _nodeId The node id to get voting power.\\n     * @return Current vote power of `_nodeId`.\\n     */\\n    function votePowerOf(bytes20 _nodeId) external view returns(uint256);\\n\\n    /**\\n    * Get the vote power of `_nodeId` at block `_blockNumber`\\n    * @param _nodeId The node id to get voting power.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return Vote power of `_nodeId` at `_blockNumber`.\\n    */\\n    function votePowerOfAt(bytes20 _nodeId, uint256 _blockNumber) external view returns(uint256);\\n\\n    /**\\n    * Get current staked vote power from `_owner` staked to `_nodeId`.\\n    * @param _owner Address of vote power owner.\\n    * @param _nodeId Node id.\\n    * @return The staked vote power.\\n    */\\n    function votePowerFromTo(address _owner, bytes20 _nodeId) external view returns(uint256);\\n\\n    /**\\n    * Get current staked vote power from `_owner` staked to `_nodeId` at `_blockNumber`.\\n    * @param _owner Address of vote power owner.\\n    * @param _nodeId Node id.\\n    * @param _blockNumber The block number at which to fetch.\\n    * @return The staked vote power.\\n    */\\n    function votePowerFromToAt(address _owner, bytes20 _nodeId, uint _blockNumber) external view returns(uint256);\\n\\n    /**\\n     * Return vote powers for several node ids in a batch.\\n     * @param _nodeIds The list of node ids to fetch vote power of.\\n     * @param _blockNumber The block number at which to fetch.\\n     * @return A list of vote powers.\\n     */\\n    function batchVotePowerOfAt(\\n        bytes20[] memory _nodeIds,\\n        uint256 _blockNumber\\n    ) external view returns(uint256[] memory);\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[],\"evmVersion\":\"london\"}}",
	"name": "SimplePool",
	"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract WBTCReserve\",\"name\":\"_wBTCReserve\",\"type\":\"address\"},{\"internalType\":\"contract USDCReserve\",\"name\":\"_usdcReserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetsPrice\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reserveAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSupplyedBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getwBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimplePool.sol\":\"SimplePool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@flarenetwork/flare-periphery-contracts/flare/ftso/ftso/interface/IIFtso.sol\":{\"keccak256\":\"0xd245b3c083496b3539224dc707381db5a5e8a49a5012d370b34514caefa3415d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bfe225cca2e036b4c9e460e9fd7c3f568e9574d879f81c038309563987e2348\",\"dweb:/ipfs/QmUeLdoDMG7eyQSHzaHqXwVpEYB4Nd3FpvoDjpXckDs1dq\"]},\"@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoGenesis.sol\":{\"keccak256\":\"0xd015bc43b8a22afaba50c42a56409df0d81172845dabc124a3d37b3b0bbd4df5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc305f048820c05956ec05fa246ec9070f9d813b43935356e7fe35969f49fc02\",\"dweb:/ipfs/QmaUJ42ZFzcRgy6GQtstkXMk9UgL5ERZx2V9HueXApgWBW\"]},\"@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoRegistryGenesis.sol\":{\"keccak256\":\"0x4765fdcb22dcc64c015d02c019f0ddce8d8b36111160fd4160a3d94ea4f370a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0baa5b9b24e3049bcf8de78d5dbdb778d53f5585fbe479550bfdcef2ed676257\",\"dweb:/ipfs/Qmd8Eby81zX1YptGo5E2zAraTFo2NGLRCL9XuyU7YSsaqG\"]},\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtso.sol\":{\"keccak256\":\"0xfae54442fb489dccc5f0a0a6f8d946c9fdebceece98fcb087c5998fa1363ff30\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53d8b87f403e7d868ed832f8cb965a440c8c32d20699a07f0a3f7bb2abeff2b5\",\"dweb:/ipfs/QmTYEoSzDJyhiJyY2AhnirXD6F737mzSVbqbnr6g4Fa7kT\"]},\"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\":{\"keccak256\":\"0x2b818c0cd8f2f1be88da36edd966d2b358c6954e50e0aa653a9d65ef2e9712d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07258af95b9556c024aaab2e2ff83955c56f255f82a024ed190f19947087682d\",\"dweb:/ipfs/QmeRKq6cYMau8VdLkEJw3xE6eK19Hz5DvzLEzUk1ZnVJxh\"]},\"@flarenetwork/flare-periphery-contracts/flare/governance/userInterfaces/IGovernanceVotePower.sol\":{\"keccak256\":\"0xac45cb04eedb4f19533df4867eb6cd50874a55ef04d73f4d2dc3d3b7d3927e3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12c190c019723041417c6f06c932a0719b837023d4fb42090d4bb6f820331132\",\"dweb:/ipfs/QmfAsGCz2FgYvearhCHLqJHkd4MMiSpZ8JkUUY5hNBU2oA\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirror.sol\":{\"keccak256\":\"0x8c70a1ae9079bb9d29c8e2dde781f546b6cb621f0b7cc943b9cbcbd52718bb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b4e89abe97c65481a1cacb59abcde6d18b127a89ed46f99402c30c6477ea0722\",\"dweb:/ipfs/Qmd6i71hUPHR11U1U8EvDwJyEg4xUZhLbDe7D4Z7LLrAZx\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirrorVerifier.sol\":{\"keccak256\":\"0x1a1d0a1302b59249f9d2ca2700bb9759bc66bae73fe1c920cf4c20ac75b475fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7155abcad1dee722dbfad7bbdcf68608d9c9bddc0cb367897ce9ecc0185f7ff1\",\"dweb:/ipfs/Qmckp3mGWvBjQxeiGQAMQyeq3EK4tJmtMmj9EHZjzVXMQH\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainVotePower.sol\":{\"keccak256\":\"0x23e31ef2ab9227795930728dc240fbe59f31f1b05e595ee137acc1e5e6e8497e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aecec4b505b6ea3963e78b39a6131b4562b908c24cfea9a674559dde23af72fe\",\"dweb:/ipfs/QmQmK8aAzcSYUCkvcZcXRNVybermZ6CEqjSXbS99gpytLa\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IICleanable.sol\":{\"keccak256\":\"0x3ccc1532d642c3feff5b282a7c8901e2582844c1559acd1bd671afcb3aabaaef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ff8edad3b7387bd54dbfa4975b51601d9a020fd1fb7baf1a9ce98888ff3cab6\",\"dweb:/ipfs/QmdsSTUMZmkc898q5LqWFt3M3gy9yrbqReMJes78WngJc7\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIGovernanceVotePower.sol\":{\"keccak256\":\"0x5388cd6705f08a9d7a82be3d4c1aea3266df20eb5263b9f5ecf95e73338dc595\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c7a9b55b0d6dd4d053d702f897ea5272695006ae0ca25f3b3a1ccbf4e604fd9\",\"dweb:/ipfs/QmP1HtdwBY9ZJvDAQTEDZzCNBTrS2Rdk7QRy3An6PLMjd5\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPContract.sol\":{\"keccak256\":\"0x6eb8619a51e0e00a93b32055e4f43d64f050b129e31bf0e161584d79cfbc5dc7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab5b8f39e1cb4f5a861e6468b4340ee57272d329488340fac71418e8c9936984\",\"dweb:/ipfs/QmdKDZkCAEjMeL233hsFTvGLG6rZzn6XVNnopKLV2iz4g8\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPToken.sol\":{\"keccak256\":\"0x49a647d1e8c394320c337b09f14b0ca70f43b0a1327233ddd9b8dcf7f005f92e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb712e00e5801b8f1a1d2c05d4e46556bac15e227df7e21cd5c80ad1cc16192d\",\"dweb:/ipfs/QmUAGmvn65u4R165gPMbNoJwVFicCtAC2Ce6Y3f8PpTbTw\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPContractEvents.sol\":{\"keccak256\":\"0x651a2ff1d5c179b87259f564d02877ae496b236bd48f4813a4d815c25e2407cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b68d9f9bfeeffa03a6d3f6c14a2633759f3739486e06e3daf03be60c6f9bbce7\",\"dweb:/ipfs/QmWJrZF5UYPXQaSKVeP4iJUZj4jhDqmmMopxU8K3KdvJe9\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPToken.sol\":{\"keccak256\":\"0x5f9c189f84f8477b11db5b520229022d4f46097e1f8fd20888ff1d29b5908c4c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://adb577d85a4c6bcc501bc17efb9f0f8fd92c660dc7af497cedca0fb45ad3c682\",\"dweb:/ipfs/QmdzpS3U9KRtF7qHcBJk9qna72BDQaYZwcyGZs6UNfU1uE\"]},\"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"keccak256\":\"0x358aa3eced2172a3c252cd0c5efeb2572969ac6b64001f62facf185193668cea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8627e9e0dca5664cc7f5c9db39a602bd17ae4a2d698a0fb13b274a9474804d31\",\"dweb:/ipfs/QmRNVH3EaykbgjVntcCf2bHWyXWvoL4gEKkdMiXGJdjD2R\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"contracts/SimplePool.sol\":{\"keccak256\":\"0x226b59014cadc5ea985d0fa847c8fb2ed11be9c82015458736bd5911d073fb33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b85b8c72f78940a5cbfcc136fc39838f04597b71046b3db93ffabf9c73ad519\",\"dweb:/ipfs/QmbUnB37MVoh1R9gSLRExD1DXJH8y9d5q3b8Y3VSWhh8Vb\"]},\"contracts/USDCReserve.sol\":{\"keccak256\":\"0x800a0d1be3c255372853602e12484818bd203f00cb192e69f2294b32f9320d90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db768c415e20ffb91d8b5a0042195d5338affa6d3121f65fe3a6e2b717b57f43\",\"dweb:/ipfs/QmQ8eU1485U85BuUUU6J5xjWQVBdpykHdY3ofxhPBzp3mr\"]},\"contracts/WBTCReserve.sol\":{\"keccak256\":\"0xdc09a02762537a74145a2e5031a59a0008700df7f470ef8ef675a42d9811d090\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76d3d7f22e8f6063aeb3b7344144081895b25eeb198a7b03b2a99f84d9187c0b\",\"dweb:/ipfs/QmPNrDpCfQPpvaFCjwvmTLVW3eVJbMXBh9gNXS2QfMd8Jk\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_1710": {
				"entryPoint": null,
				"id": 1710,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"abi_decode_t_address_fromMemory": {
				"entryPoint": 573,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_contract$_USDCReserve_$2139_fromMemory": {
				"entryPoint": 524,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_contract$_WBTCReserve_$2312_fromMemory": {
				"entryPoint": 455,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_contract$_WBTCReserve_$2312t_contract$_USDCReserve_$2139t_addresst_address_fromMemory": {
				"entryPoint": 596,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 4
			},
			"allocate_unbounded": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"cleanup_t_address": {
				"entryPoint": 389,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_contract$_USDCReserve_$2139": {
				"entryPoint": 478,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_contract$_WBTCReserve_$2312": {
				"entryPoint": 409,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 357,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 352,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 547,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_contract$_USDCReserve_$2139": {
				"entryPoint": 498,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_contract$_WBTCReserve_$2312": {
				"entryPoint": 429,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:2706:20",
					"nodeType": "YulBlock",
					"src": "0:2706:20",
					"statements": [
						{
							"body": {
								"nativeSrc": "47:35:20",
								"nodeType": "YulBlock",
								"src": "47:35:20",
								"statements": [
									{
										"nativeSrc": "57:19:20",
										"nodeType": "YulAssignment",
										"src": "57:19:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "73:2:20",
													"nodeType": "YulLiteral",
													"src": "73:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "67:5:20",
												"nodeType": "YulIdentifier",
												"src": "67:5:20"
											},
											"nativeSrc": "67:9:20",
											"nodeType": "YulFunctionCall",
											"src": "67:9:20"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nativeSrc": "57:6:20",
												"nodeType": "YulIdentifier",
												"src": "57:6:20"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nativeSrc": "7:75:20",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nativeSrc": "40:6:20",
									"nodeType": "YulTypedName",
									"src": "40:6:20",
									"type": ""
								}
							],
							"src": "7:75:20"
						},
						{
							"body": {
								"nativeSrc": "177:28:20",
								"nodeType": "YulBlock",
								"src": "177:28:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "194:1:20",
													"nodeType": "YulLiteral",
													"src": "194:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "197:1:20",
													"nodeType": "YulLiteral",
													"src": "197:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "187:6:20",
												"nodeType": "YulIdentifier",
												"src": "187:6:20"
											},
											"nativeSrc": "187:12:20",
											"nodeType": "YulFunctionCall",
											"src": "187:12:20"
										},
										"nativeSrc": "187:12:20",
										"nodeType": "YulExpressionStatement",
										"src": "187:12:20"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nativeSrc": "88:117:20",
							"nodeType": "YulFunctionDefinition",
							"src": "88:117:20"
						},
						{
							"body": {
								"nativeSrc": "300:28:20",
								"nodeType": "YulBlock",
								"src": "300:28:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "317:1:20",
													"nodeType": "YulLiteral",
													"src": "317:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "320:1:20",
													"nodeType": "YulLiteral",
													"src": "320:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "310:6:20",
												"nodeType": "YulIdentifier",
												"src": "310:6:20"
											},
											"nativeSrc": "310:12:20",
											"nodeType": "YulFunctionCall",
											"src": "310:12:20"
										},
										"nativeSrc": "310:12:20",
										"nodeType": "YulExpressionStatement",
										"src": "310:12:20"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nativeSrc": "211:117:20",
							"nodeType": "YulFunctionDefinition",
							"src": "211:117:20"
						},
						{
							"body": {
								"nativeSrc": "379:81:20",
								"nodeType": "YulBlock",
								"src": "379:81:20",
								"statements": [
									{
										"nativeSrc": "389:65:20",
										"nodeType": "YulAssignment",
										"src": "389:65:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "404:5:20",
													"nodeType": "YulIdentifier",
													"src": "404:5:20"
												},
												{
													"kind": "number",
													"nativeSrc": "411:42:20",
													"nodeType": "YulLiteral",
													"src": "411:42:20",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "400:3:20",
												"nodeType": "YulIdentifier",
												"src": "400:3:20"
											},
											"nativeSrc": "400:54:20",
											"nodeType": "YulFunctionCall",
											"src": "400:54:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "389:7:20",
												"nodeType": "YulIdentifier",
												"src": "389:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nativeSrc": "334:126:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "361:5:20",
									"nodeType": "YulTypedName",
									"src": "361:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "371:7:20",
									"nodeType": "YulTypedName",
									"src": "371:7:20",
									"type": ""
								}
							],
							"src": "334:126:20"
						},
						{
							"body": {
								"nativeSrc": "511:51:20",
								"nodeType": "YulBlock",
								"src": "511:51:20",
								"statements": [
									{
										"nativeSrc": "521:35:20",
										"nodeType": "YulAssignment",
										"src": "521:35:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "550:5:20",
													"nodeType": "YulIdentifier",
													"src": "550:5:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "532:17:20",
												"nodeType": "YulIdentifier",
												"src": "532:17:20"
											},
											"nativeSrc": "532:24:20",
											"nodeType": "YulFunctionCall",
											"src": "532:24:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "521:7:20",
												"nodeType": "YulIdentifier",
												"src": "521:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nativeSrc": "466:96:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "493:5:20",
									"nodeType": "YulTypedName",
									"src": "493:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "503:7:20",
									"nodeType": "YulTypedName",
									"src": "503:7:20",
									"type": ""
								}
							],
							"src": "466:96:20"
						},
						{
							"body": {
								"nativeSrc": "633:51:20",
								"nodeType": "YulBlock",
								"src": "633:51:20",
								"statements": [
									{
										"nativeSrc": "643:35:20",
										"nodeType": "YulAssignment",
										"src": "643:35:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "672:5:20",
													"nodeType": "YulIdentifier",
													"src": "672:5:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_address",
												"nativeSrc": "654:17:20",
												"nodeType": "YulIdentifier",
												"src": "654:17:20"
											},
											"nativeSrc": "654:24:20",
											"nodeType": "YulFunctionCall",
											"src": "654:24:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "643:7:20",
												"nodeType": "YulIdentifier",
												"src": "643:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_contract$_WBTCReserve_$2312",
							"nativeSrc": "568:116:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "615:5:20",
									"nodeType": "YulTypedName",
									"src": "615:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "625:7:20",
									"nodeType": "YulTypedName",
									"src": "625:7:20",
									"type": ""
								}
							],
							"src": "568:116:20"
						},
						{
							"body": {
								"nativeSrc": "753:99:20",
								"nodeType": "YulBlock",
								"src": "753:99:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "830:16:20",
											"nodeType": "YulBlock",
											"src": "830:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "839:1:20",
																"nodeType": "YulLiteral",
																"src": "839:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "842:1:20",
																"nodeType": "YulLiteral",
																"src": "842:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "832:6:20",
															"nodeType": "YulIdentifier",
															"src": "832:6:20"
														},
														"nativeSrc": "832:12:20",
														"nodeType": "YulFunctionCall",
														"src": "832:12:20"
													},
													"nativeSrc": "832:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "832:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "776:5:20",
															"nodeType": "YulIdentifier",
															"src": "776:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "821:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "821:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_contract$_WBTCReserve_$2312",
																"nativeSrc": "783:37:20",
																"nodeType": "YulIdentifier",
																"src": "783:37:20"
															},
															"nativeSrc": "783:44:20",
															"nodeType": "YulFunctionCall",
															"src": "783:44:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "773:2:20",
														"nodeType": "YulIdentifier",
														"src": "773:2:20"
													},
													"nativeSrc": "773:55:20",
													"nodeType": "YulFunctionCall",
													"src": "773:55:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "766:6:20",
												"nodeType": "YulIdentifier",
												"src": "766:6:20"
											},
											"nativeSrc": "766:63:20",
											"nodeType": "YulFunctionCall",
											"src": "766:63:20"
										},
										"nativeSrc": "763:83:20",
										"nodeType": "YulIf",
										"src": "763:83:20"
									}
								]
							},
							"name": "validator_revert_t_contract$_WBTCReserve_$2312",
							"nativeSrc": "690:162:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "746:5:20",
									"nodeType": "YulTypedName",
									"src": "746:5:20",
									"type": ""
								}
							],
							"src": "690:162:20"
						},
						{
							"body": {
								"nativeSrc": "941:100:20",
								"nodeType": "YulBlock",
								"src": "941:100:20",
								"statements": [
									{
										"nativeSrc": "951:22:20",
										"nodeType": "YulAssignment",
										"src": "951:22:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "966:6:20",
													"nodeType": "YulIdentifier",
													"src": "966:6:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "960:5:20",
												"nodeType": "YulIdentifier",
												"src": "960:5:20"
											},
											"nativeSrc": "960:13:20",
											"nodeType": "YulFunctionCall",
											"src": "960:13:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "951:5:20",
												"nodeType": "YulIdentifier",
												"src": "951:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1029:5:20",
													"nodeType": "YulIdentifier",
													"src": "1029:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_contract$_WBTCReserve_$2312",
												"nativeSrc": "982:46:20",
												"nodeType": "YulIdentifier",
												"src": "982:46:20"
											},
											"nativeSrc": "982:53:20",
											"nodeType": "YulFunctionCall",
											"src": "982:53:20"
										},
										"nativeSrc": "982:53:20",
										"nodeType": "YulExpressionStatement",
										"src": "982:53:20"
									}
								]
							},
							"name": "abi_decode_t_contract$_WBTCReserve_$2312_fromMemory",
							"nativeSrc": "858:183:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "919:6:20",
									"nodeType": "YulTypedName",
									"src": "919:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "927:3:20",
									"nodeType": "YulTypedName",
									"src": "927:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "935:5:20",
									"nodeType": "YulTypedName",
									"src": "935:5:20",
									"type": ""
								}
							],
							"src": "858:183:20"
						},
						{
							"body": {
								"nativeSrc": "1112:51:20",
								"nodeType": "YulBlock",
								"src": "1112:51:20",
								"statements": [
									{
										"nativeSrc": "1122:35:20",
										"nodeType": "YulAssignment",
										"src": "1122:35:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1151:5:20",
													"nodeType": "YulIdentifier",
													"src": "1151:5:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_address",
												"nativeSrc": "1133:17:20",
												"nodeType": "YulIdentifier",
												"src": "1133:17:20"
											},
											"nativeSrc": "1133:24:20",
											"nodeType": "YulFunctionCall",
											"src": "1133:24:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "1122:7:20",
												"nodeType": "YulIdentifier",
												"src": "1122:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_contract$_USDCReserve_$2139",
							"nativeSrc": "1047:116:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1094:5:20",
									"nodeType": "YulTypedName",
									"src": "1094:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "1104:7:20",
									"nodeType": "YulTypedName",
									"src": "1104:7:20",
									"type": ""
								}
							],
							"src": "1047:116:20"
						},
						{
							"body": {
								"nativeSrc": "1232:99:20",
								"nodeType": "YulBlock",
								"src": "1232:99:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "1309:16:20",
											"nodeType": "YulBlock",
											"src": "1309:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1318:1:20",
																"nodeType": "YulLiteral",
																"src": "1318:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1321:1:20",
																"nodeType": "YulLiteral",
																"src": "1321:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1311:6:20",
															"nodeType": "YulIdentifier",
															"src": "1311:6:20"
														},
														"nativeSrc": "1311:12:20",
														"nodeType": "YulFunctionCall",
														"src": "1311:12:20"
													},
													"nativeSrc": "1311:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "1311:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1255:5:20",
															"nodeType": "YulIdentifier",
															"src": "1255:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "1300:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1300:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_contract$_USDCReserve_$2139",
																"nativeSrc": "1262:37:20",
																"nodeType": "YulIdentifier",
																"src": "1262:37:20"
															},
															"nativeSrc": "1262:44:20",
															"nodeType": "YulFunctionCall",
															"src": "1262:44:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "1252:2:20",
														"nodeType": "YulIdentifier",
														"src": "1252:2:20"
													},
													"nativeSrc": "1252:55:20",
													"nodeType": "YulFunctionCall",
													"src": "1252:55:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "1245:6:20",
												"nodeType": "YulIdentifier",
												"src": "1245:6:20"
											},
											"nativeSrc": "1245:63:20",
											"nodeType": "YulFunctionCall",
											"src": "1245:63:20"
										},
										"nativeSrc": "1242:83:20",
										"nodeType": "YulIf",
										"src": "1242:83:20"
									}
								]
							},
							"name": "validator_revert_t_contract$_USDCReserve_$2139",
							"nativeSrc": "1169:162:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1225:5:20",
									"nodeType": "YulTypedName",
									"src": "1225:5:20",
									"type": ""
								}
							],
							"src": "1169:162:20"
						},
						{
							"body": {
								"nativeSrc": "1420:100:20",
								"nodeType": "YulBlock",
								"src": "1420:100:20",
								"statements": [
									{
										"nativeSrc": "1430:22:20",
										"nodeType": "YulAssignment",
										"src": "1430:22:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "1445:6:20",
													"nodeType": "YulIdentifier",
													"src": "1445:6:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "1439:5:20",
												"nodeType": "YulIdentifier",
												"src": "1439:5:20"
											},
											"nativeSrc": "1439:13:20",
											"nodeType": "YulFunctionCall",
											"src": "1439:13:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "1430:5:20",
												"nodeType": "YulIdentifier",
												"src": "1430:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1508:5:20",
													"nodeType": "YulIdentifier",
													"src": "1508:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_contract$_USDCReserve_$2139",
												"nativeSrc": "1461:46:20",
												"nodeType": "YulIdentifier",
												"src": "1461:46:20"
											},
											"nativeSrc": "1461:53:20",
											"nodeType": "YulFunctionCall",
											"src": "1461:53:20"
										},
										"nativeSrc": "1461:53:20",
										"nodeType": "YulExpressionStatement",
										"src": "1461:53:20"
									}
								]
							},
							"name": "abi_decode_t_contract$_USDCReserve_$2139_fromMemory",
							"nativeSrc": "1337:183:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "1398:6:20",
									"nodeType": "YulTypedName",
									"src": "1398:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "1406:3:20",
									"nodeType": "YulTypedName",
									"src": "1406:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "1414:5:20",
									"nodeType": "YulTypedName",
									"src": "1414:5:20",
									"type": ""
								}
							],
							"src": "1337:183:20"
						},
						{
							"body": {
								"nativeSrc": "1569:79:20",
								"nodeType": "YulBlock",
								"src": "1569:79:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "1626:16:20",
											"nodeType": "YulBlock",
											"src": "1626:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1635:1:20",
																"nodeType": "YulLiteral",
																"src": "1635:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1638:1:20",
																"nodeType": "YulLiteral",
																"src": "1638:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1628:6:20",
															"nodeType": "YulIdentifier",
															"src": "1628:6:20"
														},
														"nativeSrc": "1628:12:20",
														"nodeType": "YulFunctionCall",
														"src": "1628:12:20"
													},
													"nativeSrc": "1628:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "1628:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1592:5:20",
															"nodeType": "YulIdentifier",
															"src": "1592:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "1617:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1617:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nativeSrc": "1599:17:20",
																"nodeType": "YulIdentifier",
																"src": "1599:17:20"
															},
															"nativeSrc": "1599:24:20",
															"nodeType": "YulFunctionCall",
															"src": "1599:24:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "1589:2:20",
														"nodeType": "YulIdentifier",
														"src": "1589:2:20"
													},
													"nativeSrc": "1589:35:20",
													"nodeType": "YulFunctionCall",
													"src": "1589:35:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "1582:6:20",
												"nodeType": "YulIdentifier",
												"src": "1582:6:20"
											},
											"nativeSrc": "1582:43:20",
											"nodeType": "YulFunctionCall",
											"src": "1582:43:20"
										},
										"nativeSrc": "1579:63:20",
										"nodeType": "YulIf",
										"src": "1579:63:20"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nativeSrc": "1526:122:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1562:5:20",
									"nodeType": "YulTypedName",
									"src": "1562:5:20",
									"type": ""
								}
							],
							"src": "1526:122:20"
						},
						{
							"body": {
								"nativeSrc": "1717:80:20",
								"nodeType": "YulBlock",
								"src": "1717:80:20",
								"statements": [
									{
										"nativeSrc": "1727:22:20",
										"nodeType": "YulAssignment",
										"src": "1727:22:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "1742:6:20",
													"nodeType": "YulIdentifier",
													"src": "1742:6:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "1736:5:20",
												"nodeType": "YulIdentifier",
												"src": "1736:5:20"
											},
											"nativeSrc": "1736:13:20",
											"nodeType": "YulFunctionCall",
											"src": "1736:13:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "1727:5:20",
												"nodeType": "YulIdentifier",
												"src": "1727:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1785:5:20",
													"nodeType": "YulIdentifier",
													"src": "1785:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nativeSrc": "1758:26:20",
												"nodeType": "YulIdentifier",
												"src": "1758:26:20"
											},
											"nativeSrc": "1758:33:20",
											"nodeType": "YulFunctionCall",
											"src": "1758:33:20"
										},
										"nativeSrc": "1758:33:20",
										"nodeType": "YulExpressionStatement",
										"src": "1758:33:20"
									}
								]
							},
							"name": "abi_decode_t_address_fromMemory",
							"nativeSrc": "1654:143:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "1695:6:20",
									"nodeType": "YulTypedName",
									"src": "1695:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "1703:3:20",
									"nodeType": "YulTypedName",
									"src": "1703:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "1711:5:20",
									"nodeType": "YulTypedName",
									"src": "1711:5:20",
									"type": ""
								}
							],
							"src": "1654:143:20"
						},
						{
							"body": {
								"nativeSrc": "1971:732:20",
								"nodeType": "YulBlock",
								"src": "1971:732:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "2018:83:20",
											"nodeType": "YulBlock",
											"src": "2018:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "2020:77:20",
															"nodeType": "YulIdentifier",
															"src": "2020:77:20"
														},
														"nativeSrc": "2020:79:20",
														"nodeType": "YulFunctionCall",
														"src": "2020:79:20"
													},
													"nativeSrc": "2020:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "2020:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "1992:7:20",
															"nodeType": "YulIdentifier",
															"src": "1992:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "2001:9:20",
															"nodeType": "YulIdentifier",
															"src": "2001:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1988:3:20",
														"nodeType": "YulIdentifier",
														"src": "1988:3:20"
													},
													"nativeSrc": "1988:23:20",
													"nodeType": "YulFunctionCall",
													"src": "1988:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2013:3:20",
													"nodeType": "YulLiteral",
													"src": "2013:3:20",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "1984:3:20",
												"nodeType": "YulIdentifier",
												"src": "1984:3:20"
											},
											"nativeSrc": "1984:33:20",
											"nodeType": "YulFunctionCall",
											"src": "1984:33:20"
										},
										"nativeSrc": "1981:120:20",
										"nodeType": "YulIf",
										"src": "1981:120:20"
									},
									{
										"nativeSrc": "2111:148:20",
										"nodeType": "YulBlock",
										"src": "2111:148:20",
										"statements": [
											{
												"nativeSrc": "2126:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "2126:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "2140:1:20",
													"nodeType": "YulLiteral",
													"src": "2140:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2130:6:20",
														"nodeType": "YulTypedName",
														"src": "2130:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2155:94:20",
												"nodeType": "YulAssignment",
												"src": "2155:94:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2221:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "2221:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2232:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2232:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2217:3:20",
																"nodeType": "YulIdentifier",
																"src": "2217:3:20"
															},
															"nativeSrc": "2217:22:20",
															"nodeType": "YulFunctionCall",
															"src": "2217:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2241:7:20",
															"nodeType": "YulIdentifier",
															"src": "2241:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_contract$_WBTCReserve_$2312_fromMemory",
														"nativeSrc": "2165:51:20",
														"nodeType": "YulIdentifier",
														"src": "2165:51:20"
													},
													"nativeSrc": "2165:84:20",
													"nodeType": "YulFunctionCall",
													"src": "2165:84:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "2155:6:20",
														"nodeType": "YulIdentifier",
														"src": "2155:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "2269:149:20",
										"nodeType": "YulBlock",
										"src": "2269:149:20",
										"statements": [
											{
												"nativeSrc": "2284:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "2284:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "2298:2:20",
													"nodeType": "YulLiteral",
													"src": "2298:2:20",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2288:6:20",
														"nodeType": "YulTypedName",
														"src": "2288:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2314:94:20",
												"nodeType": "YulAssignment",
												"src": "2314:94:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2380:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "2380:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2391:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2391:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2376:3:20",
																"nodeType": "YulIdentifier",
																"src": "2376:3:20"
															},
															"nativeSrc": "2376:22:20",
															"nodeType": "YulFunctionCall",
															"src": "2376:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2400:7:20",
															"nodeType": "YulIdentifier",
															"src": "2400:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_contract$_USDCReserve_$2139_fromMemory",
														"nativeSrc": "2324:51:20",
														"nodeType": "YulIdentifier",
														"src": "2324:51:20"
													},
													"nativeSrc": "2324:84:20",
													"nodeType": "YulFunctionCall",
													"src": "2324:84:20"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "2314:6:20",
														"nodeType": "YulIdentifier",
														"src": "2314:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "2428:129:20",
										"nodeType": "YulBlock",
										"src": "2428:129:20",
										"statements": [
											{
												"nativeSrc": "2443:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "2443:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "2457:2:20",
													"nodeType": "YulLiteral",
													"src": "2457:2:20",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2447:6:20",
														"nodeType": "YulTypedName",
														"src": "2447:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2473:74:20",
												"nodeType": "YulAssignment",
												"src": "2473:74:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2519:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "2519:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2530:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2530:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2515:3:20",
																"nodeType": "YulIdentifier",
																"src": "2515:3:20"
															},
															"nativeSrc": "2515:22:20",
															"nodeType": "YulFunctionCall",
															"src": "2515:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2539:7:20",
															"nodeType": "YulIdentifier",
															"src": "2539:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nativeSrc": "2483:31:20",
														"nodeType": "YulIdentifier",
														"src": "2483:31:20"
													},
													"nativeSrc": "2483:64:20",
													"nodeType": "YulFunctionCall",
													"src": "2483:64:20"
												},
												"variableNames": [
													{
														"name": "value2",
														"nativeSrc": "2473:6:20",
														"nodeType": "YulIdentifier",
														"src": "2473:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "2567:129:20",
										"nodeType": "YulBlock",
										"src": "2567:129:20",
										"statements": [
											{
												"nativeSrc": "2582:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "2582:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "2596:2:20",
													"nodeType": "YulLiteral",
													"src": "2596:2:20",
													"type": "",
													"value": "96"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2586:6:20",
														"nodeType": "YulTypedName",
														"src": "2586:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2612:74:20",
												"nodeType": "YulAssignment",
												"src": "2612:74:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2658:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "2658:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2669:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2669:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2654:3:20",
																"nodeType": "YulIdentifier",
																"src": "2654:3:20"
															},
															"nativeSrc": "2654:22:20",
															"nodeType": "YulFunctionCall",
															"src": "2654:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2678:7:20",
															"nodeType": "YulIdentifier",
															"src": "2678:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nativeSrc": "2622:31:20",
														"nodeType": "YulIdentifier",
														"src": "2622:31:20"
													},
													"nativeSrc": "2622:64:20",
													"nodeType": "YulFunctionCall",
													"src": "2622:64:20"
												},
												"variableNames": [
													{
														"name": "value3",
														"nativeSrc": "2612:6:20",
														"nodeType": "YulIdentifier",
														"src": "2612:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_contract$_WBTCReserve_$2312t_contract$_USDCReserve_$2139t_addresst_address_fromMemory",
							"nativeSrc": "1803:900:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1917:9:20",
									"nodeType": "YulTypedName",
									"src": "1917:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "1928:7:20",
									"nodeType": "YulTypedName",
									"src": "1928:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "1940:6:20",
									"nodeType": "YulTypedName",
									"src": "1940:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "1948:6:20",
									"nodeType": "YulTypedName",
									"src": "1948:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "1956:6:20",
									"nodeType": "YulTypedName",
									"src": "1956:6:20",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "1964:6:20",
									"nodeType": "YulTypedName",
									"src": "1964:6:20",
									"type": ""
								}
							],
							"src": "1803:900:20"
						}
					]
				},
				"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_contract$_WBTCReserve_$2312(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function validator_revert_t_contract$_WBTCReserve_$2312(value) {\n        if iszero(eq(value, cleanup_t_contract$_WBTCReserve_$2312(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_contract$_WBTCReserve_$2312_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_contract$_WBTCReserve_$2312(value)\n    }\n\n    function cleanup_t_contract$_USDCReserve_$2139(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function validator_revert_t_contract$_USDCReserve_$2139(value) {\n        if iszero(eq(value, cleanup_t_contract$_USDCReserve_$2139(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_contract$_USDCReserve_$2139_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_contract$_USDCReserve_$2139(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_contract$_WBTCReserve_$2312t_contract$_USDCReserve_$2139t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_WBTCReserve_$2312_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_contract$_USDCReserve_$2139_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
				"id": 20,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "60806040526050600560006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b50604051620015ea380380620015ea833981810160405281019062000053919062000254565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620002c6565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001928262000165565b9050919050565b6000620001a68262000185565b9050919050565b620001b88162000199565b8114620001c457600080fd5b50565b600081519050620001d881620001ad565b92915050565b6000620001eb8262000185565b9050919050565b620001fd81620001de565b81146200020957600080fd5b50565b6000815190506200021d81620001f2565b92915050565b6200022e8162000185565b81146200023a57600080fd5b50565b6000815190506200024e8162000223565b92915050565b6000806000806080858703121562000271576200027062000160565b5b60006200028187828801620001c7565b945050602062000294878288016200020c565b9350506040620002a7878288016200023d565b9250506060620002ba878288016200023d565b91505092959194509250565b61131480620002d66000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639a78e72e116100665780639a78e72e146101495780639b45293114610179578063c9a396e914610197578063cbddb785146101c7578063d4d40086146101f75761009e565b80631bf01e9b146100a35780633b2e5f94146100c15780633e413bee146100f15780634b8a35291461010f5780637c1f85601461012b575b600080fd5b6100ab610215565b6040516100b89190610ca3565b60405180910390f35b6100db60048036038101906100d69190610cef565b61023f565b6040516100e89190610d35565b60405180910390f35b6100f96103a6565b6040516101069190610ca3565b60405180910390f35b61012960048036038101906101249190610d7c565b6103cc565b005b610133610689565b6040516101409190610e7a565b60405180910390f35b610163600480360381019061015e9190610cef565b610856565b6040516101709190610d35565b60405180910390f35b61018161093f565b60405161018e9190610ca3565b60405180910390f35b6101b160048036038101906101ac9190610cef565b610965565b6040516101be9190610ca3565b60405180910390f35b6101e160048036038101906101dc9190610cef565b610a69565b6040516101ee9190610e7a565b60405180910390f35b6101ff610c38565b60405161020c9190610ca3565b60405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401606060405180830381865afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610eb1565b925092509250600081600a6102e99190611066565b8460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac75409a896040518263ffffffff1660e01b81526004016103439190610ca3565b602060405180830381865afa158015610360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038491906110b1565b61038e91906110de565b610398919061114f565b905080945050505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461042657600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff16633b2e5f94336040518263ffffffff1660e01b81526004016104619190610ca3565b602060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a291906110b1565b905060006064600560009054906101000a900460ff1660ff16836104c691906110de565b6104d0919061114f565b905060003073ffffffffffffffffffffffffffffffffffffffff16639a78e72e336040518263ffffffff1660e01b815260040161050d9190610ca3565b602060405180830381865afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e91906110b1565b905081848261055d9190611180565b1061059d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490611237565b60405180910390fd5b83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ec9190611180565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663683ae08333866040518363ffffffff1660e01b8152600401610650929190611257565b600060405180830381600087803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b505050505050505050565b606060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401606060405180830381865afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190610eb1565b9250925092506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401602060405180830381865afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b991906110b1565b90506000600267ffffffffffffffff8111156107d8576107d7611280565b5b6040519080825280602002602001820160405280156108065781602001602082028036833780820191505090505b509050848160008151811061081e5761081d6112af565b5b602002602001018181525050818160018151811061083f5761083e6112af565b5b602002602001018181525050809550505050505090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ea91906110b1565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461093491906110de565b905080915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109e45760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a64565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a6357600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a64565b5b919050565b60606000600267ffffffffffffffff811115610a8857610a87611280565b5b604051908082528060200260200182016040528015610ab65781602001602082028036833780820191505090505b50905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac75409a846040518263ffffffff1660e01b8152600401610b129190610ca3565b602060405180830381865afa158015610b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5391906110b1565b81600081518110610b6757610b666112af565b5b602002602001018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac75409a846040518263ffffffff1660e01b8152600401610bce9190610ca3565b602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f91906110b1565b81600181518110610c2357610c226112af565b5b60200260200101818152505080915050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c8d82610c62565b9050919050565b610c9d81610c82565b82525050565b6000602082019050610cb86000830184610c94565b92915050565b600080fd5b610ccc81610c82565b8114610cd757600080fd5b50565b600081359050610ce981610cc3565b92915050565b600060208284031215610d0557610d04610cbe565b5b6000610d1384828501610cda565b91505092915050565b6000819050919050565b610d2f81610d1c565b82525050565b6000602082019050610d4a6000830184610d26565b92915050565b610d5981610d1c565b8114610d6457600080fd5b50565b600081359050610d7681610d50565b92915050565b60008060408385031215610d9357610d92610cbe565b5b6000610da185828601610cda565b9250506020610db285828601610d67565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610df181610d1c565b82525050565b6000610e038383610de8565b60208301905092915050565b6000602082019050919050565b6000610e2782610dbc565b610e318185610dc7565b9350610e3c83610dd8565b8060005b83811015610e6d578151610e548882610df7565b9750610e5f83610e0f565b925050600181019050610e40565b5085935050505092915050565b60006020820190508181036000830152610e948184610e1c565b905092915050565b600081519050610eab81610d50565b92915050565b600080600060608486031215610eca57610ec9610cbe565b5b6000610ed886828701610e9c565b9350506020610ee986828701610e9c565b9250506040610efa86828701610e9c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610f8a57808604811115610f6657610f65610f04565b5b6001851615610f755780820291505b8081029050610f8385610f33565b9450610f4a565b94509492505050565b600082610fa3576001905061105f565b81610fb1576000905061105f565b8160018114610fc75760028114610fd157611000565b600191505061105f565b60ff841115610fe357610fe2610f04565b5b8360020a915084821115610ffa57610ff9610f04565b5b5061105f565b5060208310610133831016604e8410600b84101617156110355782820a9050838111156110305761102f610f04565b5b61105f565b6110428484846001610f40565b9250905081840481111561105957611058610f04565b5b81810290505b9392505050565b600061107182610d1c565b915061107c83610d1c565b92506110a97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610f93565b905092915050565b6000602082840312156110c7576110c6610cbe565b5b60006110d584828501610e9c565b91505092915050565b60006110e982610d1c565b91506110f483610d1c565b925082820261110281610d1c565b9150828204841483151761111957611118610f04565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061115a82610d1c565b915061116583610d1c565b92508261117557611174611120565b5b828204905092915050565b600061118b82610d1c565b915061119683610d1c565b92508282019050808211156111ae576111ad610f04565b5b92915050565b600082825260208201905092915050565b7f596f752077616e7420746f206d6f7265206d6f72652076616c7565207468616e60008201527f20616c6c6f776564000000000000000000000000000000000000000000000000602082015250565b60006112216028836111b4565b915061122c826111c5565b604082019050919050565b6000602082019050818103600083015261125081611214565b9050919050565b600060408201905061126c6000830185610c94565b6112796020830184610d26565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220adf108b572513d6306e4cb6f0af3613af5f53e6a8bfab60ed1ac42ed90af69f864736f6c63430008180033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x50 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x15EA CODESIZE SUB DUP1 PUSH3 0x15EA DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x53 SWAP2 SWAP1 PUSH3 0x254 JUMP JUMPDEST DUP2 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP PUSH3 0x2C6 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x192 DUP3 PUSH3 0x165 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1A6 DUP3 PUSH3 0x185 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1B8 DUP2 PUSH3 0x199 JUMP JUMPDEST DUP2 EQ PUSH3 0x1C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1D8 DUP2 PUSH3 0x1AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1EB DUP3 PUSH3 0x185 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1FD DUP2 PUSH3 0x1DE JUMP JUMPDEST DUP2 EQ PUSH3 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x21D DUP2 PUSH3 0x1F2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x22E DUP2 PUSH3 0x185 JUMP JUMPDEST DUP2 EQ PUSH3 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x24E DUP2 PUSH3 0x223 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x271 JUMPI PUSH3 0x270 PUSH3 0x160 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x281 DUP8 DUP3 DUP9 ADD PUSH3 0x1C7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x294 DUP8 DUP3 DUP9 ADD PUSH3 0x20C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH3 0x2A7 DUP8 DUP3 DUP9 ADD PUSH3 0x23D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH3 0x2BA DUP8 DUP3 DUP9 ADD PUSH3 0x23D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x1314 DUP1 PUSH3 0x2D6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9A78E72E GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x9A78E72E EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x9B452931 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0xC9A396E9 EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0xCBDDB785 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0xD4D40086 EQ PUSH2 0x1F7 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1BF01E9B EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x3B2E5F94 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x3E413BEE EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x4B8A3529 EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x7C1F8560 EQ PUSH2 0x12B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x215 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD6 SWAP2 SWAP1 PUSH2 0xCEF JUMP JUMPDEST PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xD35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF9 PUSH2 0x3A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x106 SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x129 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xD7C JUMP JUMPDEST PUSH2 0x3CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x133 PUSH2 0x689 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 SWAP2 SWAP1 PUSH2 0xE7A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15E SWAP2 SWAP1 PUSH2 0xCEF JUMP JUMPDEST PUSH2 0x856 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x170 SWAP2 SWAP1 PUSH2 0xD35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x181 PUSH2 0x93F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18E SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AC SWAP2 SWAP1 PUSH2 0xCEF JUMP JUMPDEST PUSH2 0x965 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DC SWAP2 SWAP1 PUSH2 0xCEF JUMP JUMPDEST PUSH2 0xA69 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0xE7A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FF PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20C SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE54F0880 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D4 SWAP2 SWAP1 PUSH2 0xEB1 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP2 PUSH1 0xA PUSH2 0x2E9 SWAP2 SWAP1 PUSH2 0x1066 JUMP JUMPDEST DUP5 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAC75409A DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x360 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x384 SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST PUSH2 0x38E SWAP2 SWAP1 PUSH2 0x10DE JUMP JUMPDEST PUSH2 0x398 SWAP2 SWAP1 PUSH2 0x114F JUMP JUMPDEST SWAP1 POP DUP1 SWAP5 POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3B2E5F94 CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x461 SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x47E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A2 SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND DUP4 PUSH2 0x4C6 SWAP2 SWAP1 PUSH2 0x10DE JUMP JUMPDEST PUSH2 0x4D0 SWAP2 SWAP1 PUSH2 0x114F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9A78E72E CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x50D SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x54E SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST SWAP1 POP DUP2 DUP5 DUP3 PUSH2 0x55D SWAP2 SWAP1 PUSH2 0x1180 JUMP JUMPDEST LT PUSH2 0x59D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x1237 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x5EC SWAP2 SWAP1 PUSH2 0x1180 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x683AE083 CALLER DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x650 SWAP3 SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x67E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE54F0880 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x720 SWAP2 SWAP1 PUSH2 0xEB1 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE54F0880 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x795 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7B9 SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7D8 JUMPI PUSH2 0x7D7 PUSH2 0x1280 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x806 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP5 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x81E JUMPI PUSH2 0x81D PUSH2 0x12AF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x83F JUMPI PUSH2 0x83E PUSH2 0x12AF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE54F0880 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8EA SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x934 SWAP2 SWAP1 PUSH2 0x10DE JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9E4 JUMPI PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0xA64 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA63 JUMPI PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0xA64 JUMP JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA88 JUMPI PUSH2 0xA87 PUSH2 0x1280 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAB6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAC75409A DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB12 SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB53 SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB67 JUMPI PUSH2 0xB66 PUSH2 0x12AF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAC75409A DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCE SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBEB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC0F SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xC23 JUMPI PUSH2 0xC22 PUSH2 0x12AF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8D DUP3 PUSH2 0xC62 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC9D DUP2 PUSH2 0xC82 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCB8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC94 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCCC DUP2 PUSH2 0xC82 JUMP JUMPDEST DUP2 EQ PUSH2 0xCD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xCE9 DUP2 PUSH2 0xCC3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD05 JUMPI PUSH2 0xD04 PUSH2 0xCBE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD13 DUP5 DUP3 DUP6 ADD PUSH2 0xCDA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD2F DUP2 PUSH2 0xD1C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD4A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD26 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD59 DUP2 PUSH2 0xD1C JUMP JUMPDEST DUP2 EQ PUSH2 0xD64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD76 DUP2 PUSH2 0xD50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD93 JUMPI PUSH2 0xD92 PUSH2 0xCBE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDA1 DUP6 DUP3 DUP7 ADD PUSH2 0xCDA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xDB2 DUP6 DUP3 DUP7 ADD PUSH2 0xD67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDF1 DUP2 PUSH2 0xD1C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE03 DUP4 DUP4 PUSH2 0xDE8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE27 DUP3 PUSH2 0xDBC JUMP JUMPDEST PUSH2 0xE31 DUP2 DUP6 PUSH2 0xDC7 JUMP JUMPDEST SWAP4 POP PUSH2 0xE3C DUP4 PUSH2 0xDD8 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE6D JUMPI DUP2 MLOAD PUSH2 0xE54 DUP9 DUP3 PUSH2 0xDF7 JUMP JUMPDEST SWAP8 POP PUSH2 0xE5F DUP4 PUSH2 0xE0F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xE40 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE94 DUP2 DUP5 PUSH2 0xE1C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xEAB DUP2 PUSH2 0xD50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xECA JUMPI PUSH2 0xEC9 PUSH2 0xCBE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xED8 DUP7 DUP3 DUP8 ADD PUSH2 0xE9C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xEE9 DUP7 DUP3 DUP8 ADD PUSH2 0xE9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xEFA DUP7 DUP3 DUP8 ADD PUSH2 0xE9C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0xF8A JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0xF66 JUMPI PUSH2 0xF65 PUSH2 0xF04 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0xF75 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0xF83 DUP6 PUSH2 0xF33 JUMP JUMPDEST SWAP5 POP PUSH2 0xF4A JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xFA3 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x105F JUMP JUMPDEST DUP2 PUSH2 0xFB1 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x105F JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xFC7 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xFD1 JUMPI PUSH2 0x1000 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x105F JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xFE3 JUMPI PUSH2 0xFE2 PUSH2 0xF04 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0xFFA JUMPI PUSH2 0xFF9 PUSH2 0xF04 JUMP JUMPDEST JUMPDEST POP PUSH2 0x105F JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1035 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x1030 JUMPI PUSH2 0x102F PUSH2 0xF04 JUMP JUMPDEST JUMPDEST PUSH2 0x105F JUMP JUMPDEST PUSH2 0x1042 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0xF40 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x1059 JUMPI PUSH2 0x1058 PUSH2 0xF04 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1071 DUP3 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP PUSH2 0x107C DUP4 PUSH2 0xD1C JUMP JUMPDEST SWAP3 POP PUSH2 0x10A9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0xF93 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C7 JUMPI PUSH2 0x10C6 PUSH2 0xCBE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10D5 DUP5 DUP3 DUP6 ADD PUSH2 0xE9C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E9 DUP3 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP PUSH2 0x10F4 DUP4 PUSH2 0xD1C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x1102 DUP2 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x1119 JUMPI PUSH2 0x1118 PUSH2 0xF04 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x115A DUP3 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP PUSH2 0x1165 DUP4 PUSH2 0xD1C JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1175 JUMPI PUSH2 0x1174 PUSH2 0x1120 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x118B DUP3 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP PUSH2 0x1196 DUP4 PUSH2 0xD1C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x11AE JUMPI PUSH2 0x11AD PUSH2 0xF04 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F752077616E7420746F206D6F7265206D6F72652076616C7565207468616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20616C6C6F776564000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1221 PUSH1 0x28 DUP4 PUSH2 0x11B4 JUMP JUMPDEST SWAP2 POP PUSH2 0x122C DUP3 PUSH2 0x11C5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1250 DUP2 PUSH2 0x1214 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x126C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xC94 JUMP JUMPDEST PUSH2 0x1279 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD26 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD CALL ADDMOD 0xB5 PUSH19 0x513D6306E4CB6F0AF3613AF5F53E6A8BFAB60E 0xD1 0xAC TIMESTAMP 0xED SWAP1 0xAF PUSH10 0xF864736F6C6343000818 STOP CALLER ",
		"sourceMap": "114:2523:17:-:0;;;316:2;294:25;;;;;;;;;;;;;;;;;;;;326:217;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;437:5;430:4;;:12;;;;;;;;;;;;;;;;;;459:5;452:4;;:12;;;;;;;;;;;;;;;;;;488;474:11;;:26;;;;;;;;;;;;;;;;;;524:12;510:11;;:26;;;;;;;;;;;;;;;;;;326:217;;;;114:2523;;88:117:20;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:116::-;625:7;654:24;672:5;654:24;:::i;:::-;643:35;;568:116;;;:::o;690:162::-;783:44;821:5;783:44;:::i;:::-;776:5;773:55;763:83;;842:1;839;832:12;763:83;690:162;:::o;858:183::-;935:5;966:6;960:13;951:22;;982:53;1029:5;982:53;:::i;:::-;858:183;;;;:::o;1047:116::-;1104:7;1133:24;1151:5;1133:24;:::i;:::-;1122:35;;1047:116;;;:::o;1169:162::-;1262:44;1300:5;1262:44;:::i;:::-;1255:5;1252:55;1242:83;;1321:1;1318;1311:12;1242:83;1169:162;:::o;1337:183::-;1414:5;1445:6;1439:13;1430:22;;1461:53;1508:5;1461:53;:::i;:::-;1337:183;;;;:::o;1526:122::-;1599:24;1617:5;1599:24;:::i;:::-;1592:5;1589:35;1579:63;;1638:1;1635;1628:12;1579:63;1526:122;:::o;1654:143::-;1711:5;1742:6;1736:13;1727:22;;1758:33;1785:5;1758:33;:::i;:::-;1654:143;;;;:::o;1803:900::-;1940:6;1948;1956;1964;2013:3;2001:9;1992:7;1988:23;1984:33;1981:120;;;2020:79;;:::i;:::-;1981:120;2140:1;2165:84;2241:7;2232:6;2221:9;2217:22;2165:84;:::i;:::-;2155:94;;2111:148;2298:2;2324:84;2400:7;2391:6;2380:9;2376:22;2324:84;:::i;:::-;2314:94;;2269:149;2457:2;2483:64;2539:7;2530:6;2519:9;2515:22;2483:64;:::i;:::-;2473:74;;2428:129;2596:2;2622:64;2678:7;2669:6;2658:9;2654:22;2622:64;:::i;:::-;2612:74;;2567:129;1803:900;;;;;;;:::o;114:2523:17:-;;;;;;;"
	},
	"abi": [
		{
			"inputs": [
				{
					"internalType": "contract WBTCReserve",
					"name": "_wBTCReserve",
					"type": "address"
				},
				{
					"internalType": "contract USDCReserve",
					"name": "_usdcReserve",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_wBTC",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_usdc",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "asset",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "borrow",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getAssetsPrice",
			"outputs": [
				{
					"internalType": "uint256[]",
					"name": "",
					"type": "uint256[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "user",
					"type": "address"
				}
			],
			"name": "getDebt",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "user",
					"type": "address"
				}
			],
			"name": "getDepositValue",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "token",
					"type": "address"
				}
			],
			"name": "getReserve",
			"outputs": [
				{
					"internalType": "address",
					"name": "reserveAddress",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "user",
					"type": "address"
				}
			],
			"name": "getSupplyedBalances",
			"outputs": [
				{
					"internalType": "uint256[]",
					"name": "",
					"type": "uint256[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getUSDC",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getwBTC",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "usdc",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "wBTC",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 1663,
				"contract": "contracts/SimplePool.sol:SimplePool",
				"label": "wBTCReserve",
				"offset": 0,
				"slot": "0",
				"type": "t_contract(WBTCReserve)2312"
			},
			{
				"astId": 1666,
				"contract": "contracts/SimplePool.sol:SimplePool",
				"label": "usdcReserve",
				"offset": 0,
				"slot": "1",
				"type": "t_contract(USDCReserve)2139"
			},
			{
				"astId": 1668,
				"contract": "contracts/SimplePool.sol:SimplePool",
				"label": "wBTC",
				"offset": 0,
				"slot": "2",
				"type": "t_address"
			},
			{
				"astId": 1670,
				"contract": "contracts/SimplePool.sol:SimplePool",
				"label": "usdc",
				"offset": 0,
				"slot": "3",
				"type": "t_address"
			},
			{
				"astId": 1674,
				"contract": "contracts/SimplePool.sol:SimplePool",
				"label": "borrowedUSDC",
				"offset": 0,
				"slot": "4",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 1680,
				"contract": "contracts/SimplePool.sol:SimplePool",
				"label": "wBTCLTV",
				"offset": 0,
				"slot": "5",
				"type": "t_uint8"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_contract(USDCReserve)2139": {
				"encoding": "inplace",
				"label": "contract USDCReserve",
				"numberOfBytes": "20"
			},
			"t_contract(WBTCReserve)2312": {
				"encoding": "inplace",
				"label": "contract WBTCReserve",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			},
			"t_uint8": {
				"encoding": "inplace",
				"label": "uint8",
				"numberOfBytes": "1"
			}
		}
	},
	"web3Deploy": "var _wBTCReserve = /* var of type address here */ ;\nvar _usdcReserve = /* var of type address here */ ;\nvar _wBTC = /* var of type address here */ ;\nvar _usdc = /* var of type address here */ ;\nvar simplepoolContract = new web3.eth.Contract([{\"inputs\":[{\"internalType\":\"contract WBTCReserve\",\"name\":\"_wBTCReserve\",\"type\":\"address\"},{\"internalType\":\"contract USDCReserve\",\"name\":\"_usdcReserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetsPrice\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reserveAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSupplyedBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getwBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]);\nvar simplepool = simplepoolContract.deploy({\n     data: '0x60806040526050600560006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b50604051620015ea380380620015ea833981810160405281019062000053919062000254565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620002c6565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001928262000165565b9050919050565b6000620001a68262000185565b9050919050565b620001b88162000199565b8114620001c457600080fd5b50565b600081519050620001d881620001ad565b92915050565b6000620001eb8262000185565b9050919050565b620001fd81620001de565b81146200020957600080fd5b50565b6000815190506200021d81620001f2565b92915050565b6200022e8162000185565b81146200023a57600080fd5b50565b6000815190506200024e8162000223565b92915050565b6000806000806080858703121562000271576200027062000160565b5b60006200028187828801620001c7565b945050602062000294878288016200020c565b9350506040620002a7878288016200023d565b9250506060620002ba878288016200023d565b91505092959194509250565b61131480620002d66000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639a78e72e116100665780639a78e72e146101495780639b45293114610179578063c9a396e914610197578063cbddb785146101c7578063d4d40086146101f75761009e565b80631bf01e9b146100a35780633b2e5f94146100c15780633e413bee146100f15780634b8a35291461010f5780637c1f85601461012b575b600080fd5b6100ab610215565b6040516100b89190610ca3565b60405180910390f35b6100db60048036038101906100d69190610cef565b61023f565b6040516100e89190610d35565b60405180910390f35b6100f96103a6565b6040516101069190610ca3565b60405180910390f35b61012960048036038101906101249190610d7c565b6103cc565b005b610133610689565b6040516101409190610e7a565b60405180910390f35b610163600480360381019061015e9190610cef565b610856565b6040516101709190610d35565b60405180910390f35b61018161093f565b60405161018e9190610ca3565b60405180910390f35b6101b160048036038101906101ac9190610cef565b610965565b6040516101be9190610ca3565b60405180910390f35b6101e160048036038101906101dc9190610cef565b610a69565b6040516101ee9190610e7a565b60405180910390f35b6101ff610c38565b60405161020c9190610ca3565b60405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401606060405180830381865afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610eb1565b925092509250600081600a6102e99190611066565b8460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac75409a896040518263ffffffff1660e01b81526004016103439190610ca3565b602060405180830381865afa158015610360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038491906110b1565b61038e91906110de565b610398919061114f565b905080945050505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461042657600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff16633b2e5f94336040518263ffffffff1660e01b81526004016104619190610ca3565b602060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a291906110b1565b905060006064600560009054906101000a900460ff1660ff16836104c691906110de565b6104d0919061114f565b905060003073ffffffffffffffffffffffffffffffffffffffff16639a78e72e336040518263ffffffff1660e01b815260040161050d9190610ca3565b602060405180830381865afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e91906110b1565b905081848261055d9190611180565b1061059d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490611237565b60405180910390fd5b83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ec9190611180565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663683ae08333866040518363ffffffff1660e01b8152600401610650929190611257565b600060405180830381600087803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b505050505050505050565b606060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401606060405180830381865afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190610eb1565b9250925092506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401602060405180830381865afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b991906110b1565b90506000600267ffffffffffffffff8111156107d8576107d7611280565b5b6040519080825280602002602001820160405280156108065781602001602082028036833780820191505090505b509050848160008151811061081e5761081d6112af565b5b602002602001018181525050818160018151811061083f5761083e6112af565b5b602002602001018181525050809550505050505090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ea91906110b1565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461093491906110de565b905080915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109e45760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a64565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a6357600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a64565b5b919050565b60606000600267ffffffffffffffff811115610a8857610a87611280565b5b604051908082528060200260200182016040528015610ab65781602001602082028036833780820191505090505b50905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac75409a846040518263ffffffff1660e01b8152600401610b129190610ca3565b602060405180830381865afa158015610b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5391906110b1565b81600081518110610b6757610b666112af565b5b602002602001018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac75409a846040518263ffffffff1660e01b8152600401610bce9190610ca3565b602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f91906110b1565b81600181518110610c2357610c226112af565b5b60200260200101818152505080915050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c8d82610c62565b9050919050565b610c9d81610c82565b82525050565b6000602082019050610cb86000830184610c94565b92915050565b600080fd5b610ccc81610c82565b8114610cd757600080fd5b50565b600081359050610ce981610cc3565b92915050565b600060208284031215610d0557610d04610cbe565b5b6000610d1384828501610cda565b91505092915050565b6000819050919050565b610d2f81610d1c565b82525050565b6000602082019050610d4a6000830184610d26565b92915050565b610d5981610d1c565b8114610d6457600080fd5b50565b600081359050610d7681610d50565b92915050565b60008060408385031215610d9357610d92610cbe565b5b6000610da185828601610cda565b9250506020610db285828601610d67565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610df181610d1c565b82525050565b6000610e038383610de8565b60208301905092915050565b6000602082019050919050565b6000610e2782610dbc565b610e318185610dc7565b9350610e3c83610dd8565b8060005b83811015610e6d578151610e548882610df7565b9750610e5f83610e0f565b925050600181019050610e40565b5085935050505092915050565b60006020820190508181036000830152610e948184610e1c565b905092915050565b600081519050610eab81610d50565b92915050565b600080600060608486031215610eca57610ec9610cbe565b5b6000610ed886828701610e9c565b9350506020610ee986828701610e9c565b9250506040610efa86828701610e9c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610f8a57808604811115610f6657610f65610f04565b5b6001851615610f755780820291505b8081029050610f8385610f33565b9450610f4a565b94509492505050565b600082610fa3576001905061105f565b81610fb1576000905061105f565b8160018114610fc75760028114610fd157611000565b600191505061105f565b60ff841115610fe357610fe2610f04565b5b8360020a915084821115610ffa57610ff9610f04565b5b5061105f565b5060208310610133831016604e8410600b84101617156110355782820a9050838111156110305761102f610f04565b5b61105f565b6110428484846001610f40565b9250905081840481111561105957611058610f04565b5b81810290505b9392505050565b600061107182610d1c565b915061107c83610d1c565b92506110a97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610f93565b905092915050565b6000602082840312156110c7576110c6610cbe565b5b60006110d584828501610e9c565b91505092915050565b60006110e982610d1c565b91506110f483610d1c565b925082820261110281610d1c565b9150828204841483151761111957611118610f04565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061115a82610d1c565b915061116583610d1c565b92508261117557611174611120565b5b828204905092915050565b600061118b82610d1c565b915061119683610d1c565b92508282019050808211156111ae576111ad610f04565b5b92915050565b600082825260208201905092915050565b7f596f752077616e7420746f206d6f7265206d6f72652076616c7565207468616e60008201527f20616c6c6f776564000000000000000000000000000000000000000000000000602082015250565b60006112216028836111b4565b915061122c826111c5565b604082019050919050565b6000602082019050818103600083015261125081611214565b9050919050565b600060408201905061126c6000830185610c94565b6112796020830184610d26565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220adf108b572513d6306e4cb6f0af3613af5f53e6a8bfab60ed1ac42ed90af69f864736f6c63430008180033', \n     arguments: [\n          _wBTCReserve,\n          _usdcReserve,\n          _wBTC,\n          _usdc,\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"4b8a3529": "borrow(address,uint256)",
		"7c1f8560": "getAssetsPrice()",
		"9a78e72e": "getDebt(address)",
		"3b2e5f94": "getDepositValue(address)",
		"c9a396e9": "getReserve(address)",
		"cbddb785": "getSupplyedBalances(address)",
		"1bf01e9b": "getUSDC()",
		"d4d40086": "getwBTC()",
		"3e413bee": "usdc()",
		"9b452931": "wBTC()"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "976800",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"borrow(address,uint256)": "infinite",
			"getAssetsPrice()": "infinite",
			"getDebt(address)": "infinite",
			"getDepositValue(address)": "infinite",
			"getReserve(address)": "infinite",
			"getSupplyedBalances(address)": "infinite",
			"getUSDC()": "2523",
			"getwBTC()": "2610",
			"usdc()": "2559",
			"wBTC()": "2536"
		}
	},
	"devdoc": {
		"kind": "dev",
		"methods": {},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@borrow_1911": {
				"entryPoint": 972,
				"id": 1911,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@getAssetsPrice_1808": {
				"entryPoint": 1673,
				"id": 1808,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@getDebt_1931": {
				"entryPoint": 2134,
				"id": 1931,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getDepositValue_1965": {
				"entryPoint": 575,
				"id": 1965,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getReserve_1738": {
				"entryPoint": 2405,
				"id": 1738,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getSupplyedBalances_1848": {
				"entryPoint": 2665,
				"id": 1848,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getUSDC_1760": {
				"entryPoint": 533,
				"id": 1760,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@getwBTC_1749": {
				"entryPoint": 3128,
				"id": 1749,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@usdc_1670": {
				"entryPoint": 934,
				"id": 1670,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@wBTC_1668": {
				"entryPoint": 2367,
				"id": 1668,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"abi_decode_t_address": {
				"entryPoint": 3290,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256": {
				"entryPoint": 3431,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256_fromMemory": {
				"entryPoint": 3740,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 3311,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 3452,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_uint256_fromMemory": {
				"entryPoint": 4273,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory": {
				"entryPoint": 3761,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_encodeUpdatedPos_t_uint256_to_t_uint256": {
				"entryPoint": 3575,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_address_to_t_address_fromStack": {
				"entryPoint": 3220,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
				"entryPoint": 3612,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 4628,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_uint256_to_t_uint256": {
				"entryPoint": 3560,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_uint256_to_t_uint256_fromStack": {
				"entryPoint": 3366,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": 3235,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
				"entryPoint": 4695,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
				"entryPoint": 3706,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 4663,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": 3381,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 3544,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 3516,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr": {
				"entryPoint": 3599,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
				"entryPoint": 3527,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 4532,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 4480,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_div_t_uint256": {
				"entryPoint": 4431,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_exp_helper": {
				"entryPoint": 3904,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 2
			},
			"checked_exp_t_uint256_t_uint256": {
				"entryPoint": 4198,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_exp_unsigned": {
				"entryPoint": 3987,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"checked_mul_t_uint256": {
				"entryPoint": 4318,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"cleanup_t_address": {
				"entryPoint": 3202,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 3170,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 3356,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 3844,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x12": {
				"entryPoint": 4384,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x32": {
				"entryPoint": 4783,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 4736,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 3262,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"shift_right_1_unsigned": {
				"entryPoint": 3891,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"store_literal_in_memory_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2": {
				"entryPoint": 4549,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 3267,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_uint256": {
				"entryPoint": 3408,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:11324:20",
					"nodeType": "YulBlock",
					"src": "0:11324:20",
					"statements": [
						{
							"body": {
								"nativeSrc": "52:81:20",
								"nodeType": "YulBlock",
								"src": "52:81:20",
								"statements": [
									{
										"nativeSrc": "62:65:20",
										"nodeType": "YulAssignment",
										"src": "62:65:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "77:5:20",
													"nodeType": "YulIdentifier",
													"src": "77:5:20"
												},
												{
													"kind": "number",
													"nativeSrc": "84:42:20",
													"nodeType": "YulLiteral",
													"src": "84:42:20",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "73:3:20",
												"nodeType": "YulIdentifier",
												"src": "73:3:20"
											},
											"nativeSrc": "73:54:20",
											"nodeType": "YulFunctionCall",
											"src": "73:54:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "62:7:20",
												"nodeType": "YulIdentifier",
												"src": "62:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nativeSrc": "7:126:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "34:5:20",
									"nodeType": "YulTypedName",
									"src": "34:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "44:7:20",
									"nodeType": "YulTypedName",
									"src": "44:7:20",
									"type": ""
								}
							],
							"src": "7:126:20"
						},
						{
							"body": {
								"nativeSrc": "184:51:20",
								"nodeType": "YulBlock",
								"src": "184:51:20",
								"statements": [
									{
										"nativeSrc": "194:35:20",
										"nodeType": "YulAssignment",
										"src": "194:35:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "223:5:20",
													"nodeType": "YulIdentifier",
													"src": "223:5:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nativeSrc": "205:17:20",
												"nodeType": "YulIdentifier",
												"src": "205:17:20"
											},
											"nativeSrc": "205:24:20",
											"nodeType": "YulFunctionCall",
											"src": "205:24:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "194:7:20",
												"nodeType": "YulIdentifier",
												"src": "194:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nativeSrc": "139:96:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "166:5:20",
									"nodeType": "YulTypedName",
									"src": "166:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "176:7:20",
									"nodeType": "YulTypedName",
									"src": "176:7:20",
									"type": ""
								}
							],
							"src": "139:96:20"
						},
						{
							"body": {
								"nativeSrc": "306:53:20",
								"nodeType": "YulBlock",
								"src": "306:53:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "323:3:20",
													"nodeType": "YulIdentifier",
													"src": "323:3:20"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "346:5:20",
															"nodeType": "YulIdentifier",
															"src": "346:5:20"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nativeSrc": "328:17:20",
														"nodeType": "YulIdentifier",
														"src": "328:17:20"
													},
													"nativeSrc": "328:24:20",
													"nodeType": "YulFunctionCall",
													"src": "328:24:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "316:6:20",
												"nodeType": "YulIdentifier",
												"src": "316:6:20"
											},
											"nativeSrc": "316:37:20",
											"nodeType": "YulFunctionCall",
											"src": "316:37:20"
										},
										"nativeSrc": "316:37:20",
										"nodeType": "YulExpressionStatement",
										"src": "316:37:20"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nativeSrc": "241:118:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "294:5:20",
									"nodeType": "YulTypedName",
									"src": "294:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "301:3:20",
									"nodeType": "YulTypedName",
									"src": "301:3:20",
									"type": ""
								}
							],
							"src": "241:118:20"
						},
						{
							"body": {
								"nativeSrc": "463:124:20",
								"nodeType": "YulBlock",
								"src": "463:124:20",
								"statements": [
									{
										"nativeSrc": "473:26:20",
										"nodeType": "YulAssignment",
										"src": "473:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "485:9:20",
													"nodeType": "YulIdentifier",
													"src": "485:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "496:2:20",
													"nodeType": "YulLiteral",
													"src": "496:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "481:3:20",
												"nodeType": "YulIdentifier",
												"src": "481:3:20"
											},
											"nativeSrc": "481:18:20",
											"nodeType": "YulFunctionCall",
											"src": "481:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "473:4:20",
												"nodeType": "YulIdentifier",
												"src": "473:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "553:6:20",
													"nodeType": "YulIdentifier",
													"src": "553:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "566:9:20",
															"nodeType": "YulIdentifier",
															"src": "566:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "577:1:20",
															"nodeType": "YulLiteral",
															"src": "577:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "562:3:20",
														"nodeType": "YulIdentifier",
														"src": "562:3:20"
													},
													"nativeSrc": "562:17:20",
													"nodeType": "YulFunctionCall",
													"src": "562:17:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "509:43:20",
												"nodeType": "YulIdentifier",
												"src": "509:43:20"
											},
											"nativeSrc": "509:71:20",
											"nodeType": "YulFunctionCall",
											"src": "509:71:20"
										},
										"nativeSrc": "509:71:20",
										"nodeType": "YulExpressionStatement",
										"src": "509:71:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "365:222:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "435:9:20",
									"nodeType": "YulTypedName",
									"src": "435:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "447:6:20",
									"nodeType": "YulTypedName",
									"src": "447:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "458:4:20",
									"nodeType": "YulTypedName",
									"src": "458:4:20",
									"type": ""
								}
							],
							"src": "365:222:20"
						},
						{
							"body": {
								"nativeSrc": "633:35:20",
								"nodeType": "YulBlock",
								"src": "633:35:20",
								"statements": [
									{
										"nativeSrc": "643:19:20",
										"nodeType": "YulAssignment",
										"src": "643:19:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "659:2:20",
													"nodeType": "YulLiteral",
													"src": "659:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "653:5:20",
												"nodeType": "YulIdentifier",
												"src": "653:5:20"
											},
											"nativeSrc": "653:9:20",
											"nodeType": "YulFunctionCall",
											"src": "653:9:20"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nativeSrc": "643:6:20",
												"nodeType": "YulIdentifier",
												"src": "643:6:20"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nativeSrc": "593:75:20",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nativeSrc": "626:6:20",
									"nodeType": "YulTypedName",
									"src": "626:6:20",
									"type": ""
								}
							],
							"src": "593:75:20"
						},
						{
							"body": {
								"nativeSrc": "763:28:20",
								"nodeType": "YulBlock",
								"src": "763:28:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "780:1:20",
													"nodeType": "YulLiteral",
													"src": "780:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "783:1:20",
													"nodeType": "YulLiteral",
													"src": "783:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "773:6:20",
												"nodeType": "YulIdentifier",
												"src": "773:6:20"
											},
											"nativeSrc": "773:12:20",
											"nodeType": "YulFunctionCall",
											"src": "773:12:20"
										},
										"nativeSrc": "773:12:20",
										"nodeType": "YulExpressionStatement",
										"src": "773:12:20"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nativeSrc": "674:117:20",
							"nodeType": "YulFunctionDefinition",
							"src": "674:117:20"
						},
						{
							"body": {
								"nativeSrc": "886:28:20",
								"nodeType": "YulBlock",
								"src": "886:28:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "903:1:20",
													"nodeType": "YulLiteral",
													"src": "903:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "906:1:20",
													"nodeType": "YulLiteral",
													"src": "906:1:20",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "896:6:20",
												"nodeType": "YulIdentifier",
												"src": "896:6:20"
											},
											"nativeSrc": "896:12:20",
											"nodeType": "YulFunctionCall",
											"src": "896:12:20"
										},
										"nativeSrc": "896:12:20",
										"nodeType": "YulExpressionStatement",
										"src": "896:12:20"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nativeSrc": "797:117:20",
							"nodeType": "YulFunctionDefinition",
							"src": "797:117:20"
						},
						{
							"body": {
								"nativeSrc": "963:79:20",
								"nodeType": "YulBlock",
								"src": "963:79:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "1020:16:20",
											"nodeType": "YulBlock",
											"src": "1020:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1029:1:20",
																"nodeType": "YulLiteral",
																"src": "1029:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1032:1:20",
																"nodeType": "YulLiteral",
																"src": "1032:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1022:6:20",
															"nodeType": "YulIdentifier",
															"src": "1022:6:20"
														},
														"nativeSrc": "1022:12:20",
														"nodeType": "YulFunctionCall",
														"src": "1022:12:20"
													},
													"nativeSrc": "1022:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "1022:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "986:5:20",
															"nodeType": "YulIdentifier",
															"src": "986:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "1011:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1011:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nativeSrc": "993:17:20",
																"nodeType": "YulIdentifier",
																"src": "993:17:20"
															},
															"nativeSrc": "993:24:20",
															"nodeType": "YulFunctionCall",
															"src": "993:24:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "983:2:20",
														"nodeType": "YulIdentifier",
														"src": "983:2:20"
													},
													"nativeSrc": "983:35:20",
													"nodeType": "YulFunctionCall",
													"src": "983:35:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "976:6:20",
												"nodeType": "YulIdentifier",
												"src": "976:6:20"
											},
											"nativeSrc": "976:43:20",
											"nodeType": "YulFunctionCall",
											"src": "976:43:20"
										},
										"nativeSrc": "973:63:20",
										"nodeType": "YulIf",
										"src": "973:63:20"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nativeSrc": "920:122:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "956:5:20",
									"nodeType": "YulTypedName",
									"src": "956:5:20",
									"type": ""
								}
							],
							"src": "920:122:20"
						},
						{
							"body": {
								"nativeSrc": "1100:87:20",
								"nodeType": "YulBlock",
								"src": "1100:87:20",
								"statements": [
									{
										"nativeSrc": "1110:29:20",
										"nodeType": "YulAssignment",
										"src": "1110:29:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "1132:6:20",
													"nodeType": "YulIdentifier",
													"src": "1132:6:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1119:12:20",
												"nodeType": "YulIdentifier",
												"src": "1119:12:20"
											},
											"nativeSrc": "1119:20:20",
											"nodeType": "YulFunctionCall",
											"src": "1119:20:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "1110:5:20",
												"nodeType": "YulIdentifier",
												"src": "1110:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "1175:5:20",
													"nodeType": "YulIdentifier",
													"src": "1175:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nativeSrc": "1148:26:20",
												"nodeType": "YulIdentifier",
												"src": "1148:26:20"
											},
											"nativeSrc": "1148:33:20",
											"nodeType": "YulFunctionCall",
											"src": "1148:33:20"
										},
										"nativeSrc": "1148:33:20",
										"nodeType": "YulExpressionStatement",
										"src": "1148:33:20"
									}
								]
							},
							"name": "abi_decode_t_address",
							"nativeSrc": "1048:139:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "1078:6:20",
									"nodeType": "YulTypedName",
									"src": "1078:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "1086:3:20",
									"nodeType": "YulTypedName",
									"src": "1086:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "1094:5:20",
									"nodeType": "YulTypedName",
									"src": "1094:5:20",
									"type": ""
								}
							],
							"src": "1048:139:20"
						},
						{
							"body": {
								"nativeSrc": "1259:263:20",
								"nodeType": "YulBlock",
								"src": "1259:263:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "1305:83:20",
											"nodeType": "YulBlock",
											"src": "1305:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "1307:77:20",
															"nodeType": "YulIdentifier",
															"src": "1307:77:20"
														},
														"nativeSrc": "1307:79:20",
														"nodeType": "YulFunctionCall",
														"src": "1307:79:20"
													},
													"nativeSrc": "1307:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "1307:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "1280:7:20",
															"nodeType": "YulIdentifier",
															"src": "1280:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "1289:9:20",
															"nodeType": "YulIdentifier",
															"src": "1289:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1276:3:20",
														"nodeType": "YulIdentifier",
														"src": "1276:3:20"
													},
													"nativeSrc": "1276:23:20",
													"nodeType": "YulFunctionCall",
													"src": "1276:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1301:2:20",
													"nodeType": "YulLiteral",
													"src": "1301:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "1272:3:20",
												"nodeType": "YulIdentifier",
												"src": "1272:3:20"
											},
											"nativeSrc": "1272:32:20",
											"nodeType": "YulFunctionCall",
											"src": "1272:32:20"
										},
										"nativeSrc": "1269:119:20",
										"nodeType": "YulIf",
										"src": "1269:119:20"
									},
									{
										"nativeSrc": "1398:117:20",
										"nodeType": "YulBlock",
										"src": "1398:117:20",
										"statements": [
											{
												"nativeSrc": "1413:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "1413:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "1427:1:20",
													"nodeType": "YulLiteral",
													"src": "1427:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "1417:6:20",
														"nodeType": "YulTypedName",
														"src": "1417:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "1442:63:20",
												"nodeType": "YulAssignment",
												"src": "1442:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "1477:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "1477:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "1488:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1488:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "1473:3:20",
																"nodeType": "YulIdentifier",
																"src": "1473:3:20"
															},
															"nativeSrc": "1473:22:20",
															"nodeType": "YulFunctionCall",
															"src": "1473:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "1497:7:20",
															"nodeType": "YulIdentifier",
															"src": "1497:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "1452:20:20",
														"nodeType": "YulIdentifier",
														"src": "1452:20:20"
													},
													"nativeSrc": "1452:53:20",
													"nodeType": "YulFunctionCall",
													"src": "1452:53:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "1442:6:20",
														"nodeType": "YulIdentifier",
														"src": "1442:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nativeSrc": "1193:329:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1229:9:20",
									"nodeType": "YulTypedName",
									"src": "1229:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "1240:7:20",
									"nodeType": "YulTypedName",
									"src": "1240:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "1252:6:20",
									"nodeType": "YulTypedName",
									"src": "1252:6:20",
									"type": ""
								}
							],
							"src": "1193:329:20"
						},
						{
							"body": {
								"nativeSrc": "1573:32:20",
								"nodeType": "YulBlock",
								"src": "1573:32:20",
								"statements": [
									{
										"nativeSrc": "1583:16:20",
										"nodeType": "YulAssignment",
										"src": "1583:16:20",
										"value": {
											"name": "value",
											"nativeSrc": "1594:5:20",
											"nodeType": "YulIdentifier",
											"src": "1594:5:20"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nativeSrc": "1583:7:20",
												"nodeType": "YulIdentifier",
												"src": "1583:7:20"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nativeSrc": "1528:77:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1555:5:20",
									"nodeType": "YulTypedName",
									"src": "1555:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nativeSrc": "1565:7:20",
									"nodeType": "YulTypedName",
									"src": "1565:7:20",
									"type": ""
								}
							],
							"src": "1528:77:20"
						},
						{
							"body": {
								"nativeSrc": "1676:53:20",
								"nodeType": "YulBlock",
								"src": "1676:53:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "1693:3:20",
													"nodeType": "YulIdentifier",
													"src": "1693:3:20"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "1716:5:20",
															"nodeType": "YulIdentifier",
															"src": "1716:5:20"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nativeSrc": "1698:17:20",
														"nodeType": "YulIdentifier",
														"src": "1698:17:20"
													},
													"nativeSrc": "1698:24:20",
													"nodeType": "YulFunctionCall",
													"src": "1698:24:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1686:6:20",
												"nodeType": "YulIdentifier",
												"src": "1686:6:20"
											},
											"nativeSrc": "1686:37:20",
											"nodeType": "YulFunctionCall",
											"src": "1686:37:20"
										},
										"nativeSrc": "1686:37:20",
										"nodeType": "YulExpressionStatement",
										"src": "1686:37:20"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nativeSrc": "1611:118:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1664:5:20",
									"nodeType": "YulTypedName",
									"src": "1664:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "1671:3:20",
									"nodeType": "YulTypedName",
									"src": "1671:3:20",
									"type": ""
								}
							],
							"src": "1611:118:20"
						},
						{
							"body": {
								"nativeSrc": "1833:124:20",
								"nodeType": "YulBlock",
								"src": "1833:124:20",
								"statements": [
									{
										"nativeSrc": "1843:26:20",
										"nodeType": "YulAssignment",
										"src": "1843:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1855:9:20",
													"nodeType": "YulIdentifier",
													"src": "1855:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "1866:2:20",
													"nodeType": "YulLiteral",
													"src": "1866:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1851:3:20",
												"nodeType": "YulIdentifier",
												"src": "1851:3:20"
											},
											"nativeSrc": "1851:18:20",
											"nodeType": "YulFunctionCall",
											"src": "1851:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1843:4:20",
												"nodeType": "YulIdentifier",
												"src": "1843:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "1923:6:20",
													"nodeType": "YulIdentifier",
													"src": "1923:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1936:9:20",
															"nodeType": "YulIdentifier",
															"src": "1936:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "1947:1:20",
															"nodeType": "YulLiteral",
															"src": "1947:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1932:3:20",
														"nodeType": "YulIdentifier",
														"src": "1932:3:20"
													},
													"nativeSrc": "1932:17:20",
													"nodeType": "YulFunctionCall",
													"src": "1932:17:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "1879:43:20",
												"nodeType": "YulIdentifier",
												"src": "1879:43:20"
											},
											"nativeSrc": "1879:71:20",
											"nodeType": "YulFunctionCall",
											"src": "1879:71:20"
										},
										"nativeSrc": "1879:71:20",
										"nodeType": "YulExpressionStatement",
										"src": "1879:71:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "1735:222:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1805:9:20",
									"nodeType": "YulTypedName",
									"src": "1805:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1817:6:20",
									"nodeType": "YulTypedName",
									"src": "1817:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1828:4:20",
									"nodeType": "YulTypedName",
									"src": "1828:4:20",
									"type": ""
								}
							],
							"src": "1735:222:20"
						},
						{
							"body": {
								"nativeSrc": "2006:79:20",
								"nodeType": "YulBlock",
								"src": "2006:79:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "2063:16:20",
											"nodeType": "YulBlock",
											"src": "2063:16:20",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "2072:1:20",
																"nodeType": "YulLiteral",
																"src": "2072:1:20",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "2075:1:20",
																"nodeType": "YulLiteral",
																"src": "2075:1:20",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "2065:6:20",
															"nodeType": "YulIdentifier",
															"src": "2065:6:20"
														},
														"nativeSrc": "2065:12:20",
														"nodeType": "YulFunctionCall",
														"src": "2065:12:20"
													},
													"nativeSrc": "2065:12:20",
													"nodeType": "YulExpressionStatement",
													"src": "2065:12:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "2029:5:20",
															"nodeType": "YulIdentifier",
															"src": "2029:5:20"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "2054:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "2054:5:20"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nativeSrc": "2036:17:20",
																"nodeType": "YulIdentifier",
																"src": "2036:17:20"
															},
															"nativeSrc": "2036:24:20",
															"nodeType": "YulFunctionCall",
															"src": "2036:24:20"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "2026:2:20",
														"nodeType": "YulIdentifier",
														"src": "2026:2:20"
													},
													"nativeSrc": "2026:35:20",
													"nodeType": "YulFunctionCall",
													"src": "2026:35:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "2019:6:20",
												"nodeType": "YulIdentifier",
												"src": "2019:6:20"
											},
											"nativeSrc": "2019:43:20",
											"nodeType": "YulFunctionCall",
											"src": "2019:43:20"
										},
										"nativeSrc": "2016:63:20",
										"nodeType": "YulIf",
										"src": "2016:63:20"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nativeSrc": "1963:122:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "1999:5:20",
									"nodeType": "YulTypedName",
									"src": "1999:5:20",
									"type": ""
								}
							],
							"src": "1963:122:20"
						},
						{
							"body": {
								"nativeSrc": "2143:87:20",
								"nodeType": "YulBlock",
								"src": "2143:87:20",
								"statements": [
									{
										"nativeSrc": "2153:29:20",
										"nodeType": "YulAssignment",
										"src": "2153:29:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "2175:6:20",
													"nodeType": "YulIdentifier",
													"src": "2175:6:20"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "2162:12:20",
												"nodeType": "YulIdentifier",
												"src": "2162:12:20"
											},
											"nativeSrc": "2162:20:20",
											"nodeType": "YulFunctionCall",
											"src": "2162:20:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "2153:5:20",
												"nodeType": "YulIdentifier",
												"src": "2153:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "2218:5:20",
													"nodeType": "YulIdentifier",
													"src": "2218:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2191:26:20",
												"nodeType": "YulIdentifier",
												"src": "2191:26:20"
											},
											"nativeSrc": "2191:33:20",
											"nodeType": "YulFunctionCall",
											"src": "2191:33:20"
										},
										"nativeSrc": "2191:33:20",
										"nodeType": "YulExpressionStatement",
										"src": "2191:33:20"
									}
								]
							},
							"name": "abi_decode_t_uint256",
							"nativeSrc": "2091:139:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "2121:6:20",
									"nodeType": "YulTypedName",
									"src": "2121:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "2129:3:20",
									"nodeType": "YulTypedName",
									"src": "2129:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "2137:5:20",
									"nodeType": "YulTypedName",
									"src": "2137:5:20",
									"type": ""
								}
							],
							"src": "2091:139:20"
						},
						{
							"body": {
								"nativeSrc": "2319:391:20",
								"nodeType": "YulBlock",
								"src": "2319:391:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "2365:83:20",
											"nodeType": "YulBlock",
											"src": "2365:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "2367:77:20",
															"nodeType": "YulIdentifier",
															"src": "2367:77:20"
														},
														"nativeSrc": "2367:79:20",
														"nodeType": "YulFunctionCall",
														"src": "2367:79:20"
													},
													"nativeSrc": "2367:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "2367:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "2340:7:20",
															"nodeType": "YulIdentifier",
															"src": "2340:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "2349:9:20",
															"nodeType": "YulIdentifier",
															"src": "2349:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2336:3:20",
														"nodeType": "YulIdentifier",
														"src": "2336:3:20"
													},
													"nativeSrc": "2336:23:20",
													"nodeType": "YulFunctionCall",
													"src": "2336:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "2361:2:20",
													"nodeType": "YulLiteral",
													"src": "2361:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "2332:3:20",
												"nodeType": "YulIdentifier",
												"src": "2332:3:20"
											},
											"nativeSrc": "2332:32:20",
											"nodeType": "YulFunctionCall",
											"src": "2332:32:20"
										},
										"nativeSrc": "2329:119:20",
										"nodeType": "YulIf",
										"src": "2329:119:20"
									},
									{
										"nativeSrc": "2458:117:20",
										"nodeType": "YulBlock",
										"src": "2458:117:20",
										"statements": [
											{
												"nativeSrc": "2473:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "2473:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "2487:1:20",
													"nodeType": "YulLiteral",
													"src": "2487:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2477:6:20",
														"nodeType": "YulTypedName",
														"src": "2477:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2502:63:20",
												"nodeType": "YulAssignment",
												"src": "2502:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2537:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "2537:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2548:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2548:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2533:3:20",
																"nodeType": "YulIdentifier",
																"src": "2533:3:20"
															},
															"nativeSrc": "2533:22:20",
															"nodeType": "YulFunctionCall",
															"src": "2533:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2557:7:20",
															"nodeType": "YulIdentifier",
															"src": "2557:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nativeSrc": "2512:20:20",
														"nodeType": "YulIdentifier",
														"src": "2512:20:20"
													},
													"nativeSrc": "2512:53:20",
													"nodeType": "YulFunctionCall",
													"src": "2512:53:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "2502:6:20",
														"nodeType": "YulIdentifier",
														"src": "2502:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "2585:118:20",
										"nodeType": "YulBlock",
										"src": "2585:118:20",
										"statements": [
											{
												"nativeSrc": "2600:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "2600:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "2614:2:20",
													"nodeType": "YulLiteral",
													"src": "2614:2:20",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "2604:6:20",
														"nodeType": "YulTypedName",
														"src": "2604:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "2630:63:20",
												"nodeType": "YulAssignment",
												"src": "2630:63:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "2665:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "2665:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "2676:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2676:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "2661:3:20",
																"nodeType": "YulIdentifier",
																"src": "2661:3:20"
															},
															"nativeSrc": "2661:22:20",
															"nodeType": "YulFunctionCall",
															"src": "2661:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "2685:7:20",
															"nodeType": "YulIdentifier",
															"src": "2685:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nativeSrc": "2640:20:20",
														"nodeType": "YulIdentifier",
														"src": "2640:20:20"
													},
													"nativeSrc": "2640:53:20",
													"nodeType": "YulFunctionCall",
													"src": "2640:53:20"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "2630:6:20",
														"nodeType": "YulIdentifier",
														"src": "2630:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nativeSrc": "2236:474:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2281:9:20",
									"nodeType": "YulTypedName",
									"src": "2281:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "2292:7:20",
									"nodeType": "YulTypedName",
									"src": "2292:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "2304:6:20",
									"nodeType": "YulTypedName",
									"src": "2304:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "2312:6:20",
									"nodeType": "YulTypedName",
									"src": "2312:6:20",
									"type": ""
								}
							],
							"src": "2236:474:20"
						},
						{
							"body": {
								"nativeSrc": "2790:40:20",
								"nodeType": "YulBlock",
								"src": "2790:40:20",
								"statements": [
									{
										"nativeSrc": "2801:22:20",
										"nodeType": "YulAssignment",
										"src": "2801:22:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "2817:5:20",
													"nodeType": "YulIdentifier",
													"src": "2817:5:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "2811:5:20",
												"nodeType": "YulIdentifier",
												"src": "2811:5:20"
											},
											"nativeSrc": "2811:12:20",
											"nodeType": "YulFunctionCall",
											"src": "2811:12:20"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "2801:6:20",
												"nodeType": "YulIdentifier",
												"src": "2801:6:20"
											}
										]
									}
								]
							},
							"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
							"nativeSrc": "2716:114:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "2773:5:20",
									"nodeType": "YulTypedName",
									"src": "2773:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "2783:6:20",
									"nodeType": "YulTypedName",
									"src": "2783:6:20",
									"type": ""
								}
							],
							"src": "2716:114:20"
						},
						{
							"body": {
								"nativeSrc": "2947:73:20",
								"nodeType": "YulBlock",
								"src": "2947:73:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "2964:3:20",
													"nodeType": "YulIdentifier",
													"src": "2964:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "2969:6:20",
													"nodeType": "YulIdentifier",
													"src": "2969:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2957:6:20",
												"nodeType": "YulIdentifier",
												"src": "2957:6:20"
											},
											"nativeSrc": "2957:19:20",
											"nodeType": "YulFunctionCall",
											"src": "2957:19:20"
										},
										"nativeSrc": "2957:19:20",
										"nodeType": "YulExpressionStatement",
										"src": "2957:19:20"
									},
									{
										"nativeSrc": "2985:29:20",
										"nodeType": "YulAssignment",
										"src": "2985:29:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3004:3:20",
													"nodeType": "YulIdentifier",
													"src": "3004:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3009:4:20",
													"nodeType": "YulLiteral",
													"src": "3009:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3000:3:20",
												"nodeType": "YulIdentifier",
												"src": "3000:3:20"
											},
											"nativeSrc": "3000:14:20",
											"nodeType": "YulFunctionCall",
											"src": "3000:14:20"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "2985:11:20",
												"nodeType": "YulIdentifier",
												"src": "2985:11:20"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
							"nativeSrc": "2836:184:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "2919:3:20",
									"nodeType": "YulTypedName",
									"src": "2919:3:20",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "2924:6:20",
									"nodeType": "YulTypedName",
									"src": "2924:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "2935:11:20",
									"nodeType": "YulTypedName",
									"src": "2935:11:20",
									"type": ""
								}
							],
							"src": "2836:184:20"
						},
						{
							"body": {
								"nativeSrc": "3098:60:20",
								"nodeType": "YulBlock",
								"src": "3098:60:20",
								"statements": [
									{
										"nativeSrc": "3108:11:20",
										"nodeType": "YulAssignment",
										"src": "3108:11:20",
										"value": {
											"name": "ptr",
											"nativeSrc": "3116:3:20",
											"nodeType": "YulIdentifier",
											"src": "3116:3:20"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "3108:4:20",
												"nodeType": "YulIdentifier",
												"src": "3108:4:20"
											}
										]
									},
									{
										"nativeSrc": "3129:22:20",
										"nodeType": "YulAssignment",
										"src": "3129:22:20",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nativeSrc": "3141:3:20",
													"nodeType": "YulIdentifier",
													"src": "3141:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3146:4:20",
													"nodeType": "YulLiteral",
													"src": "3146:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3137:3:20",
												"nodeType": "YulIdentifier",
												"src": "3137:3:20"
											},
											"nativeSrc": "3137:14:20",
											"nodeType": "YulFunctionCall",
											"src": "3137:14:20"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "3129:4:20",
												"nodeType": "YulIdentifier",
												"src": "3129:4:20"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
							"nativeSrc": "3026:132:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "3085:3:20",
									"nodeType": "YulTypedName",
									"src": "3085:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "3093:4:20",
									"nodeType": "YulTypedName",
									"src": "3093:4:20",
									"type": ""
								}
							],
							"src": "3026:132:20"
						},
						{
							"body": {
								"nativeSrc": "3219:53:20",
								"nodeType": "YulBlock",
								"src": "3219:53:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3236:3:20",
													"nodeType": "YulIdentifier",
													"src": "3236:3:20"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "3259:5:20",
															"nodeType": "YulIdentifier",
															"src": "3259:5:20"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nativeSrc": "3241:17:20",
														"nodeType": "YulIdentifier",
														"src": "3241:17:20"
													},
													"nativeSrc": "3241:24:20",
													"nodeType": "YulFunctionCall",
													"src": "3241:24:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3229:6:20",
												"nodeType": "YulIdentifier",
												"src": "3229:6:20"
											},
											"nativeSrc": "3229:37:20",
											"nodeType": "YulFunctionCall",
											"src": "3229:37:20"
										},
										"nativeSrc": "3229:37:20",
										"nodeType": "YulExpressionStatement",
										"src": "3229:37:20"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256",
							"nativeSrc": "3164:108:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "3207:5:20",
									"nodeType": "YulTypedName",
									"src": "3207:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "3214:3:20",
									"nodeType": "YulTypedName",
									"src": "3214:3:20",
									"type": ""
								}
							],
							"src": "3164:108:20"
						},
						{
							"body": {
								"nativeSrc": "3358:99:20",
								"nodeType": "YulBlock",
								"src": "3358:99:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "3402:6:20",
													"nodeType": "YulIdentifier",
													"src": "3402:6:20"
												},
												{
													"name": "pos",
													"nativeSrc": "3410:3:20",
													"nodeType": "YulIdentifier",
													"src": "3410:3:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nativeSrc": "3368:33:20",
												"nodeType": "YulIdentifier",
												"src": "3368:33:20"
											},
											"nativeSrc": "3368:46:20",
											"nodeType": "YulFunctionCall",
											"src": "3368:46:20"
										},
										"nativeSrc": "3368:46:20",
										"nodeType": "YulExpressionStatement",
										"src": "3368:46:20"
									},
									{
										"nativeSrc": "3423:28:20",
										"nodeType": "YulAssignment",
										"src": "3423:28:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3441:3:20",
													"nodeType": "YulIdentifier",
													"src": "3441:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3446:4:20",
													"nodeType": "YulLiteral",
													"src": "3446:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3437:3:20",
												"nodeType": "YulIdentifier",
												"src": "3437:3:20"
											},
											"nativeSrc": "3437:14:20",
											"nodeType": "YulFunctionCall",
											"src": "3437:14:20"
										},
										"variableNames": [
											{
												"name": "updatedPos",
												"nativeSrc": "3423:10:20",
												"nodeType": "YulIdentifier",
												"src": "3423:10:20"
											}
										]
									}
								]
							},
							"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
							"nativeSrc": "3278:179:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value0",
									"nativeSrc": "3331:6:20",
									"nodeType": "YulTypedName",
									"src": "3331:6:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "3339:3:20",
									"nodeType": "YulTypedName",
									"src": "3339:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updatedPos",
									"nativeSrc": "3347:10:20",
									"nodeType": "YulTypedName",
									"src": "3347:10:20",
									"type": ""
								}
							],
							"src": "3278:179:20"
						},
						{
							"body": {
								"nativeSrc": "3538:38:20",
								"nodeType": "YulBlock",
								"src": "3538:38:20",
								"statements": [
									{
										"nativeSrc": "3548:22:20",
										"nodeType": "YulAssignment",
										"src": "3548:22:20",
										"value": {
											"arguments": [
												{
													"name": "ptr",
													"nativeSrc": "3560:3:20",
													"nodeType": "YulIdentifier",
													"src": "3560:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "3565:4:20",
													"nodeType": "YulLiteral",
													"src": "3565:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3556:3:20",
												"nodeType": "YulIdentifier",
												"src": "3556:3:20"
											},
											"nativeSrc": "3556:14:20",
											"nodeType": "YulFunctionCall",
											"src": "3556:14:20"
										},
										"variableNames": [
											{
												"name": "next",
												"nativeSrc": "3548:4:20",
												"nodeType": "YulIdentifier",
												"src": "3548:4:20"
											}
										]
									}
								]
							},
							"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
							"nativeSrc": "3463:113:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "3525:3:20",
									"nodeType": "YulTypedName",
									"src": "3525:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "next",
									"nativeSrc": "3533:4:20",
									"nodeType": "YulTypedName",
									"src": "3533:4:20",
									"type": ""
								}
							],
							"src": "3463:113:20"
						},
						{
							"body": {
								"nativeSrc": "3736:608:20",
								"nodeType": "YulBlock",
								"src": "3736:608:20",
								"statements": [
									{
										"nativeSrc": "3746:68:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3746:68:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "3808:5:20",
													"nodeType": "YulIdentifier",
													"src": "3808:5:20"
												}
											],
											"functionName": {
												"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nativeSrc": "3760:47:20",
												"nodeType": "YulIdentifier",
												"src": "3760:47:20"
											},
											"nativeSrc": "3760:54:20",
											"nodeType": "YulFunctionCall",
											"src": "3760:54:20"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "3750:6:20",
												"nodeType": "YulTypedName",
												"src": "3750:6:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3823:93:20",
										"nodeType": "YulAssignment",
										"src": "3823:93:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "3904:3:20",
													"nodeType": "YulIdentifier",
													"src": "3904:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "3909:6:20",
													"nodeType": "YulIdentifier",
													"src": "3909:6:20"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nativeSrc": "3830:73:20",
												"nodeType": "YulIdentifier",
												"src": "3830:73:20"
											},
											"nativeSrc": "3830:86:20",
											"nodeType": "YulFunctionCall",
											"src": "3830:86:20"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "3823:3:20",
												"nodeType": "YulIdentifier",
												"src": "3823:3:20"
											}
										]
									},
									{
										"nativeSrc": "3925:71:20",
										"nodeType": "YulVariableDeclaration",
										"src": "3925:71:20",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "3990:5:20",
													"nodeType": "YulIdentifier",
													"src": "3990:5:20"
												}
											],
											"functionName": {
												"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
												"nativeSrc": "3940:49:20",
												"nodeType": "YulIdentifier",
												"src": "3940:49:20"
											},
											"nativeSrc": "3940:56:20",
											"nodeType": "YulFunctionCall",
											"src": "3940:56:20"
										},
										"variables": [
											{
												"name": "baseRef",
												"nativeSrc": "3929:7:20",
												"nodeType": "YulTypedName",
												"src": "3929:7:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "4005:21:20",
										"nodeType": "YulVariableDeclaration",
										"src": "4005:21:20",
										"value": {
											"name": "baseRef",
											"nativeSrc": "4019:7:20",
											"nodeType": "YulIdentifier",
											"src": "4019:7:20"
										},
										"variables": [
											{
												"name": "srcPtr",
												"nativeSrc": "4009:6:20",
												"nodeType": "YulTypedName",
												"src": "4009:6:20",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "4095:224:20",
											"nodeType": "YulBlock",
											"src": "4095:224:20",
											"statements": [
												{
													"nativeSrc": "4109:34:20",
													"nodeType": "YulVariableDeclaration",
													"src": "4109:34:20",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nativeSrc": "4136:6:20",
																"nodeType": "YulIdentifier",
																"src": "4136:6:20"
															}
														],
														"functionName": {
															"name": "mload",
															"nativeSrc": "4130:5:20",
															"nodeType": "YulIdentifier",
															"src": "4130:5:20"
														},
														"nativeSrc": "4130:13:20",
														"nodeType": "YulFunctionCall",
														"src": "4130:13:20"
													},
													"variables": [
														{
															"name": "elementValue0",
															"nativeSrc": "4113:13:20",
															"nodeType": "YulTypedName",
															"src": "4113:13:20",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "4156:70:20",
													"nodeType": "YulAssignment",
													"src": "4156:70:20",
													"value": {
														"arguments": [
															{
																"name": "elementValue0",
																"nativeSrc": "4207:13:20",
																"nodeType": "YulIdentifier",
																"src": "4207:13:20"
															},
															{
																"name": "pos",
																"nativeSrc": "4222:3:20",
																"nodeType": "YulIdentifier",
																"src": "4222:3:20"
															}
														],
														"functionName": {
															"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
															"nativeSrc": "4163:43:20",
															"nodeType": "YulIdentifier",
															"src": "4163:43:20"
														},
														"nativeSrc": "4163:63:20",
														"nodeType": "YulFunctionCall",
														"src": "4163:63:20"
													},
													"variableNames": [
														{
															"name": "pos",
															"nativeSrc": "4156:3:20",
															"nodeType": "YulIdentifier",
															"src": "4156:3:20"
														}
													]
												},
												{
													"nativeSrc": "4239:70:20",
													"nodeType": "YulAssignment",
													"src": "4239:70:20",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nativeSrc": "4302:6:20",
																"nodeType": "YulIdentifier",
																"src": "4302:6:20"
															}
														],
														"functionName": {
															"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
															"nativeSrc": "4249:52:20",
															"nodeType": "YulIdentifier",
															"src": "4249:52:20"
														},
														"nativeSrc": "4249:60:20",
														"nodeType": "YulFunctionCall",
														"src": "4249:60:20"
													},
													"variableNames": [
														{
															"name": "srcPtr",
															"nativeSrc": "4239:6:20",
															"nodeType": "YulIdentifier",
															"src": "4239:6:20"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "4057:1:20",
													"nodeType": "YulIdentifier",
													"src": "4057:1:20"
												},
												{
													"name": "length",
													"nativeSrc": "4060:6:20",
													"nodeType": "YulIdentifier",
													"src": "4060:6:20"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "4054:2:20",
												"nodeType": "YulIdentifier",
												"src": "4054:2:20"
											},
											"nativeSrc": "4054:13:20",
											"nodeType": "YulFunctionCall",
											"src": "4054:13:20"
										},
										"nativeSrc": "4035:284:20",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "4068:18:20",
											"nodeType": "YulBlock",
											"src": "4068:18:20",
											"statements": [
												{
													"nativeSrc": "4070:14:20",
													"nodeType": "YulAssignment",
													"src": "4070:14:20",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "4079:1:20",
																"nodeType": "YulIdentifier",
																"src": "4079:1:20"
															},
															{
																"kind": "number",
																"nativeSrc": "4082:1:20",
																"nodeType": "YulLiteral",
																"src": "4082:1:20",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "4075:3:20",
															"nodeType": "YulIdentifier",
															"src": "4075:3:20"
														},
														"nativeSrc": "4075:9:20",
														"nodeType": "YulFunctionCall",
														"src": "4075:9:20"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "4070:1:20",
															"nodeType": "YulIdentifier",
															"src": "4070:1:20"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "4039:14:20",
											"nodeType": "YulBlock",
											"src": "4039:14:20",
											"statements": [
												{
													"nativeSrc": "4041:10:20",
													"nodeType": "YulVariableDeclaration",
													"src": "4041:10:20",
													"value": {
														"kind": "number",
														"nativeSrc": "4050:1:20",
														"nodeType": "YulLiteral",
														"src": "4050:1:20",
														"type": "",
														"value": "0"
													},
													"variables": [
														{
															"name": "i",
															"nativeSrc": "4045:1:20",
															"nodeType": "YulTypedName",
															"src": "4045:1:20",
															"type": ""
														}
													]
												}
											]
										},
										"src": "4035:284:20"
									},
									{
										"nativeSrc": "4328:10:20",
										"nodeType": "YulAssignment",
										"src": "4328:10:20",
										"value": {
											"name": "pos",
											"nativeSrc": "4335:3:20",
											"nodeType": "YulIdentifier",
											"src": "4335:3:20"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "4328:3:20",
												"nodeType": "YulIdentifier",
												"src": "4328:3:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
							"nativeSrc": "3612:732:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "3715:5:20",
									"nodeType": "YulTypedName",
									"src": "3715:5:20",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "3722:3:20",
									"nodeType": "YulTypedName",
									"src": "3722:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "3731:3:20",
									"nodeType": "YulTypedName",
									"src": "3731:3:20",
									"type": ""
								}
							],
							"src": "3612:732:20"
						},
						{
							"body": {
								"nativeSrc": "4498:225:20",
								"nodeType": "YulBlock",
								"src": "4498:225:20",
								"statements": [
									{
										"nativeSrc": "4508:26:20",
										"nodeType": "YulAssignment",
										"src": "4508:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4520:9:20",
													"nodeType": "YulIdentifier",
													"src": "4520:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "4531:2:20",
													"nodeType": "YulLiteral",
													"src": "4531:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "4516:3:20",
												"nodeType": "YulIdentifier",
												"src": "4516:3:20"
											},
											"nativeSrc": "4516:18:20",
											"nodeType": "YulFunctionCall",
											"src": "4516:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "4508:4:20",
												"nodeType": "YulIdentifier",
												"src": "4508:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4555:9:20",
															"nodeType": "YulIdentifier",
															"src": "4555:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "4566:1:20",
															"nodeType": "YulLiteral",
															"src": "4566:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4551:3:20",
														"nodeType": "YulIdentifier",
														"src": "4551:3:20"
													},
													"nativeSrc": "4551:17:20",
													"nodeType": "YulFunctionCall",
													"src": "4551:17:20"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "4574:4:20",
															"nodeType": "YulIdentifier",
															"src": "4574:4:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "4580:9:20",
															"nodeType": "YulIdentifier",
															"src": "4580:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "4570:3:20",
														"nodeType": "YulIdentifier",
														"src": "4570:3:20"
													},
													"nativeSrc": "4570:20:20",
													"nodeType": "YulFunctionCall",
													"src": "4570:20:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4544:6:20",
												"nodeType": "YulIdentifier",
												"src": "4544:6:20"
											},
											"nativeSrc": "4544:47:20",
											"nodeType": "YulFunctionCall",
											"src": "4544:47:20"
										},
										"nativeSrc": "4544:47:20",
										"nodeType": "YulExpressionStatement",
										"src": "4544:47:20"
									},
									{
										"nativeSrc": "4600:116:20",
										"nodeType": "YulAssignment",
										"src": "4600:116:20",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "4702:6:20",
													"nodeType": "YulIdentifier",
													"src": "4702:6:20"
												},
												{
													"name": "tail",
													"nativeSrc": "4711:4:20",
													"nodeType": "YulIdentifier",
													"src": "4711:4:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nativeSrc": "4608:93:20",
												"nodeType": "YulIdentifier",
												"src": "4608:93:20"
											},
											"nativeSrc": "4608:108:20",
											"nodeType": "YulFunctionCall",
											"src": "4608:108:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "4600:4:20",
												"nodeType": "YulIdentifier",
												"src": "4600:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
							"nativeSrc": "4350:373:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4470:9:20",
									"nodeType": "YulTypedName",
									"src": "4470:9:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "4482:6:20",
									"nodeType": "YulTypedName",
									"src": "4482:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4493:4:20",
									"nodeType": "YulTypedName",
									"src": "4493:4:20",
									"type": ""
								}
							],
							"src": "4350:373:20"
						},
						{
							"body": {
								"nativeSrc": "4792:80:20",
								"nodeType": "YulBlock",
								"src": "4792:80:20",
								"statements": [
									{
										"nativeSrc": "4802:22:20",
										"nodeType": "YulAssignment",
										"src": "4802:22:20",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "4817:6:20",
													"nodeType": "YulIdentifier",
													"src": "4817:6:20"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "4811:5:20",
												"nodeType": "YulIdentifier",
												"src": "4811:5:20"
											},
											"nativeSrc": "4811:13:20",
											"nodeType": "YulFunctionCall",
											"src": "4811:13:20"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "4802:5:20",
												"nodeType": "YulIdentifier",
												"src": "4802:5:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "4860:5:20",
													"nodeType": "YulIdentifier",
													"src": "4860:5:20"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nativeSrc": "4833:26:20",
												"nodeType": "YulIdentifier",
												"src": "4833:26:20"
											},
											"nativeSrc": "4833:33:20",
											"nodeType": "YulFunctionCall",
											"src": "4833:33:20"
										},
										"nativeSrc": "4833:33:20",
										"nodeType": "YulExpressionStatement",
										"src": "4833:33:20"
									}
								]
							},
							"name": "abi_decode_t_uint256_fromMemory",
							"nativeSrc": "4729:143:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "4770:6:20",
									"nodeType": "YulTypedName",
									"src": "4770:6:20",
									"type": ""
								},
								{
									"name": "end",
									"nativeSrc": "4778:3:20",
									"nodeType": "YulTypedName",
									"src": "4778:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "4786:5:20",
									"nodeType": "YulTypedName",
									"src": "4786:5:20",
									"type": ""
								}
							],
							"src": "4729:143:20"
						},
						{
							"body": {
								"nativeSrc": "4989:552:20",
								"nodeType": "YulBlock",
								"src": "4989:552:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "5035:83:20",
											"nodeType": "YulBlock",
											"src": "5035:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "5037:77:20",
															"nodeType": "YulIdentifier",
															"src": "5037:77:20"
														},
														"nativeSrc": "5037:79:20",
														"nodeType": "YulFunctionCall",
														"src": "5037:79:20"
													},
													"nativeSrc": "5037:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "5037:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "5010:7:20",
															"nodeType": "YulIdentifier",
															"src": "5010:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "5019:9:20",
															"nodeType": "YulIdentifier",
															"src": "5019:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5006:3:20",
														"nodeType": "YulIdentifier",
														"src": "5006:3:20"
													},
													"nativeSrc": "5006:23:20",
													"nodeType": "YulFunctionCall",
													"src": "5006:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "5031:2:20",
													"nodeType": "YulLiteral",
													"src": "5031:2:20",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "5002:3:20",
												"nodeType": "YulIdentifier",
												"src": "5002:3:20"
											},
											"nativeSrc": "5002:32:20",
											"nodeType": "YulFunctionCall",
											"src": "5002:32:20"
										},
										"nativeSrc": "4999:119:20",
										"nodeType": "YulIf",
										"src": "4999:119:20"
									},
									{
										"nativeSrc": "5128:128:20",
										"nodeType": "YulBlock",
										"src": "5128:128:20",
										"statements": [
											{
												"nativeSrc": "5143:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "5143:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "5157:1:20",
													"nodeType": "YulLiteral",
													"src": "5157:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5147:6:20",
														"nodeType": "YulTypedName",
														"src": "5147:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5172:74:20",
												"nodeType": "YulAssignment",
												"src": "5172:74:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5218:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "5218:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5229:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5229:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5214:3:20",
																"nodeType": "YulIdentifier",
																"src": "5214:3:20"
															},
															"nativeSrc": "5214:22:20",
															"nodeType": "YulFunctionCall",
															"src": "5214:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5238:7:20",
															"nodeType": "YulIdentifier",
															"src": "5238:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nativeSrc": "5182:31:20",
														"nodeType": "YulIdentifier",
														"src": "5182:31:20"
													},
													"nativeSrc": "5182:64:20",
													"nodeType": "YulFunctionCall",
													"src": "5182:64:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "5172:6:20",
														"nodeType": "YulIdentifier",
														"src": "5172:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "5266:129:20",
										"nodeType": "YulBlock",
										"src": "5266:129:20",
										"statements": [
											{
												"nativeSrc": "5281:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "5281:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "5295:2:20",
													"nodeType": "YulLiteral",
													"src": "5295:2:20",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5285:6:20",
														"nodeType": "YulTypedName",
														"src": "5285:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5311:74:20",
												"nodeType": "YulAssignment",
												"src": "5311:74:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5357:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "5357:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5368:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5368:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5353:3:20",
																"nodeType": "YulIdentifier",
																"src": "5353:3:20"
															},
															"nativeSrc": "5353:22:20",
															"nodeType": "YulFunctionCall",
															"src": "5353:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5377:7:20",
															"nodeType": "YulIdentifier",
															"src": "5377:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nativeSrc": "5321:31:20",
														"nodeType": "YulIdentifier",
														"src": "5321:31:20"
													},
													"nativeSrc": "5321:64:20",
													"nodeType": "YulFunctionCall",
													"src": "5321:64:20"
												},
												"variableNames": [
													{
														"name": "value1",
														"nativeSrc": "5311:6:20",
														"nodeType": "YulIdentifier",
														"src": "5311:6:20"
													}
												]
											}
										]
									},
									{
										"nativeSrc": "5405:129:20",
										"nodeType": "YulBlock",
										"src": "5405:129:20",
										"statements": [
											{
												"nativeSrc": "5420:16:20",
												"nodeType": "YulVariableDeclaration",
												"src": "5420:16:20",
												"value": {
													"kind": "number",
													"nativeSrc": "5434:2:20",
													"nodeType": "YulLiteral",
													"src": "5434:2:20",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "5424:6:20",
														"nodeType": "YulTypedName",
														"src": "5424:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "5450:74:20",
												"nodeType": "YulAssignment",
												"src": "5450:74:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "5496:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "5496:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "5507:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5507:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "5492:3:20",
																"nodeType": "YulIdentifier",
																"src": "5492:3:20"
															},
															"nativeSrc": "5492:22:20",
															"nodeType": "YulFunctionCall",
															"src": "5492:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "5516:7:20",
															"nodeType": "YulIdentifier",
															"src": "5516:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nativeSrc": "5460:31:20",
														"nodeType": "YulIdentifier",
														"src": "5460:31:20"
													},
													"nativeSrc": "5460:64:20",
													"nodeType": "YulFunctionCall",
													"src": "5460:64:20"
												},
												"variableNames": [
													{
														"name": "value2",
														"nativeSrc": "5450:6:20",
														"nodeType": "YulIdentifier",
														"src": "5450:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory",
							"nativeSrc": "4878:663:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4943:9:20",
									"nodeType": "YulTypedName",
									"src": "4943:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "4954:7:20",
									"nodeType": "YulTypedName",
									"src": "4954:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "4966:6:20",
									"nodeType": "YulTypedName",
									"src": "4966:6:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "4974:6:20",
									"nodeType": "YulTypedName",
									"src": "4974:6:20",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "4982:6:20",
									"nodeType": "YulTypedName",
									"src": "4982:6:20",
									"type": ""
								}
							],
							"src": "4878:663:20"
						},
						{
							"body": {
								"nativeSrc": "5575:152:20",
								"nodeType": "YulBlock",
								"src": "5575:152:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5592:1:20",
													"nodeType": "YulLiteral",
													"src": "5592:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "5595:77:20",
													"nodeType": "YulLiteral",
													"src": "5595:77:20",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5585:6:20",
												"nodeType": "YulIdentifier",
												"src": "5585:6:20"
											},
											"nativeSrc": "5585:88:20",
											"nodeType": "YulFunctionCall",
											"src": "5585:88:20"
										},
										"nativeSrc": "5585:88:20",
										"nodeType": "YulExpressionStatement",
										"src": "5585:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5689:1:20",
													"nodeType": "YulLiteral",
													"src": "5689:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "5692:4:20",
													"nodeType": "YulLiteral",
													"src": "5692:4:20",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5682:6:20",
												"nodeType": "YulIdentifier",
												"src": "5682:6:20"
											},
											"nativeSrc": "5682:15:20",
											"nodeType": "YulFunctionCall",
											"src": "5682:15:20"
										},
										"nativeSrc": "5682:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "5682:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5713:1:20",
													"nodeType": "YulLiteral",
													"src": "5713:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "5716:4:20",
													"nodeType": "YulLiteral",
													"src": "5716:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "5706:6:20",
												"nodeType": "YulIdentifier",
												"src": "5706:6:20"
											},
											"nativeSrc": "5706:15:20",
											"nodeType": "YulFunctionCall",
											"src": "5706:15:20"
										},
										"nativeSrc": "5706:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "5706:15:20"
									}
								]
							},
							"name": "panic_error_0x11",
							"nativeSrc": "5547:180:20",
							"nodeType": "YulFunctionDefinition",
							"src": "5547:180:20"
						},
						{
							"body": {
								"nativeSrc": "5784:51:20",
								"nodeType": "YulBlock",
								"src": "5784:51:20",
								"statements": [
									{
										"nativeSrc": "5794:34:20",
										"nodeType": "YulAssignment",
										"src": "5794:34:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "5819:1:20",
													"nodeType": "YulLiteral",
													"src": "5819:1:20",
													"type": "",
													"value": "1"
												},
												{
													"name": "value",
													"nativeSrc": "5822:5:20",
													"nodeType": "YulIdentifier",
													"src": "5822:5:20"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "5815:3:20",
												"nodeType": "YulIdentifier",
												"src": "5815:3:20"
											},
											"nativeSrc": "5815:13:20",
											"nodeType": "YulFunctionCall",
											"src": "5815:13:20"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nativeSrc": "5794:8:20",
												"nodeType": "YulIdentifier",
												"src": "5794:8:20"
											}
										]
									}
								]
							},
							"name": "shift_right_1_unsigned",
							"nativeSrc": "5733:102:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "5765:5:20",
									"nodeType": "YulTypedName",
									"src": "5765:5:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nativeSrc": "5775:8:20",
									"nodeType": "YulTypedName",
									"src": "5775:8:20",
									"type": ""
								}
							],
							"src": "5733:102:20"
						},
						{
							"body": {
								"nativeSrc": "5914:775:20",
								"nodeType": "YulBlock",
								"src": "5914:775:20",
								"statements": [
									{
										"nativeSrc": "5924:15:20",
										"nodeType": "YulAssignment",
										"src": "5924:15:20",
										"value": {
											"name": "_power",
											"nativeSrc": "5933:6:20",
											"nodeType": "YulIdentifier",
											"src": "5933:6:20"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "5924:5:20",
												"nodeType": "YulIdentifier",
												"src": "5924:5:20"
											}
										]
									},
									{
										"nativeSrc": "5948:14:20",
										"nodeType": "YulAssignment",
										"src": "5948:14:20",
										"value": {
											"name": "_base",
											"nativeSrc": "5957:5:20",
											"nodeType": "YulIdentifier",
											"src": "5957:5:20"
										},
										"variableNames": [
											{
												"name": "base",
												"nativeSrc": "5948:4:20",
												"nodeType": "YulIdentifier",
												"src": "5948:4:20"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "6006:677:20",
											"nodeType": "YulBlock",
											"src": "6006:677:20",
											"statements": [
												{
													"body": {
														"nativeSrc": "6094:22:20",
														"nodeType": "YulBlock",
														"src": "6094:22:20",
														"statements": [
															{
																"expression": {
																	"arguments": [],
																	"functionName": {
																		"name": "panic_error_0x11",
																		"nativeSrc": "6096:16:20",
																		"nodeType": "YulIdentifier",
																		"src": "6096:16:20"
																	},
																	"nativeSrc": "6096:18:20",
																	"nodeType": "YulFunctionCall",
																	"src": "6096:18:20"
																},
																"nativeSrc": "6096:18:20",
																"nodeType": "YulExpressionStatement",
																"src": "6096:18:20"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "6072:4:20",
																"nodeType": "YulIdentifier",
																"src": "6072:4:20"
															},
															{
																"arguments": [
																	{
																		"name": "max",
																		"nativeSrc": "6082:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "6082:3:20"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "6087:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "6087:4:20"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "6078:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6078:3:20"
																},
																"nativeSrc": "6078:14:20",
																"nodeType": "YulFunctionCall",
																"src": "6078:14:20"
															}
														],
														"functionName": {
															"name": "gt",
															"nativeSrc": "6069:2:20",
															"nodeType": "YulIdentifier",
															"src": "6069:2:20"
														},
														"nativeSrc": "6069:24:20",
														"nodeType": "YulFunctionCall",
														"src": "6069:24:20"
													},
													"nativeSrc": "6066:50:20",
													"nodeType": "YulIf",
													"src": "6066:50:20"
												},
												{
													"body": {
														"nativeSrc": "6161:419:20",
														"nodeType": "YulBlock",
														"src": "6161:419:20",
														"statements": [
															{
																"nativeSrc": "6541:25:20",
																"nodeType": "YulAssignment",
																"src": "6541:25:20",
																"value": {
																	"arguments": [
																		{
																			"name": "power",
																			"nativeSrc": "6554:5:20",
																			"nodeType": "YulIdentifier",
																			"src": "6554:5:20"
																		},
																		{
																			"name": "base",
																			"nativeSrc": "6561:4:20",
																			"nodeType": "YulIdentifier",
																			"src": "6561:4:20"
																		}
																	],
																	"functionName": {
																		"name": "mul",
																		"nativeSrc": "6550:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "6550:3:20"
																	},
																	"nativeSrc": "6550:16:20",
																	"nodeType": "YulFunctionCall",
																	"src": "6550:16:20"
																},
																"variableNames": [
																	{
																		"name": "power",
																		"nativeSrc": "6541:5:20",
																		"nodeType": "YulIdentifier",
																		"src": "6541:5:20"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "exponent",
																"nativeSrc": "6136:8:20",
																"nodeType": "YulIdentifier",
																"src": "6136:8:20"
															},
															{
																"kind": "number",
																"nativeSrc": "6146:1:20",
																"nodeType": "YulLiteral",
																"src": "6146:1:20",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "6132:3:20",
															"nodeType": "YulIdentifier",
															"src": "6132:3:20"
														},
														"nativeSrc": "6132:16:20",
														"nodeType": "YulFunctionCall",
														"src": "6132:16:20"
													},
													"nativeSrc": "6129:451:20",
													"nodeType": "YulIf",
													"src": "6129:451:20"
												},
												{
													"nativeSrc": "6593:23:20",
													"nodeType": "YulAssignment",
													"src": "6593:23:20",
													"value": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "6605:4:20",
																"nodeType": "YulIdentifier",
																"src": "6605:4:20"
															},
															{
																"name": "base",
																"nativeSrc": "6611:4:20",
																"nodeType": "YulIdentifier",
																"src": "6611:4:20"
															}
														],
														"functionName": {
															"name": "mul",
															"nativeSrc": "6601:3:20",
															"nodeType": "YulIdentifier",
															"src": "6601:3:20"
														},
														"nativeSrc": "6601:15:20",
														"nodeType": "YulFunctionCall",
														"src": "6601:15:20"
													},
													"variableNames": [
														{
															"name": "base",
															"nativeSrc": "6593:4:20",
															"nodeType": "YulIdentifier",
															"src": "6593:4:20"
														}
													]
												},
												{
													"nativeSrc": "6629:44:20",
													"nodeType": "YulAssignment",
													"src": "6629:44:20",
													"value": {
														"arguments": [
															{
																"name": "exponent",
																"nativeSrc": "6664:8:20",
																"nodeType": "YulIdentifier",
																"src": "6664:8:20"
															}
														],
														"functionName": {
															"name": "shift_right_1_unsigned",
															"nativeSrc": "6641:22:20",
															"nodeType": "YulIdentifier",
															"src": "6641:22:20"
														},
														"nativeSrc": "6641:32:20",
														"nodeType": "YulFunctionCall",
														"src": "6641:32:20"
													},
													"variableNames": [
														{
															"name": "exponent",
															"nativeSrc": "6629:8:20",
															"nodeType": "YulIdentifier",
															"src": "6629:8:20"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "5982:8:20",
													"nodeType": "YulIdentifier",
													"src": "5982:8:20"
												},
												{
													"kind": "number",
													"nativeSrc": "5992:1:20",
													"nodeType": "YulLiteral",
													"src": "5992:1:20",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "5979:2:20",
												"nodeType": "YulIdentifier",
												"src": "5979:2:20"
											},
											"nativeSrc": "5979:15:20",
											"nodeType": "YulFunctionCall",
											"src": "5979:15:20"
										},
										"nativeSrc": "5971:712:20",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "5995:2:20",
											"nodeType": "YulBlock",
											"src": "5995:2:20",
											"statements": []
										},
										"pre": {
											"nativeSrc": "5975:3:20",
											"nodeType": "YulBlock",
											"src": "5975:3:20",
											"statements": []
										},
										"src": "5971:712:20"
									}
								]
							},
							"name": "checked_exp_helper",
							"nativeSrc": "5841:848:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "_power",
									"nativeSrc": "5869:6:20",
									"nodeType": "YulTypedName",
									"src": "5869:6:20",
									"type": ""
								},
								{
									"name": "_base",
									"nativeSrc": "5877:5:20",
									"nodeType": "YulTypedName",
									"src": "5877:5:20",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "5884:8:20",
									"nodeType": "YulTypedName",
									"src": "5884:8:20",
									"type": ""
								},
								{
									"name": "max",
									"nativeSrc": "5894:3:20",
									"nodeType": "YulTypedName",
									"src": "5894:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "5902:5:20",
									"nodeType": "YulTypedName",
									"src": "5902:5:20",
									"type": ""
								},
								{
									"name": "base",
									"nativeSrc": "5909:4:20",
									"nodeType": "YulTypedName",
									"src": "5909:4:20",
									"type": ""
								}
							],
							"src": "5841:848:20"
						},
						{
							"body": {
								"nativeSrc": "6755:1013:20",
								"nodeType": "YulBlock",
								"src": "6755:1013:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "6950:20:20",
											"nodeType": "YulBlock",
											"src": "6950:20:20",
											"statements": [
												{
													"nativeSrc": "6952:10:20",
													"nodeType": "YulAssignment",
													"src": "6952:10:20",
													"value": {
														"kind": "number",
														"nativeSrc": "6961:1:20",
														"nodeType": "YulLiteral",
														"src": "6961:1:20",
														"type": "",
														"value": "1"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "6952:5:20",
															"nodeType": "YulIdentifier",
															"src": "6952:5:20"
														}
													]
												},
												{
													"nativeSrc": "6963:5:20",
													"nodeType": "YulLeave",
													"src": "6963:5:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "6940:8:20",
													"nodeType": "YulIdentifier",
													"src": "6940:8:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "6933:6:20",
												"nodeType": "YulIdentifier",
												"src": "6933:6:20"
											},
											"nativeSrc": "6933:16:20",
											"nodeType": "YulFunctionCall",
											"src": "6933:16:20"
										},
										"nativeSrc": "6930:40:20",
										"nodeType": "YulIf",
										"src": "6930:40:20"
									},
									{
										"body": {
											"nativeSrc": "6995:20:20",
											"nodeType": "YulBlock",
											"src": "6995:20:20",
											"statements": [
												{
													"nativeSrc": "6997:10:20",
													"nodeType": "YulAssignment",
													"src": "6997:10:20",
													"value": {
														"kind": "number",
														"nativeSrc": "7006:1:20",
														"nodeType": "YulLiteral",
														"src": "7006:1:20",
														"type": "",
														"value": "0"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "6997:5:20",
															"nodeType": "YulIdentifier",
															"src": "6997:5:20"
														}
													]
												},
												{
													"nativeSrc": "7008:5:20",
													"nodeType": "YulLeave",
													"src": "7008:5:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "6989:4:20",
													"nodeType": "YulIdentifier",
													"src": "6989:4:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "6982:6:20",
												"nodeType": "YulIdentifier",
												"src": "6982:6:20"
											},
											"nativeSrc": "6982:12:20",
											"nodeType": "YulFunctionCall",
											"src": "6982:12:20"
										},
										"nativeSrc": "6979:36:20",
										"nodeType": "YulIf",
										"src": "6979:36:20"
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "7125:20:20",
													"nodeType": "YulBlock",
													"src": "7125:20:20",
													"statements": [
														{
															"nativeSrc": "7127:10:20",
															"nodeType": "YulAssignment",
															"src": "7127:10:20",
															"value": {
																"kind": "number",
																"nativeSrc": "7136:1:20",
																"nodeType": "YulLiteral",
																"src": "7136:1:20",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "7127:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "7127:5:20"
																}
															]
														},
														{
															"nativeSrc": "7138:5:20",
															"nodeType": "YulLeave",
															"src": "7138:5:20"
														}
													]
												},
												"nativeSrc": "7118:27:20",
												"nodeType": "YulCase",
												"src": "7118:27:20",
												"value": {
													"kind": "number",
													"nativeSrc": "7123:1:20",
													"nodeType": "YulLiteral",
													"src": "7123:1:20",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "7169:176:20",
													"nodeType": "YulBlock",
													"src": "7169:176:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "7204:22:20",
																"nodeType": "YulBlock",
																"src": "7204:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "7206:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "7206:16:20"
																			},
																			"nativeSrc": "7206:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "7206:18:20"
																		},
																		"nativeSrc": "7206:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "7206:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "7189:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "7189:8:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7199:3:20",
																		"nodeType": "YulLiteral",
																		"src": "7199:3:20",
																		"type": "",
																		"value": "255"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "7186:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "7186:2:20"
																},
																"nativeSrc": "7186:17:20",
																"nodeType": "YulFunctionCall",
																"src": "7186:17:20"
															},
															"nativeSrc": "7183:43:20",
															"nodeType": "YulIf",
															"src": "7183:43:20"
														},
														{
															"nativeSrc": "7239:25:20",
															"nodeType": "YulAssignment",
															"src": "7239:25:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "7252:1:20",
																		"nodeType": "YulLiteral",
																		"src": "7252:1:20",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "7255:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "7255:8:20"
																	}
																],
																"functionName": {
																	"name": "exp",
																	"nativeSrc": "7248:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7248:3:20"
																},
																"nativeSrc": "7248:16:20",
																"nodeType": "YulFunctionCall",
																"src": "7248:16:20"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "7239:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "7239:5:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "7295:22:20",
																"nodeType": "YulBlock",
																"src": "7295:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "7297:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "7297:16:20"
																			},
																			"nativeSrc": "7297:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "7297:18:20"
																		},
																		"nativeSrc": "7297:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "7297:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power",
																		"nativeSrc": "7283:5:20",
																		"nodeType": "YulIdentifier",
																		"src": "7283:5:20"
																	},
																	{
																		"name": "max",
																		"nativeSrc": "7290:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "7290:3:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "7280:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "7280:2:20"
																},
																"nativeSrc": "7280:14:20",
																"nodeType": "YulFunctionCall",
																"src": "7280:14:20"
															},
															"nativeSrc": "7277:40:20",
															"nodeType": "YulIf",
															"src": "7277:40:20"
														},
														{
															"nativeSrc": "7330:5:20",
															"nodeType": "YulLeave",
															"src": "7330:5:20"
														}
													]
												},
												"nativeSrc": "7154:191:20",
												"nodeType": "YulCase",
												"src": "7154:191:20",
												"value": {
													"kind": "number",
													"nativeSrc": "7159:1:20",
													"nodeType": "YulLiteral",
													"src": "7159:1:20",
													"type": "",
													"value": "2"
												}
											}
										],
										"expression": {
											"name": "base",
											"nativeSrc": "7075:4:20",
											"nodeType": "YulIdentifier",
											"src": "7075:4:20"
										},
										"nativeSrc": "7068:277:20",
										"nodeType": "YulSwitch",
										"src": "7068:277:20"
									},
									{
										"body": {
											"nativeSrc": "7477:123:20",
											"nodeType": "YulBlock",
											"src": "7477:123:20",
											"statements": [
												{
													"nativeSrc": "7491:28:20",
													"nodeType": "YulAssignment",
													"src": "7491:28:20",
													"value": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "7504:4:20",
																"nodeType": "YulIdentifier",
																"src": "7504:4:20"
															},
															{
																"name": "exponent",
																"nativeSrc": "7510:8:20",
																"nodeType": "YulIdentifier",
																"src": "7510:8:20"
															}
														],
														"functionName": {
															"name": "exp",
															"nativeSrc": "7500:3:20",
															"nodeType": "YulIdentifier",
															"src": "7500:3:20"
														},
														"nativeSrc": "7500:19:20",
														"nodeType": "YulFunctionCall",
														"src": "7500:19:20"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "7491:5:20",
															"nodeType": "YulIdentifier",
															"src": "7491:5:20"
														}
													]
												},
												{
													"body": {
														"nativeSrc": "7550:22:20",
														"nodeType": "YulBlock",
														"src": "7550:22:20",
														"statements": [
															{
																"expression": {
																	"arguments": [],
																	"functionName": {
																		"name": "panic_error_0x11",
																		"nativeSrc": "7552:16:20",
																		"nodeType": "YulIdentifier",
																		"src": "7552:16:20"
																	},
																	"nativeSrc": "7552:18:20",
																	"nodeType": "YulFunctionCall",
																	"src": "7552:18:20"
																},
																"nativeSrc": "7552:18:20",
																"nodeType": "YulExpressionStatement",
																"src": "7552:18:20"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "power",
																"nativeSrc": "7538:5:20",
																"nodeType": "YulIdentifier",
																"src": "7538:5:20"
															},
															{
																"name": "max",
																"nativeSrc": "7545:3:20",
																"nodeType": "YulIdentifier",
																"src": "7545:3:20"
															}
														],
														"functionName": {
															"name": "gt",
															"nativeSrc": "7535:2:20",
															"nodeType": "YulIdentifier",
															"src": "7535:2:20"
														},
														"nativeSrc": "7535:14:20",
														"nodeType": "YulFunctionCall",
														"src": "7535:14:20"
													},
													"nativeSrc": "7532:40:20",
													"nodeType": "YulIf",
													"src": "7532:40:20"
												},
												{
													"nativeSrc": "7585:5:20",
													"nodeType": "YulLeave",
													"src": "7585:5:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "base",
																	"nativeSrc": "7380:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "7380:4:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "7386:2:20",
																	"nodeType": "YulLiteral",
																	"src": "7386:2:20",
																	"type": "",
																	"value": "11"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "7377:2:20",
																"nodeType": "YulIdentifier",
																"src": "7377:2:20"
															},
															"nativeSrc": "7377:12:20",
															"nodeType": "YulFunctionCall",
															"src": "7377:12:20"
														},
														{
															"arguments": [
																{
																	"name": "exponent",
																	"nativeSrc": "7394:8:20",
																	"nodeType": "YulIdentifier",
																	"src": "7394:8:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "7404:2:20",
																	"nodeType": "YulLiteral",
																	"src": "7404:2:20",
																	"type": "",
																	"value": "78"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "7391:2:20",
																"nodeType": "YulIdentifier",
																"src": "7391:2:20"
															},
															"nativeSrc": "7391:16:20",
															"nodeType": "YulFunctionCall",
															"src": "7391:16:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7373:3:20",
														"nodeType": "YulIdentifier",
														"src": "7373:3:20"
													},
													"nativeSrc": "7373:35:20",
													"nodeType": "YulFunctionCall",
													"src": "7373:35:20"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "base",
																	"nativeSrc": "7429:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "7429:4:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "7435:3:20",
																	"nodeType": "YulLiteral",
																	"src": "7435:3:20",
																	"type": "",
																	"value": "307"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "7426:2:20",
																"nodeType": "YulIdentifier",
																"src": "7426:2:20"
															},
															"nativeSrc": "7426:13:20",
															"nodeType": "YulFunctionCall",
															"src": "7426:13:20"
														},
														{
															"arguments": [
																{
																	"name": "exponent",
																	"nativeSrc": "7444:8:20",
																	"nodeType": "YulIdentifier",
																	"src": "7444:8:20"
																},
																{
																	"kind": "number",
																	"nativeSrc": "7454:2:20",
																	"nodeType": "YulLiteral",
																	"src": "7454:2:20",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "7441:2:20",
																"nodeType": "YulIdentifier",
																"src": "7441:2:20"
															},
															"nativeSrc": "7441:16:20",
															"nodeType": "YulFunctionCall",
															"src": "7441:16:20"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7422:3:20",
														"nodeType": "YulIdentifier",
														"src": "7422:3:20"
													},
													"nativeSrc": "7422:36:20",
													"nodeType": "YulFunctionCall",
													"src": "7422:36:20"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "7357:2:20",
												"nodeType": "YulIdentifier",
												"src": "7357:2:20"
											},
											"nativeSrc": "7357:111:20",
											"nodeType": "YulFunctionCall",
											"src": "7357:111:20"
										},
										"nativeSrc": "7354:246:20",
										"nodeType": "YulIf",
										"src": "7354:246:20"
									},
									{
										"nativeSrc": "7610:57:20",
										"nodeType": "YulAssignment",
										"src": "7610:57:20",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "7644:1:20",
													"nodeType": "YulLiteral",
													"src": "7644:1:20",
													"type": "",
													"value": "1"
												},
												{
													"name": "base",
													"nativeSrc": "7647:4:20",
													"nodeType": "YulIdentifier",
													"src": "7647:4:20"
												},
												{
													"name": "exponent",
													"nativeSrc": "7653:8:20",
													"nodeType": "YulIdentifier",
													"src": "7653:8:20"
												},
												{
													"name": "max",
													"nativeSrc": "7663:3:20",
													"nodeType": "YulIdentifier",
													"src": "7663:3:20"
												}
											],
											"functionName": {
												"name": "checked_exp_helper",
												"nativeSrc": "7625:18:20",
												"nodeType": "YulIdentifier",
												"src": "7625:18:20"
											},
											"nativeSrc": "7625:42:20",
											"nodeType": "YulFunctionCall",
											"src": "7625:42:20"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "7610:5:20",
												"nodeType": "YulIdentifier",
												"src": "7610:5:20"
											},
											{
												"name": "base",
												"nativeSrc": "7617:4:20",
												"nodeType": "YulIdentifier",
												"src": "7617:4:20"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "7706:22:20",
											"nodeType": "YulBlock",
											"src": "7706:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "7708:16:20",
															"nodeType": "YulIdentifier",
															"src": "7708:16:20"
														},
														"nativeSrc": "7708:18:20",
														"nodeType": "YulFunctionCall",
														"src": "7708:18:20"
													},
													"nativeSrc": "7708:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "7708:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "power",
													"nativeSrc": "7683:5:20",
													"nodeType": "YulIdentifier",
													"src": "7683:5:20"
												},
												{
													"arguments": [
														{
															"name": "max",
															"nativeSrc": "7694:3:20",
															"nodeType": "YulIdentifier",
															"src": "7694:3:20"
														},
														{
															"name": "base",
															"nativeSrc": "7699:4:20",
															"nodeType": "YulIdentifier",
															"src": "7699:4:20"
														}
													],
													"functionName": {
														"name": "div",
														"nativeSrc": "7690:3:20",
														"nodeType": "YulIdentifier",
														"src": "7690:3:20"
													},
													"nativeSrc": "7690:14:20",
													"nodeType": "YulFunctionCall",
													"src": "7690:14:20"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "7680:2:20",
												"nodeType": "YulIdentifier",
												"src": "7680:2:20"
											},
											"nativeSrc": "7680:25:20",
											"nodeType": "YulFunctionCall",
											"src": "7680:25:20"
										},
										"nativeSrc": "7677:51:20",
										"nodeType": "YulIf",
										"src": "7677:51:20"
									},
									{
										"nativeSrc": "7737:25:20",
										"nodeType": "YulAssignment",
										"src": "7737:25:20",
										"value": {
											"arguments": [
												{
													"name": "power",
													"nativeSrc": "7750:5:20",
													"nodeType": "YulIdentifier",
													"src": "7750:5:20"
												},
												{
													"name": "base",
													"nativeSrc": "7757:4:20",
													"nodeType": "YulIdentifier",
													"src": "7757:4:20"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "7746:3:20",
												"nodeType": "YulIdentifier",
												"src": "7746:3:20"
											},
											"nativeSrc": "7746:16:20",
											"nodeType": "YulFunctionCall",
											"src": "7746:16:20"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "7737:5:20",
												"nodeType": "YulIdentifier",
												"src": "7737:5:20"
											}
										]
									}
								]
							},
							"name": "checked_exp_unsigned",
							"nativeSrc": "6695:1073:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "base",
									"nativeSrc": "6725:4:20",
									"nodeType": "YulTypedName",
									"src": "6725:4:20",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "6731:8:20",
									"nodeType": "YulTypedName",
									"src": "6731:8:20",
									"type": ""
								},
								{
									"name": "max",
									"nativeSrc": "6741:3:20",
									"nodeType": "YulTypedName",
									"src": "6741:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "6749:5:20",
									"nodeType": "YulTypedName",
									"src": "6749:5:20",
									"type": ""
								}
							],
							"src": "6695:1073:20"
						},
						{
							"body": {
								"nativeSrc": "7840:219:20",
								"nodeType": "YulBlock",
								"src": "7840:219:20",
								"statements": [
									{
										"nativeSrc": "7850:31:20",
										"nodeType": "YulAssignment",
										"src": "7850:31:20",
										"value": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "7876:4:20",
													"nodeType": "YulIdentifier",
													"src": "7876:4:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "7858:17:20",
												"nodeType": "YulIdentifier",
												"src": "7858:17:20"
											},
											"nativeSrc": "7858:23:20",
											"nodeType": "YulFunctionCall",
											"src": "7858:23:20"
										},
										"variableNames": [
											{
												"name": "base",
												"nativeSrc": "7850:4:20",
												"nodeType": "YulIdentifier",
												"src": "7850:4:20"
											}
										]
									},
									{
										"nativeSrc": "7890:39:20",
										"nodeType": "YulAssignment",
										"src": "7890:39:20",
										"value": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "7920:8:20",
													"nodeType": "YulIdentifier",
													"src": "7920:8:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "7902:17:20",
												"nodeType": "YulIdentifier",
												"src": "7902:17:20"
											},
											"nativeSrc": "7902:27:20",
											"nodeType": "YulFunctionCall",
											"src": "7902:27:20"
										},
										"variableNames": [
											{
												"name": "exponent",
												"nativeSrc": "7890:8:20",
												"nodeType": "YulIdentifier",
												"src": "7890:8:20"
											}
										]
									},
									{
										"nativeSrc": "7939:113:20",
										"nodeType": "YulAssignment",
										"src": "7939:113:20",
										"value": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "7969:4:20",
													"nodeType": "YulIdentifier",
													"src": "7969:4:20"
												},
												{
													"name": "exponent",
													"nativeSrc": "7975:8:20",
													"nodeType": "YulIdentifier",
													"src": "7975:8:20"
												},
												{
													"kind": "number",
													"nativeSrc": "7985:66:20",
													"nodeType": "YulLiteral",
													"src": "7985:66:20",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "checked_exp_unsigned",
												"nativeSrc": "7948:20:20",
												"nodeType": "YulIdentifier",
												"src": "7948:20:20"
											},
											"nativeSrc": "7948:104:20",
											"nodeType": "YulFunctionCall",
											"src": "7948:104:20"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "7939:5:20",
												"nodeType": "YulIdentifier",
												"src": "7939:5:20"
											}
										]
									}
								]
							},
							"name": "checked_exp_t_uint256_t_uint256",
							"nativeSrc": "7774:285:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "base",
									"nativeSrc": "7815:4:20",
									"nodeType": "YulTypedName",
									"src": "7815:4:20",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "7821:8:20",
									"nodeType": "YulTypedName",
									"src": "7821:8:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "7834:5:20",
									"nodeType": "YulTypedName",
									"src": "7834:5:20",
									"type": ""
								}
							],
							"src": "7774:285:20"
						},
						{
							"body": {
								"nativeSrc": "8142:274:20",
								"nodeType": "YulBlock",
								"src": "8142:274:20",
								"statements": [
									{
										"body": {
											"nativeSrc": "8188:83:20",
											"nodeType": "YulBlock",
											"src": "8188:83:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nativeSrc": "8190:77:20",
															"nodeType": "YulIdentifier",
															"src": "8190:77:20"
														},
														"nativeSrc": "8190:79:20",
														"nodeType": "YulFunctionCall",
														"src": "8190:79:20"
													},
													"nativeSrc": "8190:79:20",
													"nodeType": "YulExpressionStatement",
													"src": "8190:79:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "8163:7:20",
															"nodeType": "YulIdentifier",
															"src": "8163:7:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "8172:9:20",
															"nodeType": "YulIdentifier",
															"src": "8172:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "8159:3:20",
														"nodeType": "YulIdentifier",
														"src": "8159:3:20"
													},
													"nativeSrc": "8159:23:20",
													"nodeType": "YulFunctionCall",
													"src": "8159:23:20"
												},
												{
													"kind": "number",
													"nativeSrc": "8184:2:20",
													"nodeType": "YulLiteral",
													"src": "8184:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "8155:3:20",
												"nodeType": "YulIdentifier",
												"src": "8155:3:20"
											},
											"nativeSrc": "8155:32:20",
											"nodeType": "YulFunctionCall",
											"src": "8155:32:20"
										},
										"nativeSrc": "8152:119:20",
										"nodeType": "YulIf",
										"src": "8152:119:20"
									},
									{
										"nativeSrc": "8281:128:20",
										"nodeType": "YulBlock",
										"src": "8281:128:20",
										"statements": [
											{
												"nativeSrc": "8296:15:20",
												"nodeType": "YulVariableDeclaration",
												"src": "8296:15:20",
												"value": {
													"kind": "number",
													"nativeSrc": "8310:1:20",
													"nodeType": "YulLiteral",
													"src": "8310:1:20",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nativeSrc": "8300:6:20",
														"nodeType": "YulTypedName",
														"src": "8300:6:20",
														"type": ""
													}
												]
											},
											{
												"nativeSrc": "8325:74:20",
												"nodeType": "YulAssignment",
												"src": "8325:74:20",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nativeSrc": "8371:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "8371:9:20"
																},
																{
																	"name": "offset",
																	"nativeSrc": "8382:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8382:6:20"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "8367:3:20",
																"nodeType": "YulIdentifier",
																"src": "8367:3:20"
															},
															"nativeSrc": "8367:22:20",
															"nodeType": "YulFunctionCall",
															"src": "8367:22:20"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "8391:7:20",
															"nodeType": "YulIdentifier",
															"src": "8391:7:20"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nativeSrc": "8335:31:20",
														"nodeType": "YulIdentifier",
														"src": "8335:31:20"
													},
													"nativeSrc": "8335:64:20",
													"nodeType": "YulFunctionCall",
													"src": "8335:64:20"
												},
												"variableNames": [
													{
														"name": "value0",
														"nativeSrc": "8325:6:20",
														"nodeType": "YulIdentifier",
														"src": "8325:6:20"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256_fromMemory",
							"nativeSrc": "8065:351:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "8112:9:20",
									"nodeType": "YulTypedName",
									"src": "8112:9:20",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "8123:7:20",
									"nodeType": "YulTypedName",
									"src": "8123:7:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "8135:6:20",
									"nodeType": "YulTypedName",
									"src": "8135:6:20",
									"type": ""
								}
							],
							"src": "8065:351:20"
						},
						{
							"body": {
								"nativeSrc": "8470:362:20",
								"nodeType": "YulBlock",
								"src": "8470:362:20",
								"statements": [
									{
										"nativeSrc": "8480:25:20",
										"nodeType": "YulAssignment",
										"src": "8480:25:20",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "8503:1:20",
													"nodeType": "YulIdentifier",
													"src": "8503:1:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "8485:17:20",
												"nodeType": "YulIdentifier",
												"src": "8485:17:20"
											},
											"nativeSrc": "8485:20:20",
											"nodeType": "YulFunctionCall",
											"src": "8485:20:20"
										},
										"variableNames": [
											{
												"name": "x",
												"nativeSrc": "8480:1:20",
												"nodeType": "YulIdentifier",
												"src": "8480:1:20"
											}
										]
									},
									{
										"nativeSrc": "8514:25:20",
										"nodeType": "YulAssignment",
										"src": "8514:25:20",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "8537:1:20",
													"nodeType": "YulIdentifier",
													"src": "8537:1:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "8519:17:20",
												"nodeType": "YulIdentifier",
												"src": "8519:17:20"
											},
											"nativeSrc": "8519:20:20",
											"nodeType": "YulFunctionCall",
											"src": "8519:20:20"
										},
										"variableNames": [
											{
												"name": "y",
												"nativeSrc": "8514:1:20",
												"nodeType": "YulIdentifier",
												"src": "8514:1:20"
											}
										]
									},
									{
										"nativeSrc": "8548:28:20",
										"nodeType": "YulVariableDeclaration",
										"src": "8548:28:20",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "8571:1:20",
													"nodeType": "YulIdentifier",
													"src": "8571:1:20"
												},
												{
													"name": "y",
													"nativeSrc": "8574:1:20",
													"nodeType": "YulIdentifier",
													"src": "8574:1:20"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "8567:3:20",
												"nodeType": "YulIdentifier",
												"src": "8567:3:20"
											},
											"nativeSrc": "8567:9:20",
											"nodeType": "YulFunctionCall",
											"src": "8567:9:20"
										},
										"variables": [
											{
												"name": "product_raw",
												"nativeSrc": "8552:11:20",
												"nodeType": "YulTypedName",
												"src": "8552:11:20",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "8585:41:20",
										"nodeType": "YulAssignment",
										"src": "8585:41:20",
										"value": {
											"arguments": [
												{
													"name": "product_raw",
													"nativeSrc": "8614:11:20",
													"nodeType": "YulIdentifier",
													"src": "8614:11:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "8596:17:20",
												"nodeType": "YulIdentifier",
												"src": "8596:17:20"
											},
											"nativeSrc": "8596:30:20",
											"nodeType": "YulFunctionCall",
											"src": "8596:30:20"
										},
										"variableNames": [
											{
												"name": "product",
												"nativeSrc": "8585:7:20",
												"nodeType": "YulIdentifier",
												"src": "8585:7:20"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "8803:22:20",
											"nodeType": "YulBlock",
											"src": "8803:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "8805:16:20",
															"nodeType": "YulIdentifier",
															"src": "8805:16:20"
														},
														"nativeSrc": "8805:18:20",
														"nodeType": "YulFunctionCall",
														"src": "8805:18:20"
													},
													"nativeSrc": "8805:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "8805:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "x",
																	"nativeSrc": "8736:1:20",
																	"nodeType": "YulIdentifier",
																	"src": "8736:1:20"
																}
															],
															"functionName": {
																"name": "iszero",
																"nativeSrc": "8729:6:20",
																"nodeType": "YulIdentifier",
																"src": "8729:6:20"
															},
															"nativeSrc": "8729:9:20",
															"nodeType": "YulFunctionCall",
															"src": "8729:9:20"
														},
														{
															"arguments": [
																{
																	"name": "y",
																	"nativeSrc": "8759:1:20",
																	"nodeType": "YulIdentifier",
																	"src": "8759:1:20"
																},
																{
																	"arguments": [
																		{
																			"name": "product",
																			"nativeSrc": "8766:7:20",
																			"nodeType": "YulIdentifier",
																			"src": "8766:7:20"
																		},
																		{
																			"name": "x",
																			"nativeSrc": "8775:1:20",
																			"nodeType": "YulIdentifier",
																			"src": "8775:1:20"
																		}
																	],
																	"functionName": {
																		"name": "div",
																		"nativeSrc": "8762:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "8762:3:20"
																	},
																	"nativeSrc": "8762:15:20",
																	"nodeType": "YulFunctionCall",
																	"src": "8762:15:20"
																}
															],
															"functionName": {
																"name": "eq",
																"nativeSrc": "8756:2:20",
																"nodeType": "YulIdentifier",
																"src": "8756:2:20"
															},
															"nativeSrc": "8756:22:20",
															"nodeType": "YulFunctionCall",
															"src": "8756:22:20"
														}
													],
													"functionName": {
														"name": "or",
														"nativeSrc": "8709:2:20",
														"nodeType": "YulIdentifier",
														"src": "8709:2:20"
													},
													"nativeSrc": "8709:83:20",
													"nodeType": "YulFunctionCall",
													"src": "8709:83:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "8689:6:20",
												"nodeType": "YulIdentifier",
												"src": "8689:6:20"
											},
											"nativeSrc": "8689:113:20",
											"nodeType": "YulFunctionCall",
											"src": "8689:113:20"
										},
										"nativeSrc": "8686:139:20",
										"nodeType": "YulIf",
										"src": "8686:139:20"
									}
								]
							},
							"name": "checked_mul_t_uint256",
							"nativeSrc": "8422:410:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "8453:1:20",
									"nodeType": "YulTypedName",
									"src": "8453:1:20",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "8456:1:20",
									"nodeType": "YulTypedName",
									"src": "8456:1:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "product",
									"nativeSrc": "8462:7:20",
									"nodeType": "YulTypedName",
									"src": "8462:7:20",
									"type": ""
								}
							],
							"src": "8422:410:20"
						},
						{
							"body": {
								"nativeSrc": "8866:152:20",
								"nodeType": "YulBlock",
								"src": "8866:152:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8883:1:20",
													"nodeType": "YulLiteral",
													"src": "8883:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "8886:77:20",
													"nodeType": "YulLiteral",
													"src": "8886:77:20",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8876:6:20",
												"nodeType": "YulIdentifier",
												"src": "8876:6:20"
											},
											"nativeSrc": "8876:88:20",
											"nodeType": "YulFunctionCall",
											"src": "8876:88:20"
										},
										"nativeSrc": "8876:88:20",
										"nodeType": "YulExpressionStatement",
										"src": "8876:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8980:1:20",
													"nodeType": "YulLiteral",
													"src": "8980:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "8983:4:20",
													"nodeType": "YulLiteral",
													"src": "8983:4:20",
													"type": "",
													"value": "0x12"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8973:6:20",
												"nodeType": "YulIdentifier",
												"src": "8973:6:20"
											},
											"nativeSrc": "8973:15:20",
											"nodeType": "YulFunctionCall",
											"src": "8973:15:20"
										},
										"nativeSrc": "8973:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "8973:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "9004:1:20",
													"nodeType": "YulLiteral",
													"src": "9004:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "9007:4:20",
													"nodeType": "YulLiteral",
													"src": "9007:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "8997:6:20",
												"nodeType": "YulIdentifier",
												"src": "8997:6:20"
											},
											"nativeSrc": "8997:15:20",
											"nodeType": "YulFunctionCall",
											"src": "8997:15:20"
										},
										"nativeSrc": "8997:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "8997:15:20"
									}
								]
							},
							"name": "panic_error_0x12",
							"nativeSrc": "8838:180:20",
							"nodeType": "YulFunctionDefinition",
							"src": "8838:180:20"
						},
						{
							"body": {
								"nativeSrc": "9066:143:20",
								"nodeType": "YulBlock",
								"src": "9066:143:20",
								"statements": [
									{
										"nativeSrc": "9076:25:20",
										"nodeType": "YulAssignment",
										"src": "9076:25:20",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "9099:1:20",
													"nodeType": "YulIdentifier",
													"src": "9099:1:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "9081:17:20",
												"nodeType": "YulIdentifier",
												"src": "9081:17:20"
											},
											"nativeSrc": "9081:20:20",
											"nodeType": "YulFunctionCall",
											"src": "9081:20:20"
										},
										"variableNames": [
											{
												"name": "x",
												"nativeSrc": "9076:1:20",
												"nodeType": "YulIdentifier",
												"src": "9076:1:20"
											}
										]
									},
									{
										"nativeSrc": "9110:25:20",
										"nodeType": "YulAssignment",
										"src": "9110:25:20",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "9133:1:20",
													"nodeType": "YulIdentifier",
													"src": "9133:1:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "9115:17:20",
												"nodeType": "YulIdentifier",
												"src": "9115:17:20"
											},
											"nativeSrc": "9115:20:20",
											"nodeType": "YulFunctionCall",
											"src": "9115:20:20"
										},
										"variableNames": [
											{
												"name": "y",
												"nativeSrc": "9110:1:20",
												"nodeType": "YulIdentifier",
												"src": "9110:1:20"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "9157:22:20",
											"nodeType": "YulBlock",
											"src": "9157:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x12",
															"nativeSrc": "9159:16:20",
															"nodeType": "YulIdentifier",
															"src": "9159:16:20"
														},
														"nativeSrc": "9159:18:20",
														"nodeType": "YulFunctionCall",
														"src": "9159:18:20"
													},
													"nativeSrc": "9159:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "9159:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "9154:1:20",
													"nodeType": "YulIdentifier",
													"src": "9154:1:20"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "9147:6:20",
												"nodeType": "YulIdentifier",
												"src": "9147:6:20"
											},
											"nativeSrc": "9147:9:20",
											"nodeType": "YulFunctionCall",
											"src": "9147:9:20"
										},
										"nativeSrc": "9144:35:20",
										"nodeType": "YulIf",
										"src": "9144:35:20"
									},
									{
										"nativeSrc": "9189:14:20",
										"nodeType": "YulAssignment",
										"src": "9189:14:20",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "9198:1:20",
													"nodeType": "YulIdentifier",
													"src": "9198:1:20"
												},
												{
													"name": "y",
													"nativeSrc": "9201:1:20",
													"nodeType": "YulIdentifier",
													"src": "9201:1:20"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "9194:3:20",
												"nodeType": "YulIdentifier",
												"src": "9194:3:20"
											},
											"nativeSrc": "9194:9:20",
											"nodeType": "YulFunctionCall",
											"src": "9194:9:20"
										},
										"variableNames": [
											{
												"name": "r",
												"nativeSrc": "9189:1:20",
												"nodeType": "YulIdentifier",
												"src": "9189:1:20"
											}
										]
									}
								]
							},
							"name": "checked_div_t_uint256",
							"nativeSrc": "9024:185:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "9055:1:20",
									"nodeType": "YulTypedName",
									"src": "9055:1:20",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "9058:1:20",
									"nodeType": "YulTypedName",
									"src": "9058:1:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "r",
									"nativeSrc": "9064:1:20",
									"nodeType": "YulTypedName",
									"src": "9064:1:20",
									"type": ""
								}
							],
							"src": "9024:185:20"
						},
						{
							"body": {
								"nativeSrc": "9259:147:20",
								"nodeType": "YulBlock",
								"src": "9259:147:20",
								"statements": [
									{
										"nativeSrc": "9269:25:20",
										"nodeType": "YulAssignment",
										"src": "9269:25:20",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "9292:1:20",
													"nodeType": "YulIdentifier",
													"src": "9292:1:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "9274:17:20",
												"nodeType": "YulIdentifier",
												"src": "9274:17:20"
											},
											"nativeSrc": "9274:20:20",
											"nodeType": "YulFunctionCall",
											"src": "9274:20:20"
										},
										"variableNames": [
											{
												"name": "x",
												"nativeSrc": "9269:1:20",
												"nodeType": "YulIdentifier",
												"src": "9269:1:20"
											}
										]
									},
									{
										"nativeSrc": "9303:25:20",
										"nodeType": "YulAssignment",
										"src": "9303:25:20",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "9326:1:20",
													"nodeType": "YulIdentifier",
													"src": "9326:1:20"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nativeSrc": "9308:17:20",
												"nodeType": "YulIdentifier",
												"src": "9308:17:20"
											},
											"nativeSrc": "9308:20:20",
											"nodeType": "YulFunctionCall",
											"src": "9308:20:20"
										},
										"variableNames": [
											{
												"name": "y",
												"nativeSrc": "9303:1:20",
												"nodeType": "YulIdentifier",
												"src": "9303:1:20"
											}
										]
									},
									{
										"nativeSrc": "9337:16:20",
										"nodeType": "YulAssignment",
										"src": "9337:16:20",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "9348:1:20",
													"nodeType": "YulIdentifier",
													"src": "9348:1:20"
												},
												{
													"name": "y",
													"nativeSrc": "9351:1:20",
													"nodeType": "YulIdentifier",
													"src": "9351:1:20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "9344:3:20",
												"nodeType": "YulIdentifier",
												"src": "9344:3:20"
											},
											"nativeSrc": "9344:9:20",
											"nodeType": "YulFunctionCall",
											"src": "9344:9:20"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "9337:3:20",
												"nodeType": "YulIdentifier",
												"src": "9337:3:20"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "9377:22:20",
											"nodeType": "YulBlock",
											"src": "9377:22:20",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "9379:16:20",
															"nodeType": "YulIdentifier",
															"src": "9379:16:20"
														},
														"nativeSrc": "9379:18:20",
														"nodeType": "YulFunctionCall",
														"src": "9379:18:20"
													},
													"nativeSrc": "9379:18:20",
													"nodeType": "YulExpressionStatement",
													"src": "9379:18:20"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "9369:1:20",
													"nodeType": "YulIdentifier",
													"src": "9369:1:20"
												},
												{
													"name": "sum",
													"nativeSrc": "9372:3:20",
													"nodeType": "YulIdentifier",
													"src": "9372:3:20"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "9366:2:20",
												"nodeType": "YulIdentifier",
												"src": "9366:2:20"
											},
											"nativeSrc": "9366:10:20",
											"nodeType": "YulFunctionCall",
											"src": "9366:10:20"
										},
										"nativeSrc": "9363:36:20",
										"nodeType": "YulIf",
										"src": "9363:36:20"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nativeSrc": "9215:191:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "9246:1:20",
									"nodeType": "YulTypedName",
									"src": "9246:1:20",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "9249:1:20",
									"nodeType": "YulTypedName",
									"src": "9249:1:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "9255:3:20",
									"nodeType": "YulTypedName",
									"src": "9255:3:20",
									"type": ""
								}
							],
							"src": "9215:191:20"
						},
						{
							"body": {
								"nativeSrc": "9508:73:20",
								"nodeType": "YulBlock",
								"src": "9508:73:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "9525:3:20",
													"nodeType": "YulIdentifier",
													"src": "9525:3:20"
												},
												{
													"name": "length",
													"nativeSrc": "9530:6:20",
													"nodeType": "YulIdentifier",
													"src": "9530:6:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9518:6:20",
												"nodeType": "YulIdentifier",
												"src": "9518:6:20"
											},
											"nativeSrc": "9518:19:20",
											"nodeType": "YulFunctionCall",
											"src": "9518:19:20"
										},
										"nativeSrc": "9518:19:20",
										"nodeType": "YulExpressionStatement",
										"src": "9518:19:20"
									},
									{
										"nativeSrc": "9546:29:20",
										"nodeType": "YulAssignment",
										"src": "9546:29:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "9565:3:20",
													"nodeType": "YulIdentifier",
													"src": "9565:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "9570:4:20",
													"nodeType": "YulLiteral",
													"src": "9570:4:20",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "9561:3:20",
												"nodeType": "YulIdentifier",
												"src": "9561:3:20"
											},
											"nativeSrc": "9561:14:20",
											"nodeType": "YulFunctionCall",
											"src": "9561:14:20"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nativeSrc": "9546:11:20",
												"nodeType": "YulIdentifier",
												"src": "9546:11:20"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nativeSrc": "9412:169:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "9480:3:20",
									"nodeType": "YulTypedName",
									"src": "9480:3:20",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "9485:6:20",
									"nodeType": "YulTypedName",
									"src": "9485:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nativeSrc": "9496:11:20",
									"nodeType": "YulTypedName",
									"src": "9496:11:20",
									"type": ""
								}
							],
							"src": "9412:169:20"
						},
						{
							"body": {
								"nativeSrc": "9693:121:20",
								"nodeType": "YulBlock",
								"src": "9693:121:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "9715:6:20",
															"nodeType": "YulIdentifier",
															"src": "9715:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "9723:1:20",
															"nodeType": "YulLiteral",
															"src": "9723:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9711:3:20",
														"nodeType": "YulIdentifier",
														"src": "9711:3:20"
													},
													"nativeSrc": "9711:14:20",
													"nodeType": "YulFunctionCall",
													"src": "9711:14:20"
												},
												{
													"hexValue": "596f752077616e7420746f206d6f7265206d6f72652076616c7565207468616e",
													"kind": "string",
													"nativeSrc": "9727:34:20",
													"nodeType": "YulLiteral",
													"src": "9727:34:20",
													"type": "",
													"value": "You want to more more value than"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9704:6:20",
												"nodeType": "YulIdentifier",
												"src": "9704:6:20"
											},
											"nativeSrc": "9704:58:20",
											"nodeType": "YulFunctionCall",
											"src": "9704:58:20"
										},
										"nativeSrc": "9704:58:20",
										"nodeType": "YulExpressionStatement",
										"src": "9704:58:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "9783:6:20",
															"nodeType": "YulIdentifier",
															"src": "9783:6:20"
														},
														{
															"kind": "number",
															"nativeSrc": "9791:2:20",
															"nodeType": "YulLiteral",
															"src": "9791:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "9779:3:20",
														"nodeType": "YulIdentifier",
														"src": "9779:3:20"
													},
													"nativeSrc": "9779:15:20",
													"nodeType": "YulFunctionCall",
													"src": "9779:15:20"
												},
												{
													"hexValue": "20616c6c6f776564",
													"kind": "string",
													"nativeSrc": "9796:10:20",
													"nodeType": "YulLiteral",
													"src": "9796:10:20",
													"type": "",
													"value": " allowed"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "9772:6:20",
												"nodeType": "YulIdentifier",
												"src": "9772:6:20"
											},
											"nativeSrc": "9772:35:20",
											"nodeType": "YulFunctionCall",
											"src": "9772:35:20"
										},
										"nativeSrc": "9772:35:20",
										"nodeType": "YulExpressionStatement",
										"src": "9772:35:20"
									}
								]
							},
							"name": "store_literal_in_memory_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2",
							"nativeSrc": "9587:227:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nativeSrc": "9685:6:20",
									"nodeType": "YulTypedName",
									"src": "9685:6:20",
									"type": ""
								}
							],
							"src": "9587:227:20"
						},
						{
							"body": {
								"nativeSrc": "9966:220:20",
								"nodeType": "YulBlock",
								"src": "9966:220:20",
								"statements": [
									{
										"nativeSrc": "9976:74:20",
										"nodeType": "YulAssignment",
										"src": "9976:74:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "10042:3:20",
													"nodeType": "YulIdentifier",
													"src": "10042:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "10047:2:20",
													"nodeType": "YulLiteral",
													"src": "10047:2:20",
													"type": "",
													"value": "40"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "9983:58:20",
												"nodeType": "YulIdentifier",
												"src": "9983:58:20"
											},
											"nativeSrc": "9983:67:20",
											"nodeType": "YulFunctionCall",
											"src": "9983:67:20"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "9976:3:20",
												"nodeType": "YulIdentifier",
												"src": "9976:3:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "10148:3:20",
													"nodeType": "YulIdentifier",
													"src": "10148:3:20"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2",
												"nativeSrc": "10059:88:20",
												"nodeType": "YulIdentifier",
												"src": "10059:88:20"
											},
											"nativeSrc": "10059:93:20",
											"nodeType": "YulFunctionCall",
											"src": "10059:93:20"
										},
										"nativeSrc": "10059:93:20",
										"nodeType": "YulExpressionStatement",
										"src": "10059:93:20"
									},
									{
										"nativeSrc": "10161:19:20",
										"nodeType": "YulAssignment",
										"src": "10161:19:20",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "10172:3:20",
													"nodeType": "YulIdentifier",
													"src": "10172:3:20"
												},
												{
													"kind": "number",
													"nativeSrc": "10177:2:20",
													"nodeType": "YulLiteral",
													"src": "10177:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10168:3:20",
												"nodeType": "YulIdentifier",
												"src": "10168:3:20"
											},
											"nativeSrc": "10168:12:20",
											"nodeType": "YulFunctionCall",
											"src": "10168:12:20"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "10161:3:20",
												"nodeType": "YulIdentifier",
												"src": "10161:3:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2_to_t_string_memory_ptr_fromStack",
							"nativeSrc": "9820:366:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "9954:3:20",
									"nodeType": "YulTypedName",
									"src": "9954:3:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "9962:3:20",
									"nodeType": "YulTypedName",
									"src": "9962:3:20",
									"type": ""
								}
							],
							"src": "9820:366:20"
						},
						{
							"body": {
								"nativeSrc": "10363:248:20",
								"nodeType": "YulBlock",
								"src": "10363:248:20",
								"statements": [
									{
										"nativeSrc": "10373:26:20",
										"nodeType": "YulAssignment",
										"src": "10373:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10385:9:20",
													"nodeType": "YulIdentifier",
													"src": "10385:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "10396:2:20",
													"nodeType": "YulLiteral",
													"src": "10396:2:20",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10381:3:20",
												"nodeType": "YulIdentifier",
												"src": "10381:3:20"
											},
											"nativeSrc": "10381:18:20",
											"nodeType": "YulFunctionCall",
											"src": "10381:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "10373:4:20",
												"nodeType": "YulIdentifier",
												"src": "10373:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10420:9:20",
															"nodeType": "YulIdentifier",
															"src": "10420:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10431:1:20",
															"nodeType": "YulLiteral",
															"src": "10431:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10416:3:20",
														"nodeType": "YulIdentifier",
														"src": "10416:3:20"
													},
													"nativeSrc": "10416:17:20",
													"nodeType": "YulFunctionCall",
													"src": "10416:17:20"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nativeSrc": "10439:4:20",
															"nodeType": "YulIdentifier",
															"src": "10439:4:20"
														},
														{
															"name": "headStart",
															"nativeSrc": "10445:9:20",
															"nodeType": "YulIdentifier",
															"src": "10445:9:20"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "10435:3:20",
														"nodeType": "YulIdentifier",
														"src": "10435:3:20"
													},
													"nativeSrc": "10435:20:20",
													"nodeType": "YulFunctionCall",
													"src": "10435:20:20"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10409:6:20",
												"nodeType": "YulIdentifier",
												"src": "10409:6:20"
											},
											"nativeSrc": "10409:47:20",
											"nodeType": "YulFunctionCall",
											"src": "10409:47:20"
										},
										"nativeSrc": "10409:47:20",
										"nodeType": "YulExpressionStatement",
										"src": "10409:47:20"
									},
									{
										"nativeSrc": "10465:139:20",
										"nodeType": "YulAssignment",
										"src": "10465:139:20",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nativeSrc": "10599:4:20",
													"nodeType": "YulIdentifier",
													"src": "10599:4:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "10473:124:20",
												"nodeType": "YulIdentifier",
												"src": "10473:124:20"
											},
											"nativeSrc": "10473:131:20",
											"nodeType": "YulFunctionCall",
											"src": "10473:131:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "10465:4:20",
												"nodeType": "YulIdentifier",
												"src": "10465:4:20"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "10192:419:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "10343:9:20",
									"nodeType": "YulTypedName",
									"src": "10343:9:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "10358:4:20",
									"nodeType": "YulTypedName",
									"src": "10358:4:20",
									"type": ""
								}
							],
							"src": "10192:419:20"
						},
						{
							"body": {
								"nativeSrc": "10743:206:20",
								"nodeType": "YulBlock",
								"src": "10743:206:20",
								"statements": [
									{
										"nativeSrc": "10753:26:20",
										"nodeType": "YulAssignment",
										"src": "10753:26:20",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10765:9:20",
													"nodeType": "YulIdentifier",
													"src": "10765:9:20"
												},
												{
													"kind": "number",
													"nativeSrc": "10776:2:20",
													"nodeType": "YulLiteral",
													"src": "10776:2:20",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10761:3:20",
												"nodeType": "YulIdentifier",
												"src": "10761:3:20"
											},
											"nativeSrc": "10761:18:20",
											"nodeType": "YulFunctionCall",
											"src": "10761:18:20"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "10753:4:20",
												"nodeType": "YulIdentifier",
												"src": "10753:4:20"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "10833:6:20",
													"nodeType": "YulIdentifier",
													"src": "10833:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10846:9:20",
															"nodeType": "YulIdentifier",
															"src": "10846:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10857:1:20",
															"nodeType": "YulLiteral",
															"src": "10857:1:20",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10842:3:20",
														"nodeType": "YulIdentifier",
														"src": "10842:3:20"
													},
													"nativeSrc": "10842:17:20",
													"nodeType": "YulFunctionCall",
													"src": "10842:17:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "10789:43:20",
												"nodeType": "YulIdentifier",
												"src": "10789:43:20"
											},
											"nativeSrc": "10789:71:20",
											"nodeType": "YulFunctionCall",
											"src": "10789:71:20"
										},
										"nativeSrc": "10789:71:20",
										"nodeType": "YulExpressionStatement",
										"src": "10789:71:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "10914:6:20",
													"nodeType": "YulIdentifier",
													"src": "10914:6:20"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10927:9:20",
															"nodeType": "YulIdentifier",
															"src": "10927:9:20"
														},
														{
															"kind": "number",
															"nativeSrc": "10938:2:20",
															"nodeType": "YulLiteral",
															"src": "10938:2:20",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10923:3:20",
														"nodeType": "YulIdentifier",
														"src": "10923:3:20"
													},
													"nativeSrc": "10923:18:20",
													"nodeType": "YulFunctionCall",
													"src": "10923:18:20"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "10870:43:20",
												"nodeType": "YulIdentifier",
												"src": "10870:43:20"
											},
											"nativeSrc": "10870:72:20",
											"nodeType": "YulFunctionCall",
											"src": "10870:72:20"
										},
										"nativeSrc": "10870:72:20",
										"nodeType": "YulExpressionStatement",
										"src": "10870:72:20"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
							"nativeSrc": "10617:332:20",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "10707:9:20",
									"nodeType": "YulTypedName",
									"src": "10707:9:20",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "10719:6:20",
									"nodeType": "YulTypedName",
									"src": "10719:6:20",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "10727:6:20",
									"nodeType": "YulTypedName",
									"src": "10727:6:20",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "10738:4:20",
									"nodeType": "YulTypedName",
									"src": "10738:4:20",
									"type": ""
								}
							],
							"src": "10617:332:20"
						},
						{
							"body": {
								"nativeSrc": "10983:152:20",
								"nodeType": "YulBlock",
								"src": "10983:152:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "11000:1:20",
													"nodeType": "YulLiteral",
													"src": "11000:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "11003:77:20",
													"nodeType": "YulLiteral",
													"src": "11003:77:20",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10993:6:20",
												"nodeType": "YulIdentifier",
												"src": "10993:6:20"
											},
											"nativeSrc": "10993:88:20",
											"nodeType": "YulFunctionCall",
											"src": "10993:88:20"
										},
										"nativeSrc": "10993:88:20",
										"nodeType": "YulExpressionStatement",
										"src": "10993:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "11097:1:20",
													"nodeType": "YulLiteral",
													"src": "11097:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "11100:4:20",
													"nodeType": "YulLiteral",
													"src": "11100:4:20",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11090:6:20",
												"nodeType": "YulIdentifier",
												"src": "11090:6:20"
											},
											"nativeSrc": "11090:15:20",
											"nodeType": "YulFunctionCall",
											"src": "11090:15:20"
										},
										"nativeSrc": "11090:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "11090:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "11121:1:20",
													"nodeType": "YulLiteral",
													"src": "11121:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "11124:4:20",
													"nodeType": "YulLiteral",
													"src": "11124:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "11114:6:20",
												"nodeType": "YulIdentifier",
												"src": "11114:6:20"
											},
											"nativeSrc": "11114:15:20",
											"nodeType": "YulFunctionCall",
											"src": "11114:15:20"
										},
										"nativeSrc": "11114:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "11114:15:20"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "10955:180:20",
							"nodeType": "YulFunctionDefinition",
							"src": "10955:180:20"
						},
						{
							"body": {
								"nativeSrc": "11169:152:20",
								"nodeType": "YulBlock",
								"src": "11169:152:20",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "11186:1:20",
													"nodeType": "YulLiteral",
													"src": "11186:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "11189:77:20",
													"nodeType": "YulLiteral",
													"src": "11189:77:20",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11179:6:20",
												"nodeType": "YulIdentifier",
												"src": "11179:6:20"
											},
											"nativeSrc": "11179:88:20",
											"nodeType": "YulFunctionCall",
											"src": "11179:88:20"
										},
										"nativeSrc": "11179:88:20",
										"nodeType": "YulExpressionStatement",
										"src": "11179:88:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "11283:1:20",
													"nodeType": "YulLiteral",
													"src": "11283:1:20",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "11286:4:20",
													"nodeType": "YulLiteral",
													"src": "11286:4:20",
													"type": "",
													"value": "0x32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11276:6:20",
												"nodeType": "YulIdentifier",
												"src": "11276:6:20"
											},
											"nativeSrc": "11276:15:20",
											"nodeType": "YulFunctionCall",
											"src": "11276:15:20"
										},
										"nativeSrc": "11276:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "11276:15:20"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "11307:1:20",
													"nodeType": "YulLiteral",
													"src": "11307:1:20",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "11310:4:20",
													"nodeType": "YulLiteral",
													"src": "11310:4:20",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "11300:6:20",
												"nodeType": "YulIdentifier",
												"src": "11300:6:20"
											},
											"nativeSrc": "11300:15:20",
											"nodeType": "YulFunctionCall",
											"src": "11300:15:20"
										},
										"nativeSrc": "11300:15:20",
										"nodeType": "YulExpressionStatement",
										"src": "11300:15:20"
									}
								]
							},
							"name": "panic_error_0x32",
							"nativeSrc": "11141:180:20",
							"nodeType": "YulFunctionDefinition",
							"src": "11141:180:20"
						}
					]
				},
				"contents": "{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint256(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2(memPtr) {\n\n        mstore(add(memPtr, 0), \"You want to more more value than\")\n\n        mstore(add(memPtr, 32), \" allowed\")\n\n    }\n\n    function abi_encode_t_stringliteral_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 40)\n        store_literal_in_memory_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7ef02c130a2fe7283001d17c0aeb233af26189f8bb0c9139cb3ae26b89cb9ac2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n}\n",
				"id": 20,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {},
		"linkReferences": {},
		"object": "608060405234801561001057600080fd5b506004361061009e5760003560e01c80639a78e72e116100665780639a78e72e146101495780639b45293114610179578063c9a396e914610197578063cbddb785146101c7578063d4d40086146101f75761009e565b80631bf01e9b146100a35780633b2e5f94146100c15780633e413bee146100f15780634b8a35291461010f5780637c1f85601461012b575b600080fd5b6100ab610215565b6040516100b89190610ca3565b60405180910390f35b6100db60048036038101906100d69190610cef565b61023f565b6040516100e89190610d35565b60405180910390f35b6100f96103a6565b6040516101069190610ca3565b60405180910390f35b61012960048036038101906101249190610d7c565b6103cc565b005b610133610689565b6040516101409190610e7a565b60405180910390f35b610163600480360381019061015e9190610cef565b610856565b6040516101709190610d35565b60405180910390f35b61018161093f565b60405161018e9190610ca3565b60405180910390f35b6101b160048036038101906101ac9190610cef565b610965565b6040516101be9190610ca3565b60405180910390f35b6101e160048036038101906101dc9190610cef565b610a69565b6040516101ee9190610e7a565b60405180910390f35b6101ff610c38565b60405161020c9190610ca3565b60405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401606060405180830381865afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610eb1565b925092509250600081600a6102e99190611066565b8460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac75409a896040518263ffffffff1660e01b81526004016103439190610ca3565b602060405180830381865afa158015610360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038491906110b1565b61038e91906110de565b610398919061114f565b905080945050505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461042657600080fd5b60003073ffffffffffffffffffffffffffffffffffffffff16633b2e5f94336040518263ffffffff1660e01b81526004016104619190610ca3565b602060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a291906110b1565b905060006064600560009054906101000a900460ff1660ff16836104c691906110de565b6104d0919061114f565b905060003073ffffffffffffffffffffffffffffffffffffffff16639a78e72e336040518263ffffffff1660e01b815260040161050d9190610ca3565b602060405180830381865afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e91906110b1565b905081848261055d9190611180565b1061059d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490611237565b60405180910390fd5b83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ec9190611180565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663683ae08333866040518363ffffffff1660e01b8152600401610650929190611257565b600060405180830381600087803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b505050505050505050565b606060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401606060405180830381865afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190610eb1565b9250925092506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401602060405180830381865afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b991906110b1565b90506000600267ffffffffffffffff8111156107d8576107d7611280565b5b6040519080825280602002602001820160405280156108065781602001602082028036833780820191505090505b509050848160008151811061081e5761081d6112af565b5b602002602001018181525050818160018151811061083f5761083e6112af565b5b602002602001018181525050809550505050505090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e54f08806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ea91906110b1565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461093491906110de565b905080915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109e45760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a64565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a6357600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a64565b5b919050565b60606000600267ffffffffffffffff811115610a8857610a87611280565b5b604051908082528060200260200182016040528015610ab65781602001602082028036833780820191505090505b50905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac75409a846040518263ffffffff1660e01b8152600401610b129190610ca3565b602060405180830381865afa158015610b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5391906110b1565b81600081518110610b6757610b666112af565b5b602002602001018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac75409a846040518263ffffffff1660e01b8152600401610bce9190610ca3565b602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f91906110b1565b81600181518110610c2357610c226112af565b5b60200260200101818152505080915050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c8d82610c62565b9050919050565b610c9d81610c82565b82525050565b6000602082019050610cb86000830184610c94565b92915050565b600080fd5b610ccc81610c82565b8114610cd757600080fd5b50565b600081359050610ce981610cc3565b92915050565b600060208284031215610d0557610d04610cbe565b5b6000610d1384828501610cda565b91505092915050565b6000819050919050565b610d2f81610d1c565b82525050565b6000602082019050610d4a6000830184610d26565b92915050565b610d5981610d1c565b8114610d6457600080fd5b50565b600081359050610d7681610d50565b92915050565b60008060408385031215610d9357610d92610cbe565b5b6000610da185828601610cda565b9250506020610db285828601610d67565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610df181610d1c565b82525050565b6000610e038383610de8565b60208301905092915050565b6000602082019050919050565b6000610e2782610dbc565b610e318185610dc7565b9350610e3c83610dd8565b8060005b83811015610e6d578151610e548882610df7565b9750610e5f83610e0f565b925050600181019050610e40565b5085935050505092915050565b60006020820190508181036000830152610e948184610e1c565b905092915050565b600081519050610eab81610d50565b92915050565b600080600060608486031215610eca57610ec9610cbe565b5b6000610ed886828701610e9c565b9350506020610ee986828701610e9c565b9250506040610efa86828701610e9c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610f8a57808604811115610f6657610f65610f04565b5b6001851615610f755780820291505b8081029050610f8385610f33565b9450610f4a565b94509492505050565b600082610fa3576001905061105f565b81610fb1576000905061105f565b8160018114610fc75760028114610fd157611000565b600191505061105f565b60ff841115610fe357610fe2610f04565b5b8360020a915084821115610ffa57610ff9610f04565b5b5061105f565b5060208310610133831016604e8410600b84101617156110355782820a9050838111156110305761102f610f04565b5b61105f565b6110428484846001610f40565b9250905081840481111561105957611058610f04565b5b81810290505b9392505050565b600061107182610d1c565b915061107c83610d1c565b92506110a97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610f93565b905092915050565b6000602082840312156110c7576110c6610cbe565b5b60006110d584828501610e9c565b91505092915050565b60006110e982610d1c565b91506110f483610d1c565b925082820261110281610d1c565b9150828204841483151761111957611118610f04565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061115a82610d1c565b915061116583610d1c565b92508261117557611174611120565b5b828204905092915050565b600061118b82610d1c565b915061119683610d1c565b92508282019050808211156111ae576111ad610f04565b5b92915050565b600082825260208201905092915050565b7f596f752077616e7420746f206d6f7265206d6f72652076616c7565207468616e60008201527f20616c6c6f776564000000000000000000000000000000000000000000000000602082015250565b60006112216028836111b4565b915061122c826111c5565b604082019050919050565b6000602082019050818103600083015261125081611214565b9050919050565b600060408201905061126c6000830185610c94565b6112796020830184610d26565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220adf108b572513d6306e4cb6f0af3613af5f53e6a8bfab60ed1ac42ed90af69f864736f6c63430008180033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9A78E72E GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x9A78E72E EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x9B452931 EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0xC9A396E9 EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0xCBDDB785 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0xD4D40086 EQ PUSH2 0x1F7 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1BF01E9B EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x3B2E5F94 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x3E413BEE EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x4B8A3529 EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x7C1F8560 EQ PUSH2 0x12B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0x215 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xD6 SWAP2 SWAP1 PUSH2 0xCEF JUMP JUMPDEST PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xD35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF9 PUSH2 0x3A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x106 SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x129 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xD7C JUMP JUMPDEST PUSH2 0x3CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x133 PUSH2 0x689 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x140 SWAP2 SWAP1 PUSH2 0xE7A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x163 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15E SWAP2 SWAP1 PUSH2 0xCEF JUMP JUMPDEST PUSH2 0x856 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x170 SWAP2 SWAP1 PUSH2 0xD35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x181 PUSH2 0x93F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18E SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AC SWAP2 SWAP1 PUSH2 0xCEF JUMP JUMPDEST PUSH2 0x965 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DC SWAP2 SWAP1 PUSH2 0xCEF JUMP JUMPDEST PUSH2 0xA69 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0xE7A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FF PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20C SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE54F0880 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D4 SWAP2 SWAP1 PUSH2 0xEB1 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP2 PUSH1 0xA PUSH2 0x2E9 SWAP2 SWAP1 PUSH2 0x1066 JUMP JUMPDEST DUP5 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAC75409A DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x343 SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x360 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x384 SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST PUSH2 0x38E SWAP2 SWAP1 PUSH2 0x10DE JUMP JUMPDEST PUSH2 0x398 SWAP2 SWAP1 PUSH2 0x114F JUMP JUMPDEST SWAP1 POP DUP1 SWAP5 POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3B2E5F94 CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x461 SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x47E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A2 SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND DUP4 PUSH2 0x4C6 SWAP2 SWAP1 PUSH2 0x10DE JUMP JUMPDEST PUSH2 0x4D0 SWAP2 SWAP1 PUSH2 0x114F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9A78E72E CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x50D SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x52A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x54E SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST SWAP1 POP DUP2 DUP5 DUP3 PUSH2 0x55D SWAP2 SWAP1 PUSH2 0x1180 JUMP JUMPDEST LT PUSH2 0x59D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x1237 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x5EC SWAP2 SWAP1 PUSH2 0x1180 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x683AE083 CALLER DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x650 SWAP3 SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x67E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE54F0880 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x720 SWAP2 SWAP1 PUSH2 0xEB1 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE54F0880 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x795 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7B9 SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7D8 JUMPI PUSH2 0x7D7 PUSH2 0x1280 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x806 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP5 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x81E JUMPI PUSH2 0x81D PUSH2 0x12AF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x83F JUMPI PUSH2 0x83E PUSH2 0x12AF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE54F0880 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8EA SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x934 SWAP2 SWAP1 PUSH2 0x10DE JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9E4 JUMPI PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0xA64 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA63 JUMPI PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0xA64 JUMP JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA88 JUMPI PUSH2 0xA87 PUSH2 0x1280 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAB6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAC75409A DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB12 SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB2F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB53 SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB67 JUMPI PUSH2 0xB66 PUSH2 0x12AF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAC75409A DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCE SWAP2 SWAP1 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBEB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC0F SWAP2 SWAP1 PUSH2 0x10B1 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xC23 JUMPI PUSH2 0xC22 PUSH2 0x12AF JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8D DUP3 PUSH2 0xC62 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC9D DUP2 PUSH2 0xC82 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCB8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC94 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCCC DUP2 PUSH2 0xC82 JUMP JUMPDEST DUP2 EQ PUSH2 0xCD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xCE9 DUP2 PUSH2 0xCC3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD05 JUMPI PUSH2 0xD04 PUSH2 0xCBE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD13 DUP5 DUP3 DUP6 ADD PUSH2 0xCDA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD2F DUP2 PUSH2 0xD1C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD4A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD26 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD59 DUP2 PUSH2 0xD1C JUMP JUMPDEST DUP2 EQ PUSH2 0xD64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD76 DUP2 PUSH2 0xD50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD93 JUMPI PUSH2 0xD92 PUSH2 0xCBE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDA1 DUP6 DUP3 DUP7 ADD PUSH2 0xCDA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xDB2 DUP6 DUP3 DUP7 ADD PUSH2 0xD67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDF1 DUP2 PUSH2 0xD1C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE03 DUP4 DUP4 PUSH2 0xDE8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE27 DUP3 PUSH2 0xDBC JUMP JUMPDEST PUSH2 0xE31 DUP2 DUP6 PUSH2 0xDC7 JUMP JUMPDEST SWAP4 POP PUSH2 0xE3C DUP4 PUSH2 0xDD8 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE6D JUMPI DUP2 MLOAD PUSH2 0xE54 DUP9 DUP3 PUSH2 0xDF7 JUMP JUMPDEST SWAP8 POP PUSH2 0xE5F DUP4 PUSH2 0xE0F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xE40 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE94 DUP2 DUP5 PUSH2 0xE1C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xEAB DUP2 PUSH2 0xD50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xECA JUMPI PUSH2 0xEC9 PUSH2 0xCBE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xED8 DUP7 DUP3 DUP8 ADD PUSH2 0xE9C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xEE9 DUP7 DUP3 DUP8 ADD PUSH2 0xE9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xEFA DUP7 DUP3 DUP8 ADD PUSH2 0xE9C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0xF8A JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0xF66 JUMPI PUSH2 0xF65 PUSH2 0xF04 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0xF75 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0xF83 DUP6 PUSH2 0xF33 JUMP JUMPDEST SWAP5 POP PUSH2 0xF4A JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xFA3 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x105F JUMP JUMPDEST DUP2 PUSH2 0xFB1 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x105F JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xFC7 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xFD1 JUMPI PUSH2 0x1000 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x105F JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xFE3 JUMPI PUSH2 0xFE2 PUSH2 0xF04 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0xFFA JUMPI PUSH2 0xFF9 PUSH2 0xF04 JUMP JUMPDEST JUMPDEST POP PUSH2 0x105F JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1035 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x1030 JUMPI PUSH2 0x102F PUSH2 0xF04 JUMP JUMPDEST JUMPDEST PUSH2 0x105F JUMP JUMPDEST PUSH2 0x1042 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0xF40 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x1059 JUMPI PUSH2 0x1058 PUSH2 0xF04 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1071 DUP3 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP PUSH2 0x107C DUP4 PUSH2 0xD1C JUMP JUMPDEST SWAP3 POP PUSH2 0x10A9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0xF93 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C7 JUMPI PUSH2 0x10C6 PUSH2 0xCBE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10D5 DUP5 DUP3 DUP6 ADD PUSH2 0xE9C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E9 DUP3 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP PUSH2 0x10F4 DUP4 PUSH2 0xD1C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x1102 DUP2 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x1119 JUMPI PUSH2 0x1118 PUSH2 0xF04 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x115A DUP3 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP PUSH2 0x1165 DUP4 PUSH2 0xD1C JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1175 JUMPI PUSH2 0x1174 PUSH2 0x1120 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x118B DUP3 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP PUSH2 0x1196 DUP4 PUSH2 0xD1C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x11AE JUMPI PUSH2 0x11AD PUSH2 0xF04 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F752077616E7420746F206D6F7265206D6F72652076616C7565207468616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20616C6C6F776564000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1221 PUSH1 0x28 DUP4 PUSH2 0x11B4 JUMP JUMPDEST SWAP2 POP PUSH2 0x122C DUP3 PUSH2 0x11C5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1250 DUP2 PUSH2 0x1214 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x126C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xC94 JUMP JUMPDEST PUSH2 0x1279 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD26 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD CALL ADDMOD 0xB5 PUSH19 0x513D6306E4CB6F0AF3613AF5F53E6A8BFAB60E 0xD1 0xAC TIMESTAMP 0xED SWAP1 0xAF PUSH10 0xF864736F6C6343000818 STOP CALLER ",
		"sourceMap": "114:2523:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;890:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2322:302;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;223:19;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1648:499;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;981:366;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2153:163;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;198:19;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;549:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1353:289;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;799:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;890;930:7;963:4;;;;;;;;;;;948:20;;890:85;:::o;2322:302::-;2384:7;2403:17;2422:18;2442:17;2463:11;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2402:88;;;;;;2500:19;2579:9;2573:2;:15;;;;:::i;:::-;2560:9;2522:11;;;;;;;;;;:29;;;2552:4;2522:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:47;;;;:::i;:::-;:67;;;;:::i;:::-;2500:89;;2606:11;2599:18;;;;;;2322:302;;;:::o;223:19::-;;;;;;;;;;;;;:::o;1648:499::-;1731:4;;;;;;;;;;;1722:13;;:5;:13;;;1714:22;;;;;;1746:23;1772:4;:20;;;1793:10;1772:32;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1746:58;;1814:22;1867:3;1857:7;;;;;;;;;;;1839:25;;:15;:25;;;;:::i;:::-;:31;;;;:::i;:::-;1814:56;;1880:23;1906:4;:12;;;1919:10;1906:24;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1880:50;;1977:14;1967:6;1949:15;:24;;;;:::i;:::-;1948:43;1940:96;;;;;;;;;;;;:::i;:::-;;;;;;;;;2074:6;2046:12;:24;2059:10;2046:24;;;;;;;;;;;;;;;;:34;;;;;;;:::i;:::-;;;;;;;;2090:11;;;;;;;;;;;:30;;;2121:10;2133:6;2090:50;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1704:443;;;1648:499;;:::o;981:366::-;1030:16;1059:17;1078:18;1098:17;1119:11;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1058:88;;;;;;1156:17;1176:11;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1156:47;;1213:23;1253:1;1239:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1213:42;;1277:9;1265:6;1272:1;1265:9;;;;;;;;:::i;:::-;;;;;;;:21;;;;;1308:9;1296:6;1303:1;1296:9;;;;;;;;:::i;:::-;;;;;;;:21;;;;;1334:6;1327:13;;;;;;;981:366;:::o;2153:163::-;2207:7;2225:12;2261:11;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2240:12;:18;2253:4;2240:18;;;;;;;;;;;;;;;;:48;;;;:::i;:::-;2225:63;;2305:4;2298:11;;;2153:163;;;:::o;198:19::-;;;;;;;;;;;;;:::o;549:244::-;605:22;652:4;;;;;;;;;;;643:13;;:5;:13;;;639:148;;687:11;;;;;;;;;;672:27;;;;639:148;729:4;;;;;;;;;;;720:13;;:5;:13;;;716:71;;764:11;;;;;;;;;;;749:27;;;;716:71;549:244;;;;:::o;1353:289::-;1420:16;1448:25;1490:1;1476:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1448:44;;1516:11;;;;;;;;;;:29;;;1546:4;1516:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1502:8;1511:1;1502:11;;;;;;;;:::i;:::-;;;;;;;:49;;;;;1575:11;;;;;;;;;;;:29;;;1605:4;1575:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1561:8;1570:1;1561:11;;;;;;;;:::i;:::-;;;;;;;:49;;;;;1627:8;1620:15;;;1353:289;;;:::o;799:85::-;839:7;872:4;;;;;;;;;;;857:20;;799:85;:::o;7:126:20:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;674:117::-;783:1;780;773:12;920:122;993:24;1011:5;993:24;:::i;:::-;986:5;983:35;973:63;;1032:1;1029;1022:12;973:63;920:122;:::o;1048:139::-;1094:5;1132:6;1119:20;1110:29;;1148:33;1175:5;1148:33;:::i;:::-;1048:139;;;;:::o;1193:329::-;1252:6;1301:2;1289:9;1280:7;1276:23;1272:32;1269:119;;;1307:79;;:::i;:::-;1269:119;1427:1;1452:53;1497:7;1488:6;1477:9;1473:22;1452:53;:::i;:::-;1442:63;;1398:117;1193:329;;;;:::o;1528:77::-;1565:7;1594:5;1583:16;;1528:77;;;:::o;1611:118::-;1698:24;1716:5;1698:24;:::i;:::-;1693:3;1686:37;1611:118;;:::o;1735:222::-;1828:4;1866:2;1855:9;1851:18;1843:26;;1879:71;1947:1;1936:9;1932:17;1923:6;1879:71;:::i;:::-;1735:222;;;;:::o;1963:122::-;2036:24;2054:5;2036:24;:::i;:::-;2029:5;2026:35;2016:63;;2075:1;2072;2065:12;2016:63;1963:122;:::o;2091:139::-;2137:5;2175:6;2162:20;2153:29;;2191:33;2218:5;2191:33;:::i;:::-;2091:139;;;;:::o;2236:474::-;2304:6;2312;2361:2;2349:9;2340:7;2336:23;2332:32;2329:119;;;2367:79;;:::i;:::-;2329:119;2487:1;2512:53;2557:7;2548:6;2537:9;2533:22;2512:53;:::i;:::-;2502:63;;2458:117;2614:2;2640:53;2685:7;2676:6;2665:9;2661:22;2640:53;:::i;:::-;2630:63;;2585:118;2236:474;;;;;:::o;2716:114::-;2783:6;2817:5;2811:12;2801:22;;2716:114;;;:::o;2836:184::-;2935:11;2969:6;2964:3;2957:19;3009:4;3004:3;3000:14;2985:29;;2836:184;;;;:::o;3026:132::-;3093:4;3116:3;3108:11;;3146:4;3141:3;3137:14;3129:22;;3026:132;;;:::o;3164:108::-;3241:24;3259:5;3241:24;:::i;:::-;3236:3;3229:37;3164:108;;:::o;3278:179::-;3347:10;3368:46;3410:3;3402:6;3368:46;:::i;:::-;3446:4;3441:3;3437:14;3423:28;;3278:179;;;;:::o;3463:113::-;3533:4;3565;3560:3;3556:14;3548:22;;3463:113;;;:::o;3612:732::-;3731:3;3760:54;3808:5;3760:54;:::i;:::-;3830:86;3909:6;3904:3;3830:86;:::i;:::-;3823:93;;3940:56;3990:5;3940:56;:::i;:::-;4019:7;4050:1;4035:284;4060:6;4057:1;4054:13;4035:284;;;4136:6;4130:13;4163:63;4222:3;4207:13;4163:63;:::i;:::-;4156:70;;4249:60;4302:6;4249:60;:::i;:::-;4239:70;;4095:224;4082:1;4079;4075:9;4070:14;;4035:284;;;4039:14;4335:3;4328:10;;3736:608;;;3612:732;;;;:::o;4350:373::-;4493:4;4531:2;4520:9;4516:18;4508:26;;4580:9;4574:4;4570:20;4566:1;4555:9;4551:17;4544:47;4608:108;4711:4;4702:6;4608:108;:::i;:::-;4600:116;;4350:373;;;;:::o;4729:143::-;4786:5;4817:6;4811:13;4802:22;;4833:33;4860:5;4833:33;:::i;:::-;4729:143;;;;:::o;4878:663::-;4966:6;4974;4982;5031:2;5019:9;5010:7;5006:23;5002:32;4999:119;;;5037:79;;:::i;:::-;4999:119;5157:1;5182:64;5238:7;5229:6;5218:9;5214:22;5182:64;:::i;:::-;5172:74;;5128:128;5295:2;5321:64;5377:7;5368:6;5357:9;5353:22;5321:64;:::i;:::-;5311:74;;5266:129;5434:2;5460:64;5516:7;5507:6;5496:9;5492:22;5460:64;:::i;:::-;5450:74;;5405:129;4878:663;;;;;:::o;5547:180::-;5595:77;5592:1;5585:88;5692:4;5689:1;5682:15;5716:4;5713:1;5706:15;5733:102;5775:8;5822:5;5819:1;5815:13;5794:34;;5733:102;;;:::o;5841:848::-;5902:5;5909:4;5933:6;5924:15;;5957:5;5948:14;;5971:712;5992:1;5982:8;5979:15;5971:712;;;6087:4;6082:3;6078:14;6072:4;6069:24;6066:50;;;6096:18;;:::i;:::-;6066:50;6146:1;6136:8;6132:16;6129:451;;;6561:4;6554:5;6550:16;6541:25;;6129:451;6611:4;6605;6601:15;6593:23;;6641:32;6664:8;6641:32;:::i;:::-;6629:44;;5971:712;;;5841:848;;;;;;;:::o;6695:1073::-;6749:5;6940:8;6930:40;;6961:1;6952:10;;6963:5;;6930:40;6989:4;6979:36;;7006:1;6997:10;;7008:5;;6979:36;7075:4;7123:1;7118:27;;;;7159:1;7154:191;;;;7068:277;;7118:27;7136:1;7127:10;;7138:5;;;7154:191;7199:3;7189:8;7186:17;7183:43;;;7206:18;;:::i;:::-;7183:43;7255:8;7252:1;7248:16;7239:25;;7290:3;7283:5;7280:14;7277:40;;;7297:18;;:::i;:::-;7277:40;7330:5;;;7068:277;;7454:2;7444:8;7441:16;7435:3;7429:4;7426:13;7422:36;7404:2;7394:8;7391:16;7386:2;7380:4;7377:12;7373:35;7357:111;7354:246;;;7510:8;7504:4;7500:19;7491:28;;7545:3;7538:5;7535:14;7532:40;;;7552:18;;:::i;:::-;7532:40;7585:5;;7354:246;7625:42;7663:3;7653:8;7647:4;7644:1;7625:42;:::i;:::-;7610:57;;;;7699:4;7694:3;7690:14;7683:5;7680:25;7677:51;;;7708:18;;:::i;:::-;7677:51;7757:4;7750:5;7746:16;7737:25;;6695:1073;;;;;;:::o;7774:285::-;7834:5;7858:23;7876:4;7858:23;:::i;:::-;7850:31;;7902:27;7920:8;7902:27;:::i;:::-;7890:39;;7948:104;7985:66;7975:8;7969:4;7948:104;:::i;:::-;7939:113;;7774:285;;;;:::o;8065:351::-;8135:6;8184:2;8172:9;8163:7;8159:23;8155:32;8152:119;;;8190:79;;:::i;:::-;8152:119;8310:1;8335:64;8391:7;8382:6;8371:9;8367:22;8335:64;:::i;:::-;8325:74;;8281:128;8065:351;;;;:::o;8422:410::-;8462:7;8485:20;8503:1;8485:20;:::i;:::-;8480:25;;8519:20;8537:1;8519:20;:::i;:::-;8514:25;;8574:1;8571;8567:9;8596:30;8614:11;8596:30;:::i;:::-;8585:41;;8775:1;8766:7;8762:15;8759:1;8756:22;8736:1;8729:9;8709:83;8686:139;;8805:18;;:::i;:::-;8686:139;8470:362;8422:410;;;;:::o;8838:180::-;8886:77;8883:1;8876:88;8983:4;8980:1;8973:15;9007:4;9004:1;8997:15;9024:185;9064:1;9081:20;9099:1;9081:20;:::i;:::-;9076:25;;9115:20;9133:1;9115:20;:::i;:::-;9110:25;;9154:1;9144:35;;9159:18;;:::i;:::-;9144:35;9201:1;9198;9194:9;9189:14;;9024:185;;;;:::o;9215:191::-;9255:3;9274:20;9292:1;9274:20;:::i;:::-;9269:25;;9308:20;9326:1;9308:20;:::i;:::-;9303:25;;9351:1;9348;9344:9;9337:16;;9372:3;9369:1;9366:10;9363:36;;;9379:18;;:::i;:::-;9363:36;9215:191;;;;:::o;9412:169::-;9496:11;9530:6;9525:3;9518:19;9570:4;9565:3;9561:14;9546:29;;9412:169;;;;:::o;9587:227::-;9727:34;9723:1;9715:6;9711:14;9704:58;9796:10;9791:2;9783:6;9779:15;9772:35;9587:227;:::o;9820:366::-;9962:3;9983:67;10047:2;10042:3;9983:67;:::i;:::-;9976:74;;10059:93;10148:3;10059:93;:::i;:::-;10177:2;10172:3;10168:12;10161:19;;9820:366;;;:::o;10192:419::-;10358:4;10396:2;10385:9;10381:18;10373:26;;10445:9;10439:4;10435:20;10431:1;10420:9;10416:17;10409:47;10473:131;10599:4;10473:131;:::i;:::-;10465:139;;10192:419;;;:::o;10617:332::-;10738:4;10776:2;10765:9;10761:18;10753:26;;10789:71;10857:1;10846:9;10842:17;10833:6;10789:71;:::i;:::-;10870:72;10938:2;10927:9;10923:18;10914:6;10870:72;:::i;:::-;10617:332;;;;;:::o;10955:180::-;11003:77;11000:1;10993:88;11100:4;11097:1;11090:15;11124:4;11121:1;11114:15;11141:180;11189:77;11186:1;11179:88;11286:4;11283:1;11276:15;11310:4;11307:1;11300:15"
	},
	"Assembly": ".code\n  PUSH 80\t\t\tcontract SimplePool {\\n    WBT...\n  PUSH 40\t\t\tcontract SimplePool {\\n    WBT...\n  MSTORE \t\t\tcontract SimplePool {\\n    WBT...\n  PUSH 50\t\t\t80\n  PUSH 5\t\t\tuint8 wBTCLTV = uint8(80)\n  PUSH 0\t\t\tuint8 wBTCLTV = uint8(80)\n  PUSH 100\t\t\tuint8 wBTCLTV = uint8(80)\n  EXP \t\t\tuint8 wBTCLTV = uint8(80)\n  DUP2 \t\t\tuint8 wBTCLTV = uint8(80)\n  SLOAD \t\t\tuint8 wBTCLTV = uint8(80)\n  DUP2 \t\t\tuint8 wBTCLTV = uint8(80)\n  PUSH FF\t\t\tuint8 wBTCLTV = uint8(80)\n  MUL \t\t\tuint8 wBTCLTV = uint8(80)\n  NOT \t\t\tuint8 wBTCLTV = uint8(80)\n  AND \t\t\tuint8 wBTCLTV = uint8(80)\n  SWAP1 \t\t\tuint8 wBTCLTV = uint8(80)\n  DUP4 \t\t\tuint8 wBTCLTV = uint8(80)\n  PUSH FF\t\t\tuint8 wBTCLTV = uint8(80)\n  AND \t\t\tuint8 wBTCLTV = uint8(80)\n  MUL \t\t\tuint8 wBTCLTV = uint8(80)\n  OR \t\t\tuint8 wBTCLTV = uint8(80)\n  SWAP1 \t\t\tuint8 wBTCLTV = uint8(80)\n  SSTORE \t\t\tuint8 wBTCLTV = uint8(80)\n  POP \t\t\tuint8 wBTCLTV = uint8(80)\n  CALLVALUE \t\t\tconstructor(WBTCReserve _wBTCR...\n  DUP1 \t\t\tconstructor(WBTCReserve _wBTCR...\n  ISZERO \t\t\tconstructor(WBTCReserve _wBTCR...\n  PUSH [tag] 1\t\t\tconstructor(WBTCReserve _wBTCR...\n  JUMPI \t\t\tconstructor(WBTCReserve _wBTCR...\n  PUSH 0\t\t\tconstructor(WBTCReserve _wBTCR...\n  DUP1 \t\t\tconstructor(WBTCReserve _wBTCR...\n  REVERT \t\t\tconstructor(WBTCReserve _wBTCR...\ntag 1\t\t\tconstructor(WBTCReserve _wBTCR...\n  JUMPDEST \t\t\tconstructor(WBTCReserve _wBTCR...\n  POP \t\t\tconstructor(WBTCReserve _wBTCR...\n  PUSH 40\t\t\tconstructor(WBTCReserve _wBTCR...\n  MLOAD \t\t\tconstructor(WBTCReserve _wBTCR...\n  PUSHSIZE \t\t\tconstructor(WBTCReserve _wBTCR...\n  CODESIZE \t\t\tconstructor(WBTCReserve _wBTCR...\n  SUB \t\t\tconstructor(WBTCReserve _wBTCR...\n  DUP1 \t\t\tconstructor(WBTCReserve _wBTCR...\n  PUSHSIZE \t\t\tconstructor(WBTCReserve _wBTCR...\n  DUP4 \t\t\tconstructor(WBTCReserve _wBTCR...\n  CODECOPY \t\t\tconstructor(WBTCReserve _wBTCR...\n  DUP2 \t\t\tconstructor(WBTCReserve _wBTCR...\n  DUP2 \t\t\tconstructor(WBTCReserve _wBTCR...\n  ADD \t\t\tconstructor(WBTCReserve _wBTCR...\n  PUSH 40\t\t\tconstructor(WBTCReserve _wBTCR...\n  MSTORE \t\t\tconstructor(WBTCReserve _wBTCR...\n  DUP2 \t\t\tconstructor(WBTCReserve _wBTCR...\n  ADD \t\t\tconstructor(WBTCReserve _wBTCR...\n  SWAP1 \t\t\tconstructor(WBTCReserve _wBTCR...\n  PUSH [tag] 2\t\t\tconstructor(WBTCReserve _wBTCR...\n  SWAP2 \t\t\tconstructor(WBTCReserve _wBTCR...\n  SWAP1 \t\t\tconstructor(WBTCReserve _wBTCR...\n  PUSH [tag] 3\t\t\tconstructor(WBTCReserve _wBTCR...\n  JUMP \t\t\tconstructor(WBTCReserve _wBTCR...\ntag 2\t\t\tconstructor(WBTCReserve _wBTCR...\n  JUMPDEST \t\t\tconstructor(WBTCReserve _wBTCR...\n  DUP2 \t\t\t_wBTC\n  PUSH 2\t\t\twBTC\n  PUSH 0\t\t\twBTC\n  PUSH 100\t\t\twBTC = _wBTC\n  EXP \t\t\twBTC = _wBTC\n  DUP2 \t\t\twBTC = _wBTC\n  SLOAD \t\t\twBTC = _wBTC\n  DUP2 \t\t\twBTC = _wBTC\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTC = _wBTC\n  MUL \t\t\twBTC = _wBTC\n  NOT \t\t\twBTC = _wBTC\n  AND \t\t\twBTC = _wBTC\n  SWAP1 \t\t\twBTC = _wBTC\n  DUP4 \t\t\twBTC = _wBTC\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTC = _wBTC\n  AND \t\t\twBTC = _wBTC\n  MUL \t\t\twBTC = _wBTC\n  OR \t\t\twBTC = _wBTC\n  SWAP1 \t\t\twBTC = _wBTC\n  SSTORE \t\t\twBTC = _wBTC\n  POP \t\t\twBTC = _wBTC\n  DUP1 \t\t\t_usdc\n  PUSH 3\t\t\tusdc\n  PUSH 0\t\t\tusdc\n  PUSH 100\t\t\tusdc = _usdc\n  EXP \t\t\tusdc = _usdc\n  DUP2 \t\t\tusdc = _usdc\n  SLOAD \t\t\tusdc = _usdc\n  DUP2 \t\t\tusdc = _usdc\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdc = _usdc\n  MUL \t\t\tusdc = _usdc\n  NOT \t\t\tusdc = _usdc\n  AND \t\t\tusdc = _usdc\n  SWAP1 \t\t\tusdc = _usdc\n  DUP4 \t\t\tusdc = _usdc\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdc = _usdc\n  AND \t\t\tusdc = _usdc\n  MUL \t\t\tusdc = _usdc\n  OR \t\t\tusdc = _usdc\n  SWAP1 \t\t\tusdc = _usdc\n  SSTORE \t\t\tusdc = _usdc\n  POP \t\t\tusdc = _usdc\n  DUP4 \t\t\t_wBTCReserve\n  PUSH 0\t\t\twBTCReserve\n  DUP1 \t\t\twBTCReserve\n  PUSH 100\t\t\twBTCReserve = _wBTCReserve\n  EXP \t\t\twBTCReserve = _wBTCReserve\n  DUP2 \t\t\twBTCReserve = _wBTCReserve\n  SLOAD \t\t\twBTCReserve = _wBTCReserve\n  DUP2 \t\t\twBTCReserve = _wBTCReserve\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve = _wBTCReserve\n  MUL \t\t\twBTCReserve = _wBTCReserve\n  NOT \t\t\twBTCReserve = _wBTCReserve\n  AND \t\t\twBTCReserve = _wBTCReserve\n  SWAP1 \t\t\twBTCReserve = _wBTCReserve\n  DUP4 \t\t\twBTCReserve = _wBTCReserve\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve = _wBTCReserve\n  AND \t\t\twBTCReserve = _wBTCReserve\n  MUL \t\t\twBTCReserve = _wBTCReserve\n  OR \t\t\twBTCReserve = _wBTCReserve\n  SWAP1 \t\t\twBTCReserve = _wBTCReserve\n  SSTORE \t\t\twBTCReserve = _wBTCReserve\n  POP \t\t\twBTCReserve = _wBTCReserve\n  DUP3 \t\t\t_usdcReserve\n  PUSH 1\t\t\tusdcReserve\n  PUSH 0\t\t\tusdcReserve\n  PUSH 100\t\t\tusdcReserve = _usdcReserve\n  EXP \t\t\tusdcReserve = _usdcReserve\n  DUP2 \t\t\tusdcReserve = _usdcReserve\n  SLOAD \t\t\tusdcReserve = _usdcReserve\n  DUP2 \t\t\tusdcReserve = _usdcReserve\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve = _usdcReserve\n  MUL \t\t\tusdcReserve = _usdcReserve\n  NOT \t\t\tusdcReserve = _usdcReserve\n  AND \t\t\tusdcReserve = _usdcReserve\n  SWAP1 \t\t\tusdcReserve = _usdcReserve\n  DUP4 \t\t\tusdcReserve = _usdcReserve\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve = _usdcReserve\n  AND \t\t\tusdcReserve = _usdcReserve\n  MUL \t\t\tusdcReserve = _usdcReserve\n  OR \t\t\tusdcReserve = _usdcReserve\n  SWAP1 \t\t\tusdcReserve = _usdcReserve\n  SSTORE \t\t\tusdcReserve = _usdcReserve\n  POP \t\t\tusdcReserve = _usdcReserve\n  POP \t\t\tconstructor(WBTCReserve _wBTCR...\n  POP \t\t\tconstructor(WBTCReserve _wBTCR...\n  POP \t\t\tconstructor(WBTCReserve _wBTCR...\n  POP \t\t\tconstructor(WBTCReserve _wBTCR...\n  PUSH [tag] 6\t\t\tcontract SimplePool {\\n    WBT...\n  JUMP \t\t\tcontract SimplePool {\\n    WBT...\ntag 8\t\t\trt \"./USDCReserve.sol\";\\n\\n\\nc...\n  JUMPDEST \t\t\trt \"./USDCReserve.sol\";\\n\\n\\nc...\n  PUSH 0\t\t\t \n  DUP1 \t\t\t \n  REVERT \t\t\tserve;\\n    a\ntag 10\t\t\ttor(WBTCReserve _wBTCReserve, ...\n  JUMPDEST \t\t\ttor(WBTCReserve _wBTCReserve, ...\n  PUSH 0\t\t\terve _u\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ts _usdc) {\\n        wBTC = _wB...\n  DUP3 \t\t\t addr\n  AND \t\t\tBTC, address _usdc) {\\n       ...\n  SWAP1 \t\t\t address _wBTC, address _usdc)...\n  POP \t\t\t address _wBTC, address _usdc)...\n  SWAP2 \t\t\ttor(WBTCReserve _wBTCReserve, ...\n  SWAP1 \t\t\ttor(WBTCReserve _wBTCReserve, ...\n  POP \t\t\ttor(WBTCReserve _wBTCReserve, ...\n  JUMP \t\t\ttor(WBTCReserve _wBTCReserve, ...\ntag 11\t\t\t        wBTCReserve = _wBTCRes...\n  JUMPDEST \t\t\t        wBTCReserve = _wBTCRes...\n  PUSH 0\t\t\t       \n  PUSH [tag] 26\t\t\terve;\\n    }\\n\\n    functio\n  DUP3 \t\t\tuncti\n  PUSH [tag] 10\t\t\terve;\\n    }\\n\\n    functio\n  JUMP \t\t\terve;\\n    }\\n\\n    functio\ntag 26\t\t\terve;\\n    }\\n\\n    functio\n  JUMPDEST \t\t\terve;\\n    }\\n\\n    functio\n  SWAP1 \t\t\t = _usdcReserve;\\n    }\\n\\n   ...\n  POP \t\t\t = _usdcReserve;\\n    }\\n\\n   ...\n  SWAP2 \t\t\t        wBTCReserve = _wBTCRes...\n  SWAP1 \t\t\t        wBTCReserve = _wBTCRes...\n  POP \t\t\t        wBTCReserve = _wBTCRes...\n  JUMP \t\t\t        wBTCReserve = _wBTCRes...\ntag 12\t\t\t(address token) public view re...\n  JUMPDEST \t\t\t(address token) public view re...\n  PUSH 0\t\t\tss) {\\n \n  PUSH [tag] 28\t\t\tTC) {\\n            return\n  DUP3 \t\t\tretur\n  PUSH [tag] 11\t\t\tTC) {\\n            return\n  JUMP \t\t\tTC) {\\n            return\ntag 28\t\t\tTC) {\\n            return\n  JUMPDEST \t\t\tTC) {\\n            return\n  SWAP1 \t\t\ttoken == wBTC) {\\n            ...\n  POP \t\t\ttoken == wBTC) {\\n            ...\n  SWAP2 \t\t\t(address token) public view re...\n  SWAP1 \t\t\t(address token) public view re...\n  POP \t\t\t(address token) public view re...\n  JUMP \t\t\t(address token) public view re...\ntag 13\t\t\tCReserve);\\n        } else if ...\n  JUMPDEST \t\t\tCReserve);\\n        } else if ...\n  PUSH [tag] 30\t\t\t   }\\n    }\\n\\n    function ge...\n  DUP2 \t\t\tlic v\n  PUSH [tag] 12\t\t\t   }\\n    }\\n\\n    function ge...\n  JUMP \t\t\t   }\\n    }\\n\\n    function ge...\ntag 30\t\t\t   }\\n    }\\n\\n    function ge...\n  JUMPDEST \t\t\t   }\\n    }\\n\\n    function ge...\n  DUP2 \t\t\t;\\n   \n  EQ \t\t\tve);\\n        }\\n    }\\n\\n    ...\n  PUSH [tag] 31\t\t\t(usdcReserve);\\n        }\\n   ...\n  JUMPI \t\t\t(usdcReserve);\\n        }\\n   ...\n  PUSH 0\t\t\tr\n  DUP1 \t\t\ta\n  REVERT \t\t\tturns (addre\ntag 31\t\t\t(usdcReserve);\\n        }\\n   ...\n  JUMPDEST \t\t\t(usdcReserve);\\n        }\\n   ...\n  POP \t\t\tCReserve);\\n        } else if ...\n  JUMP \t\t\tCReserve);\\n        } else if ...\ntag 14\t\t\teturn address(wBTC);\\n    }\\n\\...\n  JUMPDEST \t\t\teturn address(wBTC);\\n    }\\n\\...\n  PUSH 0\t\t\tss){\\n\n  DUP2 \t\t\tc);\\n  \n  MLOAD \t\t\tss(usdc);\\n   \n  SWAP1 \t\t\turn address(usdc);\\n   \n  POP \t\t\turn address(usdc);\\n   \n  PUSH [tag] 33\t\t\tunction getAssetsPrice() exter...\n  DUP2 \t\t\t(uint\n  PUSH [tag] 13\t\t\tunction getAssetsPrice() exter...\n  JUMP \t\t\tunction getAssetsPrice() exter...\ntag 33\t\t\tunction getAssetsPrice() exter...\n  JUMPDEST \t\t\tunction getAssetsPrice() exter...\n  SWAP3 \t\t\teturn address(wBTC);\\n    }\\n\\...\n  SWAP2 \t\t\teturn address(wBTC);\\n    }\\n\\...\n  POP \t\t\teturn address(wBTC);\\n    }\\n\\...\n  POP \t\t\teturn address(wBTC);\\n    }\\n\\...\n  JUMP \t\t\teturn address(wBTC);\\n    }\\n\\...\ntag 15\t\t\t {\\n        (uint256 wBTCPrice...\n  JUMPDEST \t\t\t {\\n        (uint256 wBTCPrice...\n  PUSH 0\t\t\t6 _deci\n  PUSH [tag] 35\t\t\ttAssetPrice();\\n        u\n  DUP3 \t\t\t     \n  PUSH [tag] 11\t\t\ttAssetPrice();\\n        u\n  JUMP \t\t\ttAssetPrice();\\n        u\ntag 35\t\t\ttAssetPrice();\\n        u\n  JUMPDEST \t\t\ttAssetPrice();\\n        u\n  SWAP1 \t\t\tCReserve.getAssetPrice();\\n   ...\n  POP \t\t\tCReserve.getAssetPrice();\\n   ...\n  SWAP2 \t\t\t {\\n        (uint256 wBTCPrice...\n  SWAP1 \t\t\t {\\n        (uint256 wBTCPrice...\n  POP \t\t\t {\\n        (uint256 wBTCPrice...\n  JUMP \t\t\t {\\n        (uint256 wBTCPrice...\ntag 16\t\t\trice = usdcReserve.getAssetPri...\n  JUMPDEST \t\t\trice = usdcReserve.getAssetPri...\n  PUSH [tag] 37\t\t\t   prices[0] = wBTCPrice;\\n   ...\n  DUP2 \t\t\tes[1]\n  PUSH [tag] 15\t\t\t   prices[0] = wBTCPrice;\\n   ...\n  JUMP \t\t\t   prices[0] = wBTCPrice;\\n   ...\ntag 37\t\t\t   prices[0] = wBTCPrice;\\n   ...\n  JUMPDEST \t\t\t   prices[0] = wBTCPrice;\\n   ...\n  DUP2 \t\t\t;\\n   \n  EQ \t\t\t(2);\\n        prices[0] = wBTC...\n  PUSH [tag] 38\t\t\t uint256[](2);\\n        prices...\n  JUMPI \t\t\t uint256[](2);\\n        prices...\n  PUSH 0\t\t\t \n  DUP1 \t\t\t\\n\n  REVERT \t\t\tcPrice;\\n    \ntag 38\t\t\t uint256[](2);\\n        prices...\n  JUMPDEST \t\t\t uint256[](2);\\n        prices...\n  POP \t\t\trice = usdcReserve.getAssetPri...\n  JUMP \t\t\trice = usdcReserve.getAssetPri...\ntag 17\t\t\tces;\\n    }\\n\\n    function ge...\n  JUMPDEST \t\t\tces;\\n    }\\n\\n    function ge...\n  PUSH 0\t\t\turns \n  DUP2 \t\t\t   uin\n  MLOAD \t\t\t\\n        uint\n  SWAP1 \t\t\tmemory) {\\n        uint\n  POP \t\t\tmemory) {\\n        uint\n  PUSH [tag] 40\t\t\tory balances = new uint256[](2...\n  DUP2 \t\t\tes[0]\n  PUSH [tag] 16\t\t\tory balances = new uint256[](2...\n  JUMP \t\t\tory balances = new uint256[](2...\ntag 40\t\t\tory balances = new uint256[](2...\n  JUMPDEST \t\t\tory balances = new uint256[](2...\n  SWAP3 \t\t\tces;\\n    }\\n\\n    function ge...\n  SWAP2 \t\t\tces;\\n    }\\n\\n    function ge...\n  POP \t\t\tces;\\n    }\\n\\n    function ge...\n  POP \t\t\tces;\\n    }\\n\\n    function ge...\n  JUMP \t\t\tces;\\n    }\\n\\n    function ge...\ntag 18\t\t\te.getSupplyedAmount(user);\\n  ...\n  JUMPDEST \t\t\te.getSupplyedAmount(user);\\n  ...\n  PUSH [tag] 42\t\t\tmount(user);\\n        ret\n  DUP2 \t\t\t   re\n  PUSH [tag] 11\t\t\tmount(user);\\n        ret\n  JUMP \t\t\tmount(user);\\n        ret\ntag 42\t\t\tmount(user);\\n        ret\n  JUMPDEST \t\t\tmount(user);\\n        ret\n  DUP2 \t\t\tpplye\n  EQ \t\t\ttSupplyedAmount(user);\\n      ...\n  PUSH [tag] 43\t\t\tReserve.getSupplyedAmount(user...\n  JUMPI \t\t\tReserve.getSupplyedAmount(user...\n  PUSH 0\t\t\t \n  DUP1 \t\t\t;\n  REVERT \t\t\talances;\\n   \ntag 43\t\t\tReserve.getSupplyedAmount(user...\n  JUMPDEST \t\t\tReserve.getSupplyedAmount(user...\n  POP \t\t\te.getSupplyedAmount(user);\\n  ...\n  JUMP \t\t\te.getSupplyedAmount(user);\\n  ...\ntag 19\t\t\ton borrow(address asset, uint2...\n  JUMPDEST \t\t\ton borrow(address asset, uint2...\n  PUSH 0\t\t\t   re\n  DUP2 \t\t\t    ui\n  MLOAD \t\t\t;\\n        uin\n  SWAP1 \t\t\t == usdc);\\n        uin\n  POP \t\t\t == usdc);\\n        uin\n  PUSH [tag] 45\t\t\tateralValue = this.getDepositV...\n  DUP2 \t\t\titVal\n  PUSH [tag] 18\t\t\tateralValue = this.getDepositV...\n  JUMP \t\t\tateralValue = this.getDepositV...\ntag 45\t\t\tateralValue = this.getDepositV...\n  JUMPDEST \t\t\tateralValue = this.getDepositV...\n  SWAP3 \t\t\ton borrow(address asset, uint2...\n  SWAP2 \t\t\ton borrow(address asset, uint2...\n  POP \t\t\ton borrow(address asset, uint2...\n  POP \t\t\ton borrow(address asset, uint2...\n  JUMP \t\t\ton borrow(address asset, uint2...\ntag 3\t\t\t);\\n        uint256 maxValueBo...\n  JUMPDEST \t\t\t);\\n        uint256 maxValueBo...\n  PUSH 0\t\t\trequir\n  DUP1 \t\t\t(curre\n  PUSH 0\t\t\tBorrow\n  DUP1 \t\t\t + amo\n  PUSH 80\t\t\tre \n  DUP6 \t\t\tt to more\n  DUP8 \t\t\t \"You w\n  SUB \t\t\tred, \"You want to more \n  SLT \t\t\teBorred, \"You want to more mor...\n  ISZERO \t\t\talueBorred, \"You want to more ...\n  PUSH [tag] 47\t\t\talueBorred, \"You want to more ...\n  JUMPI \t\t\talueBorred, \"You want to more ...\n  PUSH [tag] 48\t\t\te than allowed\");\\n        bor...\n  PUSH [tag] 8\t\t\te than allowed\");\\n        bor...\n  JUMP \t\t\te than allowed\");\\n        bor...\ntag 48\t\t\te than allowed\");\\n        bor...\n  JUMPDEST \t\t\te than allowed\");\\n        bor...\ntag 47\t\t\talueBorred, \"You want to more ...\n  JUMPDEST \t\t\talueBorred, \"You want to more ...\n  PUSH 0\t\t\t;\n  PUSH [tag] 49\t\t\tDebt(address user) external vi...\n  DUP8 \t\t\torrowed\n  DUP3 \t\t\t debt \n  DUP9 \t\t\t    uint2\n  ADD \t\t\t        uint256 debt =\n  PUSH [tag] 14\t\t\tDebt(address user) external vi...\n  JUMP \t\t\tDebt(address user) external vi...\ntag 49\t\t\tDebt(address user) external vi...\n  JUMPDEST \t\t\tDebt(address user) external vi...\n  SWAP5 \t\t\tnction getDebt(address user) e...\n  POP \t\t\tnction getDebt(address user) e...\n  POP \t\t\tansaction(msg.sender, amount);...\n  PUSH 20\t\t\tre\n  PUSH [tag] 50\t\t\tnction getDepositValue(address...\n  DUP8 \t\t\t  (uint\n  DUP3 \t\t\t){\\n   \n  DUP9 \t\t\tns (uint2\n  ADD \t\t\teturns (uint256){\\n    \n  PUSH [tag] 17\t\t\tnction getDepositValue(address...\n  JUMP \t\t\tnction getDepositValue(address...\ntag 50\t\t\tnction getDepositValue(address...\n  JUMPDEST \t\t\tnction getDepositValue(address...\n  SWAP4 \t\t\t }\\n\\n    function getDepositV...\n  POP \t\t\t }\\n\\n    function getDepositV...\n  POP \t\t\trve.getAssetPrice();\\n        ...\n  PUSH 40\t\t\tls\n  PUSH [tag] 51\t\t\tPrice();\\n        uint256 coll...\n  DUP8 \t\t\tpplyedA\n  DUP3 \t\t\trve.ge\n  DUP9 \t\t\t = wBTCRe\n  ADD \t\t\talue = wBTCReserve.get\n  PUSH [tag] 19\t\t\tPrice();\\n        uint256 coll...\n  JUMP \t\t\tPrice();\\n        uint256 coll...\ntag 51\t\t\tPrice();\\n        uint256 coll...\n  JUMPDEST \t\t\tPrice();\\n        uint256 coll...\n  SWAP3 \t\t\te.getAssetPrice();\\n        ui...\n  POP \t\t\te.getAssetPrice();\\n        ui...\n  POP \t\t\t6 _timestamp, uint256 _decimal...\n  PUSH 60\t\t\t  \n  PUSH [tag] 52\t\t\t }\\n\\n\\n\\n\\n\\n    \\n\\n}\\n\n  DUP8 \t\t\t\n  DUP3 \t\t\t\n  DUP9 \t\t\t\n  ADD \t\t\t\n  PUSH [tag] 19\t\t\t }\\n\\n\\n\\n\\n\\n    \\n\\n}\\n\n  JUMP \t\t\t }\\n\\n\\n\\n\\n\\n    \\n\\n}\\n\ntag 52\t\t\t }\\n\\n\\n\\n\\n\\n    \\n\\n}\\n\n  JUMPDEST \t\t\t }\\n\\n\\n\\n\\n\\n    \\n\\n}\\n\n  SWAP2 \t\t\tValue;\\n    }\\n\\n\\n\\n\\n\\n    \\...\n  POP \t\t\tValue;\\n    }\\n\\n\\n\\n\\n\\n    \\...\n  POP \t\t\tce / (10 ** _decimals);\\n     ...\n  SWAP3 \t\t\t);\\n        uint256 maxValueBo...\n  SWAP6 \t\t\t);\\n        uint256 maxValueBo...\n  SWAP2 \t\t\t);\\n        uint256 maxValueBo...\n  SWAP5 \t\t\t);\\n        uint256 maxValueBo...\n  POP \t\t\t);\\n        uint256 maxValueBo...\n  SWAP3 \t\t\t);\\n        uint256 maxValueBo...\n  POP \t\t\t);\\n        uint256 maxValueBo...\n  JUMP \t\t\t);\\n        uint256 maxValueBo...\ntag 6\t\t\tcontract SimplePool {\\n    WBT...\n  JUMPDEST \t\t\tcontract SimplePool {\\n    WBT...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract SimplePool {\\n    WBT...\n  DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract SimplePool {\\n    WBT...\n  PUSH 0\t\t\tcontract SimplePool {\\n    WBT...\n  CODECOPY \t\t\tcontract SimplePool {\\n    WBT...\n  PUSH 0\t\t\tcontract SimplePool {\\n    WBT...\n  RETURN \t\t\tcontract SimplePool {\\n    WBT...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 40\t\t\tcontract SimplePool {\\n    WBT...\n      MSTORE \t\t\tcontract SimplePool {\\n    WBT...\n      CALLVALUE \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      ISZERO \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 1\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 0\t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      REVERT \t\t\tcontract SimplePool {\\n    WBT...\n    tag 1\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPDEST \t\t\tcontract SimplePool {\\n    WBT...\n      POP \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 4\t\t\tcontract SimplePool {\\n    WBT...\n      CALLDATASIZE \t\t\tcontract SimplePool {\\n    WBT...\n      LT \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 2\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 0\t\t\tcontract SimplePool {\\n    WBT...\n      CALLDATALOAD \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH E0\t\t\tcontract SimplePool {\\n    WBT...\n      SHR \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 9A78E72E\t\t\tcontract SimplePool {\\n    WBT...\n      GT \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 13\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 9A78E72E\t\t\tcontract SimplePool {\\n    WBT...\n      EQ \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 8\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 9B452931\t\t\tcontract SimplePool {\\n    WBT...\n      EQ \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 9\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH C9A396E9\t\t\tcontract SimplePool {\\n    WBT...\n      EQ \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 10\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH CBDDB785\t\t\tcontract SimplePool {\\n    WBT...\n      EQ \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 11\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH D4D40086\t\t\tcontract SimplePool {\\n    WBT...\n      EQ \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 12\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 2\t\t\tcontract SimplePool {\\n    WBT...\n      JUMP \t\t\tcontract SimplePool {\\n    WBT...\n    tag 13\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPDEST \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 1BF01E9B\t\t\tcontract SimplePool {\\n    WBT...\n      EQ \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 3\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 3B2E5F94\t\t\tcontract SimplePool {\\n    WBT...\n      EQ \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 4\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 3E413BEE\t\t\tcontract SimplePool {\\n    WBT...\n      EQ \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 5\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 4B8A3529\t\t\tcontract SimplePool {\\n    WBT...\n      EQ \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 6\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 7C1F8560\t\t\tcontract SimplePool {\\n    WBT...\n      EQ \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH [tag] 7\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPI \t\t\tcontract SimplePool {\\n    WBT...\n    tag 2\t\t\tcontract SimplePool {\\n    WBT...\n      JUMPDEST \t\t\tcontract SimplePool {\\n    WBT...\n      PUSH 0\t\t\tcontract SimplePool {\\n    WBT...\n      DUP1 \t\t\tcontract SimplePool {\\n    WBT...\n      REVERT \t\t\tcontract SimplePool {\\n    WBT...\n    tag 3\t\t\tfunction getUSDC() public view...\n      JUMPDEST \t\t\tfunction getUSDC() public view...\n      PUSH [tag] 14\t\t\tfunction getUSDC() public view...\n      PUSH [tag] 15\t\t\tfunction getUSDC() public view...\n      JUMP \t\t\tfunction getUSDC() public view...\n    tag 14\t\t\tfunction getUSDC() public view...\n      JUMPDEST \t\t\tfunction getUSDC() public view...\n      PUSH 40\t\t\tfunction getUSDC() public view...\n      MLOAD \t\t\tfunction getUSDC() public view...\n      PUSH [tag] 16\t\t\tfunction getUSDC() public view...\n      SWAP2 \t\t\tfunction getUSDC() public view...\n      SWAP1 \t\t\tfunction getUSDC() public view...\n      PUSH [tag] 17\t\t\tfunction getUSDC() public view...\n      JUMP \t\t\tfunction getUSDC() public view...\n    tag 16\t\t\tfunction getUSDC() public view...\n      JUMPDEST \t\t\tfunction getUSDC() public view...\n      PUSH 40\t\t\tfunction getUSDC() public view...\n      MLOAD \t\t\tfunction getUSDC() public view...\n      DUP1 \t\t\tfunction getUSDC() public view...\n      SWAP2 \t\t\tfunction getUSDC() public view...\n      SUB \t\t\tfunction getUSDC() public view...\n      SWAP1 \t\t\tfunction getUSDC() public view...\n      RETURN \t\t\tfunction getUSDC() public view...\n    tag 4\t\t\tfunction getDepositValue(addre...\n      JUMPDEST \t\t\tfunction getDepositValue(addre...\n      PUSH [tag] 18\t\t\tfunction getDepositValue(addre...\n      PUSH 4\t\t\tfunction getDepositValue(addre...\n      DUP1 \t\t\tfunction getDepositValue(addre...\n      CALLDATASIZE \t\t\tfunction getDepositValue(addre...\n      SUB \t\t\tfunction getDepositValue(addre...\n      DUP2 \t\t\tfunction getDepositValue(addre...\n      ADD \t\t\tfunction getDepositValue(addre...\n      SWAP1 \t\t\tfunction getDepositValue(addre...\n      PUSH [tag] 19\t\t\tfunction getDepositValue(addre...\n      SWAP2 \t\t\tfunction getDepositValue(addre...\n      SWAP1 \t\t\tfunction getDepositValue(addre...\n      PUSH [tag] 20\t\t\tfunction getDepositValue(addre...\n      JUMP \t\t\tfunction getDepositValue(addre...\n    tag 19\t\t\tfunction getDepositValue(addre...\n      JUMPDEST \t\t\tfunction getDepositValue(addre...\n      PUSH [tag] 21\t\t\tfunction getDepositValue(addre...\n      JUMP \t\t\tfunction getDepositValue(addre...\n    tag 18\t\t\tfunction getDepositValue(addre...\n      JUMPDEST \t\t\tfunction getDepositValue(addre...\n      PUSH 40\t\t\tfunction getDepositValue(addre...\n      MLOAD \t\t\tfunction getDepositValue(addre...\n      PUSH [tag] 22\t\t\tfunction getDepositValue(addre...\n      SWAP2 \t\t\tfunction getDepositValue(addre...\n      SWAP1 \t\t\tfunction getDepositValue(addre...\n      PUSH [tag] 23\t\t\tfunction getDepositValue(addre...\n      JUMP \t\t\tfunction getDepositValue(addre...\n    tag 22\t\t\tfunction getDepositValue(addre...\n      JUMPDEST \t\t\tfunction getDepositValue(addre...\n      PUSH 40\t\t\tfunction getDepositValue(addre...\n      MLOAD \t\t\tfunction getDepositValue(addre...\n      DUP1 \t\t\tfunction getDepositValue(addre...\n      SWAP2 \t\t\tfunction getDepositValue(addre...\n      SUB \t\t\tfunction getDepositValue(addre...\n      SWAP1 \t\t\tfunction getDepositValue(addre...\n      RETURN \t\t\tfunction getDepositValue(addre...\n    tag 5\t\t\taddress public usdc\n      JUMPDEST \t\t\taddress public usdc\n      PUSH [tag] 24\t\t\taddress public usdc\n      PUSH [tag] 25\t\t\taddress public usdc\n      JUMP \t\t\taddress public usdc\n    tag 24\t\t\taddress public usdc\n      JUMPDEST \t\t\taddress public usdc\n      PUSH 40\t\t\taddress public usdc\n      MLOAD \t\t\taddress public usdc\n      PUSH [tag] 26\t\t\taddress public usdc\n      SWAP2 \t\t\taddress public usdc\n      SWAP1 \t\t\taddress public usdc\n      PUSH [tag] 17\t\t\taddress public usdc\n      JUMP \t\t\taddress public usdc\n    tag 26\t\t\taddress public usdc\n      JUMPDEST \t\t\taddress public usdc\n      PUSH 40\t\t\taddress public usdc\n      MLOAD \t\t\taddress public usdc\n      DUP1 \t\t\taddress public usdc\n      SWAP2 \t\t\taddress public usdc\n      SUB \t\t\taddress public usdc\n      SWAP1 \t\t\taddress public usdc\n      RETURN \t\t\taddress public usdc\n    tag 6\t\t\tfunction borrow(address asset,...\n      JUMPDEST \t\t\tfunction borrow(address asset,...\n      PUSH [tag] 27\t\t\tfunction borrow(address asset,...\n      PUSH 4\t\t\tfunction borrow(address asset,...\n      DUP1 \t\t\tfunction borrow(address asset,...\n      CALLDATASIZE \t\t\tfunction borrow(address asset,...\n      SUB \t\t\tfunction borrow(address asset,...\n      DUP2 \t\t\tfunction borrow(address asset,...\n      ADD \t\t\tfunction borrow(address asset,...\n      SWAP1 \t\t\tfunction borrow(address asset,...\n      PUSH [tag] 28\t\t\tfunction borrow(address asset,...\n      SWAP2 \t\t\tfunction borrow(address asset,...\n      SWAP1 \t\t\tfunction borrow(address asset,...\n      PUSH [tag] 29\t\t\tfunction borrow(address asset,...\n      JUMP \t\t\tfunction borrow(address asset,...\n    tag 28\t\t\tfunction borrow(address asset,...\n      JUMPDEST \t\t\tfunction borrow(address asset,...\n      PUSH [tag] 30\t\t\tfunction borrow(address asset,...\n      JUMP \t\t\tfunction borrow(address asset,...\n    tag 27\t\t\tfunction borrow(address asset,...\n      JUMPDEST \t\t\tfunction borrow(address asset,...\n      STOP \t\t\tfunction borrow(address asset,...\n    tag 7\t\t\tfunction getAssetsPrice() exte...\n      JUMPDEST \t\t\tfunction getAssetsPrice() exte...\n      PUSH [tag] 31\t\t\tfunction getAssetsPrice() exte...\n      PUSH [tag] 32\t\t\tfunction getAssetsPrice() exte...\n      JUMP \t\t\tfunction getAssetsPrice() exte...\n    tag 31\t\t\tfunction getAssetsPrice() exte...\n      JUMPDEST \t\t\tfunction getAssetsPrice() exte...\n      PUSH 40\t\t\tfunction getAssetsPrice() exte...\n      MLOAD \t\t\tfunction getAssetsPrice() exte...\n      PUSH [tag] 33\t\t\tfunction getAssetsPrice() exte...\n      SWAP2 \t\t\tfunction getAssetsPrice() exte...\n      SWAP1 \t\t\tfunction getAssetsPrice() exte...\n      PUSH [tag] 34\t\t\tfunction getAssetsPrice() exte...\n      JUMP \t\t\tfunction getAssetsPrice() exte...\n    tag 33\t\t\tfunction getAssetsPrice() exte...\n      JUMPDEST \t\t\tfunction getAssetsPrice() exte...\n      PUSH 40\t\t\tfunction getAssetsPrice() exte...\n      MLOAD \t\t\tfunction getAssetsPrice() exte...\n      DUP1 \t\t\tfunction getAssetsPrice() exte...\n      SWAP2 \t\t\tfunction getAssetsPrice() exte...\n      SUB \t\t\tfunction getAssetsPrice() exte...\n      SWAP1 \t\t\tfunction getAssetsPrice() exte...\n      RETURN \t\t\tfunction getAssetsPrice() exte...\n    tag 8\t\t\tfunction getDebt(address user)...\n      JUMPDEST \t\t\tfunction getDebt(address user)...\n      PUSH [tag] 35\t\t\tfunction getDebt(address user)...\n      PUSH 4\t\t\tfunction getDebt(address user)...\n      DUP1 \t\t\tfunction getDebt(address user)...\n      CALLDATASIZE \t\t\tfunction getDebt(address user)...\n      SUB \t\t\tfunction getDebt(address user)...\n      DUP2 \t\t\tfunction getDebt(address user)...\n      ADD \t\t\tfunction getDebt(address user)...\n      SWAP1 \t\t\tfunction getDebt(address user)...\n      PUSH [tag] 36\t\t\tfunction getDebt(address user)...\n      SWAP2 \t\t\tfunction getDebt(address user)...\n      SWAP1 \t\t\tfunction getDebt(address user)...\n      PUSH [tag] 20\t\t\tfunction getDebt(address user)...\n      JUMP \t\t\tfunction getDebt(address user)...\n    tag 36\t\t\tfunction getDebt(address user)...\n      JUMPDEST \t\t\tfunction getDebt(address user)...\n      PUSH [tag] 37\t\t\tfunction getDebt(address user)...\n      JUMP \t\t\tfunction getDebt(address user)...\n    tag 35\t\t\tfunction getDebt(address user)...\n      JUMPDEST \t\t\tfunction getDebt(address user)...\n      PUSH 40\t\t\tfunction getDebt(address user)...\n      MLOAD \t\t\tfunction getDebt(address user)...\n      PUSH [tag] 38\t\t\tfunction getDebt(address user)...\n      SWAP2 \t\t\tfunction getDebt(address user)...\n      SWAP1 \t\t\tfunction getDebt(address user)...\n      PUSH [tag] 23\t\t\tfunction getDebt(address user)...\n      JUMP \t\t\tfunction getDebt(address user)...\n    tag 38\t\t\tfunction getDebt(address user)...\n      JUMPDEST \t\t\tfunction getDebt(address user)...\n      PUSH 40\t\t\tfunction getDebt(address user)...\n      MLOAD \t\t\tfunction getDebt(address user)...\n      DUP1 \t\t\tfunction getDebt(address user)...\n      SWAP2 \t\t\tfunction getDebt(address user)...\n      SUB \t\t\tfunction getDebt(address user)...\n      SWAP1 \t\t\tfunction getDebt(address user)...\n      RETURN \t\t\tfunction getDebt(address user)...\n    tag 9\t\t\taddress public wBTC\n      JUMPDEST \t\t\taddress public wBTC\n      PUSH [tag] 39\t\t\taddress public wBTC\n      PUSH [tag] 40\t\t\taddress public wBTC\n      JUMP \t\t\taddress public wBTC\n    tag 39\t\t\taddress public wBTC\n      JUMPDEST \t\t\taddress public wBTC\n      PUSH 40\t\t\taddress public wBTC\n      MLOAD \t\t\taddress public wBTC\n      PUSH [tag] 41\t\t\taddress public wBTC\n      SWAP2 \t\t\taddress public wBTC\n      SWAP1 \t\t\taddress public wBTC\n      PUSH [tag] 17\t\t\taddress public wBTC\n      JUMP \t\t\taddress public wBTC\n    tag 41\t\t\taddress public wBTC\n      JUMPDEST \t\t\taddress public wBTC\n      PUSH 40\t\t\taddress public wBTC\n      MLOAD \t\t\taddress public wBTC\n      DUP1 \t\t\taddress public wBTC\n      SWAP2 \t\t\taddress public wBTC\n      SUB \t\t\taddress public wBTC\n      SWAP1 \t\t\taddress public wBTC\n      RETURN \t\t\taddress public wBTC\n    tag 10\t\t\tfunction getReserve(address to...\n      JUMPDEST \t\t\tfunction getReserve(address to...\n      PUSH [tag] 42\t\t\tfunction getReserve(address to...\n      PUSH 4\t\t\tfunction getReserve(address to...\n      DUP1 \t\t\tfunction getReserve(address to...\n      CALLDATASIZE \t\t\tfunction getReserve(address to...\n      SUB \t\t\tfunction getReserve(address to...\n      DUP2 \t\t\tfunction getReserve(address to...\n      ADD \t\t\tfunction getReserve(address to...\n      SWAP1 \t\t\tfunction getReserve(address to...\n      PUSH [tag] 43\t\t\tfunction getReserve(address to...\n      SWAP2 \t\t\tfunction getReserve(address to...\n      SWAP1 \t\t\tfunction getReserve(address to...\n      PUSH [tag] 20\t\t\tfunction getReserve(address to...\n      JUMP \t\t\tfunction getReserve(address to...\n    tag 43\t\t\tfunction getReserve(address to...\n      JUMPDEST \t\t\tfunction getReserve(address to...\n      PUSH [tag] 44\t\t\tfunction getReserve(address to...\n      JUMP \t\t\tfunction getReserve(address to...\n    tag 42\t\t\tfunction getReserve(address to...\n      JUMPDEST \t\t\tfunction getReserve(address to...\n      PUSH 40\t\t\tfunction getReserve(address to...\n      MLOAD \t\t\tfunction getReserve(address to...\n      PUSH [tag] 45\t\t\tfunction getReserve(address to...\n      SWAP2 \t\t\tfunction getReserve(address to...\n      SWAP1 \t\t\tfunction getReserve(address to...\n      PUSH [tag] 17\t\t\tfunction getReserve(address to...\n      JUMP \t\t\tfunction getReserve(address to...\n    tag 45\t\t\tfunction getReserve(address to...\n      JUMPDEST \t\t\tfunction getReserve(address to...\n      PUSH 40\t\t\tfunction getReserve(address to...\n      MLOAD \t\t\tfunction getReserve(address to...\n      DUP1 \t\t\tfunction getReserve(address to...\n      SWAP2 \t\t\tfunction getReserve(address to...\n      SUB \t\t\tfunction getReserve(address to...\n      SWAP1 \t\t\tfunction getReserve(address to...\n      RETURN \t\t\tfunction getReserve(address to...\n    tag 11\t\t\tfunction getSupplyedBalances(a...\n      JUMPDEST \t\t\tfunction getSupplyedBalances(a...\n      PUSH [tag] 46\t\t\tfunction getSupplyedBalances(a...\n      PUSH 4\t\t\tfunction getSupplyedBalances(a...\n      DUP1 \t\t\tfunction getSupplyedBalances(a...\n      CALLDATASIZE \t\t\tfunction getSupplyedBalances(a...\n      SUB \t\t\tfunction getSupplyedBalances(a...\n      DUP2 \t\t\tfunction getSupplyedBalances(a...\n      ADD \t\t\tfunction getSupplyedBalances(a...\n      SWAP1 \t\t\tfunction getSupplyedBalances(a...\n      PUSH [tag] 47\t\t\tfunction getSupplyedBalances(a...\n      SWAP2 \t\t\tfunction getSupplyedBalances(a...\n      SWAP1 \t\t\tfunction getSupplyedBalances(a...\n      PUSH [tag] 20\t\t\tfunction getSupplyedBalances(a...\n      JUMP \t\t\tfunction getSupplyedBalances(a...\n    tag 47\t\t\tfunction getSupplyedBalances(a...\n      JUMPDEST \t\t\tfunction getSupplyedBalances(a...\n      PUSH [tag] 48\t\t\tfunction getSupplyedBalances(a...\n      JUMP \t\t\tfunction getSupplyedBalances(a...\n    tag 46\t\t\tfunction getSupplyedBalances(a...\n      JUMPDEST \t\t\tfunction getSupplyedBalances(a...\n      PUSH 40\t\t\tfunction getSupplyedBalances(a...\n      MLOAD \t\t\tfunction getSupplyedBalances(a...\n      PUSH [tag] 49\t\t\tfunction getSupplyedBalances(a...\n      SWAP2 \t\t\tfunction getSupplyedBalances(a...\n      SWAP1 \t\t\tfunction getSupplyedBalances(a...\n      PUSH [tag] 34\t\t\tfunction getSupplyedBalances(a...\n      JUMP \t\t\tfunction getSupplyedBalances(a...\n    tag 49\t\t\tfunction getSupplyedBalances(a...\n      JUMPDEST \t\t\tfunction getSupplyedBalances(a...\n      PUSH 40\t\t\tfunction getSupplyedBalances(a...\n      MLOAD \t\t\tfunction getSupplyedBalances(a...\n      DUP1 \t\t\tfunction getSupplyedBalances(a...\n      SWAP2 \t\t\tfunction getSupplyedBalances(a...\n      SUB \t\t\tfunction getSupplyedBalances(a...\n      SWAP1 \t\t\tfunction getSupplyedBalances(a...\n      RETURN \t\t\tfunction getSupplyedBalances(a...\n    tag 12\t\t\tfunction getwBTC() public view...\n      JUMPDEST \t\t\tfunction getwBTC() public view...\n      PUSH [tag] 50\t\t\tfunction getwBTC() public view...\n      PUSH [tag] 51\t\t\tfunction getwBTC() public view...\n      JUMP \t\t\tfunction getwBTC() public view...\n    tag 50\t\t\tfunction getwBTC() public view...\n      JUMPDEST \t\t\tfunction getwBTC() public view...\n      PUSH 40\t\t\tfunction getwBTC() public view...\n      MLOAD \t\t\tfunction getwBTC() public view...\n      PUSH [tag] 52\t\t\tfunction getwBTC() public view...\n      SWAP2 \t\t\tfunction getwBTC() public view...\n      SWAP1 \t\t\tfunction getwBTC() public view...\n      PUSH [tag] 17\t\t\tfunction getwBTC() public view...\n      JUMP \t\t\tfunction getwBTC() public view...\n    tag 52\t\t\tfunction getwBTC() public view...\n      JUMPDEST \t\t\tfunction getwBTC() public view...\n      PUSH 40\t\t\tfunction getwBTC() public view...\n      MLOAD \t\t\tfunction getwBTC() public view...\n      DUP1 \t\t\tfunction getwBTC() public view...\n      SWAP2 \t\t\tfunction getwBTC() public view...\n      SUB \t\t\tfunction getwBTC() public view...\n      SWAP1 \t\t\tfunction getwBTC() public view...\n      RETURN \t\t\tfunction getwBTC() public view...\n    tag 15\t\t\tfunction getUSDC() public view...\n      JUMPDEST \t\t\tfunction getUSDC() public view...\n      PUSH 0\t\t\taddress\n      PUSH 3\t\t\tusdc\n      PUSH 0\t\t\tusdc\n      SWAP1 \t\t\tusdc\n      SLOAD \t\t\tusdc\n      SWAP1 \t\t\tusdc\n      PUSH 100\t\t\tusdc\n      EXP \t\t\tusdc\n      SWAP1 \t\t\tusdc\n      DIV \t\t\tusdc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdc\n      AND \t\t\tusdc\n      SWAP1 \t\t\treturn address(usdc)\n      POP \t\t\treturn address(usdc)\n      SWAP1 \t\t\tfunction getUSDC() public view...\n      JUMP \t\t\tfunction getUSDC() public view...\n    tag 21\t\t\tfunction getDepositValue(addre...\n      JUMPDEST \t\t\tfunction getDepositValue(addre...\n      PUSH 0\t\t\tuint256\n      DUP1 \t\t\tuint256 wBTCPrice\n      PUSH 0\t\t\tuint256 _timestamp\n      DUP1 \t\t\tuint256 _decimals\n      PUSH 0\t\t\twBTCReserve\n      DUP1 \t\t\twBTCReserve\n      SLOAD \t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      PUSH 100\t\t\twBTCReserve\n      EXP \t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      DIV \t\t\twBTCReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve\n      AND \t\t\twBTCReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve.getAssetPrice\n      AND \t\t\twBTCReserve.getAssetPrice\n      PUSH E54F0880\t\t\twBTCReserve.getAssetPrice\n      PUSH 40\t\t\twBTCReserve.getAssetPrice()\n      MLOAD \t\t\twBTCReserve.getAssetPrice()\n      DUP2 \t\t\twBTCReserve.getAssetPrice()\n      PUSH FFFFFFFF\t\t\twBTCReserve.getAssetPrice()\n      AND \t\t\twBTCReserve.getAssetPrice()\n      PUSH E0\t\t\twBTCReserve.getAssetPrice()\n      SHL \t\t\twBTCReserve.getAssetPrice()\n      DUP2 \t\t\twBTCReserve.getAssetPrice()\n      MSTORE \t\t\twBTCReserve.getAssetPrice()\n      PUSH 4\t\t\twBTCReserve.getAssetPrice()\n      ADD \t\t\twBTCReserve.getAssetPrice()\n      PUSH 60\t\t\twBTCReserve.getAssetPrice()\n      PUSH 40\t\t\twBTCReserve.getAssetPrice()\n      MLOAD \t\t\twBTCReserve.getAssetPrice()\n      DUP1 \t\t\twBTCReserve.getAssetPrice()\n      DUP4 \t\t\twBTCReserve.getAssetPrice()\n      SUB \t\t\twBTCReserve.getAssetPrice()\n      DUP2 \t\t\twBTCReserve.getAssetPrice()\n      DUP7 \t\t\twBTCReserve.getAssetPrice()\n      GAS \t\t\twBTCReserve.getAssetPrice()\n      STATICCALL \t\t\twBTCReserve.getAssetPrice()\n      ISZERO \t\t\twBTCReserve.getAssetPrice()\n      DUP1 \t\t\twBTCReserve.getAssetPrice()\n      ISZERO \t\t\twBTCReserve.getAssetPrice()\n      PUSH [tag] 56\t\t\twBTCReserve.getAssetPrice()\n      JUMPI \t\t\twBTCReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\twBTCReserve.getAssetPrice()\n      PUSH 0\t\t\twBTCReserve.getAssetPrice()\n      DUP1 \t\t\twBTCReserve.getAssetPrice()\n      RETURNDATACOPY \t\t\twBTCReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\twBTCReserve.getAssetPrice()\n      PUSH 0\t\t\twBTCReserve.getAssetPrice()\n      REVERT \t\t\twBTCReserve.getAssetPrice()\n    tag 56\t\t\twBTCReserve.getAssetPrice()\n      JUMPDEST \t\t\twBTCReserve.getAssetPrice()\n      POP \t\t\twBTCReserve.getAssetPrice()\n      POP \t\t\twBTCReserve.getAssetPrice()\n      POP \t\t\twBTCReserve.getAssetPrice()\n      POP \t\t\twBTCReserve.getAssetPrice()\n      PUSH 40\t\t\twBTCReserve.getAssetPrice()\n      MLOAD \t\t\twBTCReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\twBTCReserve.getAssetPrice()\n      PUSH 1F\t\t\twBTCReserve.getAssetPrice()\n      NOT \t\t\twBTCReserve.getAssetPrice()\n      PUSH 1F\t\t\twBTCReserve.getAssetPrice()\n      DUP3 \t\t\twBTCReserve.getAssetPrice()\n      ADD \t\t\twBTCReserve.getAssetPrice()\n      AND \t\t\twBTCReserve.getAssetPrice()\n      DUP3 \t\t\twBTCReserve.getAssetPrice()\n      ADD \t\t\twBTCReserve.getAssetPrice()\n      DUP1 \t\t\twBTCReserve.getAssetPrice()\n      PUSH 40\t\t\twBTCReserve.getAssetPrice()\n      MSTORE \t\t\twBTCReserve.getAssetPrice()\n      POP \t\t\twBTCReserve.getAssetPrice()\n      DUP2 \t\t\twBTCReserve.getAssetPrice()\n      ADD \t\t\twBTCReserve.getAssetPrice()\n      SWAP1 \t\t\twBTCReserve.getAssetPrice()\n      PUSH [tag] 57\t\t\twBTCReserve.getAssetPrice()\n      SWAP2 \t\t\twBTCReserve.getAssetPrice()\n      SWAP1 \t\t\twBTCReserve.getAssetPrice()\n      PUSH [tag] 58\t\t\twBTCReserve.getAssetPrice()\n      JUMP \t\t\twBTCReserve.getAssetPrice()\n    tag 57\t\t\twBTCReserve.getAssetPrice()\n      JUMPDEST \t\t\twBTCReserve.getAssetPrice()\n      SWAP3 \t\t\t(uint256 wBTCPrice, uint256 _t...\n      POP \t\t\t(uint256 wBTCPrice, uint256 _t...\n      SWAP3 \t\t\t(uint256 wBTCPrice, uint256 _t...\n      POP \t\t\t(uint256 wBTCPrice, uint256 _t...\n      SWAP3 \t\t\t(uint256 wBTCPrice, uint256 _t...\n      POP \t\t\t(uint256 wBTCPrice, uint256 _t...\n      PUSH 0\t\t\tuint256 collatValue\n      DUP2 \t\t\t_decimals\n      PUSH A\t\t\t10\n      PUSH [tag] 59\t\t\t10 ** _decimals\n      SWAP2 \t\t\t10 ** _decimals\n      SWAP1 \t\t\t10 ** _decimals\n      PUSH [tag] 60\t\t\t10 ** _decimals\n      JUMP \t\t\t10 ** _decimals\n    tag 59\t\t\t10 ** _decimals\n      JUMPDEST \t\t\t10 ** _decimals\n      DUP5 \t\t\twBTCPrice\n      PUSH 0\t\t\twBTCReserve\n      DUP1 \t\t\twBTCReserve\n      SLOAD \t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      PUSH 100\t\t\twBTCReserve\n      EXP \t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      DIV \t\t\twBTCReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve\n      AND \t\t\twBTCReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve.getSupplyedAmount\n      AND \t\t\twBTCReserve.getSupplyedAmount\n      PUSH AC75409A\t\t\twBTCReserve.getSupplyedAmount\n      DUP10 \t\t\tuser\n      PUSH 40\t\t\twBTCReserve.getSupplyedAmount(...\n      MLOAD \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP3 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH FFFFFFFF\t\t\twBTCReserve.getSupplyedAmount(...\n      AND \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH E0\t\t\twBTCReserve.getSupplyedAmount(...\n      SHL \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      MSTORE \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 4\t\t\twBTCReserve.getSupplyedAmount(...\n      ADD \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 61\t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 17\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMP \t\t\twBTCReserve.getSupplyedAmount(...\n    tag 61\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 20\t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 40\t\t\twBTCReserve.getSupplyedAmount(...\n      MLOAD \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP4 \t\t\twBTCReserve.getSupplyedAmount(...\n      SUB \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP7 \t\t\twBTCReserve.getSupplyedAmount(...\n      GAS \t\t\twBTCReserve.getSupplyedAmount(...\n      STATICCALL \t\t\twBTCReserve.getSupplyedAmount(...\n      ISZERO \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      ISZERO \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 63\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMPI \t\t\twBTCReserve.getSupplyedAmount(...\n      RETURNDATASIZE \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 0\t\t\twBTCReserve.getSupplyedAmount(...\n      DUP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      RETURNDATACOPY \t\t\twBTCReserve.getSupplyedAmount(...\n      RETURNDATASIZE \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 0\t\t\twBTCReserve.getSupplyedAmount(...\n      REVERT \t\t\twBTCReserve.getSupplyedAmount(...\n    tag 63\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\twBTCReserve.getSupplyedAmount(...\n      POP \t\t\twBTCReserve.getSupplyedAmount(...\n      POP \t\t\twBTCReserve.getSupplyedAmount(...\n      POP \t\t\twBTCReserve.getSupplyedAmount(...\n      POP \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 40\t\t\twBTCReserve.getSupplyedAmount(...\n      MLOAD \t\t\twBTCReserve.getSupplyedAmount(...\n      RETURNDATASIZE \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 1F\t\t\twBTCReserve.getSupplyedAmount(...\n      NOT \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 1F\t\t\twBTCReserve.getSupplyedAmount(...\n      DUP3 \t\t\twBTCReserve.getSupplyedAmount(...\n      ADD \t\t\twBTCReserve.getSupplyedAmount(...\n      AND \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP3 \t\t\twBTCReserve.getSupplyedAmount(...\n      ADD \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 40\t\t\twBTCReserve.getSupplyedAmount(...\n      MSTORE \t\t\twBTCReserve.getSupplyedAmount(...\n      POP \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      ADD \t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 64\t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 65\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMP \t\t\twBTCReserve.getSupplyedAmount(...\n    tag 64\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 66\t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 67\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMP \t\t\twBTCReserve.getSupplyedAmount(...\n    tag 66\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 68\t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 69\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMP \t\t\twBTCReserve.getSupplyedAmount(...\n    tag 68\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP1 \t\t\tuint256 collatValue = wBTCRese...\n      POP \t\t\tuint256 collatValue = wBTCRese...\n      DUP1 \t\t\tcollatValue\n      SWAP5 \t\t\treturn collatValue\n      POP \t\t\treturn collatValue\n      POP \t\t\treturn collatValue\n      POP \t\t\treturn collatValue\n      POP \t\t\treturn collatValue\n      POP \t\t\treturn collatValue\n      SWAP2 \t\t\tfunction getDepositValue(addre...\n      SWAP1 \t\t\tfunction getDepositValue(addre...\n      POP \t\t\tfunction getDepositValue(addre...\n      JUMP \t\t\tfunction getDepositValue(addre...\n    tag 25\t\t\taddress public usdc\n      JUMPDEST \t\t\taddress public usdc\n      PUSH 3\t\t\taddress public usdc\n      PUSH 0\t\t\taddress public usdc\n      SWAP1 \t\t\taddress public usdc\n      SLOAD \t\t\taddress public usdc\n      SWAP1 \t\t\taddress public usdc\n      PUSH 100\t\t\taddress public usdc\n      EXP \t\t\taddress public usdc\n      SWAP1 \t\t\taddress public usdc\n      DIV \t\t\taddress public usdc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress public usdc\n      AND \t\t\taddress public usdc\n      DUP2 \t\t\taddress public usdc\n      JUMP \t\t\taddress public usdc\n    tag 30\t\t\tfunction borrow(address asset,...\n      JUMPDEST \t\t\tfunction borrow(address asset,...\n      PUSH 3\t\t\tusdc\n      PUSH 0\t\t\tusdc\n      SWAP1 \t\t\tusdc\n      SLOAD \t\t\tusdc\n      SWAP1 \t\t\tusdc\n      PUSH 100\t\t\tusdc\n      EXP \t\t\tusdc\n      SWAP1 \t\t\tusdc\n      DIV \t\t\tusdc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdc\n      AND \t\t\tusdc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tasset == usdc\n      AND \t\t\tasset == usdc\n      DUP3 \t\t\tasset\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tasset == usdc\n      AND \t\t\tasset == usdc\n      EQ \t\t\tasset == usdc\n      PUSH [tag] 71\t\t\trequire(asset == usdc)\n      JUMPI \t\t\trequire(asset == usdc)\n      PUSH 0\t\t\trequire(asset == usdc)\n      DUP1 \t\t\trequire(asset == usdc)\n      REVERT \t\t\trequire(asset == usdc)\n    tag 71\t\t\trequire(asset == usdc)\n      JUMPDEST \t\t\trequire(asset == usdc)\n      PUSH 0\t\t\tuint256 collateralValue\n      ADDRESS \t\t\tthis\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tthis.getDepositValue\n      AND \t\t\tthis.getDepositValue\n      PUSH 3B2E5F94\t\t\tthis.getDepositValue\n      CALLER \t\t\tmsg.sender\n      PUSH 40\t\t\tthis.getDepositValue(msg.sende...\n      MLOAD \t\t\tthis.getDepositValue(msg.sende...\n      DUP3 \t\t\tthis.getDepositValue(msg.sende...\n      PUSH FFFFFFFF\t\t\tthis.getDepositValue(msg.sende...\n      AND \t\t\tthis.getDepositValue(msg.sende...\n      PUSH E0\t\t\tthis.getDepositValue(msg.sende...\n      SHL \t\t\tthis.getDepositValue(msg.sende...\n      DUP2 \t\t\tthis.getDepositValue(msg.sende...\n      MSTORE \t\t\tthis.getDepositValue(msg.sende...\n      PUSH 4\t\t\tthis.getDepositValue(msg.sende...\n      ADD \t\t\tthis.getDepositValue(msg.sende...\n      PUSH [tag] 72\t\t\tthis.getDepositValue(msg.sende...\n      SWAP2 \t\t\tthis.getDepositValue(msg.sende...\n      SWAP1 \t\t\tthis.getDepositValue(msg.sende...\n      PUSH [tag] 17\t\t\tthis.getDepositValue(msg.sende...\n      JUMP \t\t\tthis.getDepositValue(msg.sende...\n    tag 72\t\t\tthis.getDepositValue(msg.sende...\n      JUMPDEST \t\t\tthis.getDepositValue(msg.sende...\n      PUSH 20\t\t\tthis.getDepositValue(msg.sende...\n      PUSH 40\t\t\tthis.getDepositValue(msg.sende...\n      MLOAD \t\t\tthis.getDepositValue(msg.sende...\n      DUP1 \t\t\tthis.getDepositValue(msg.sende...\n      DUP4 \t\t\tthis.getDepositValue(msg.sende...\n      SUB \t\t\tthis.getDepositValue(msg.sende...\n      DUP2 \t\t\tthis.getDepositValue(msg.sende...\n      DUP7 \t\t\tthis.getDepositValue(msg.sende...\n      GAS \t\t\tthis.getDepositValue(msg.sende...\n      STATICCALL \t\t\tthis.getDepositValue(msg.sende...\n      ISZERO \t\t\tthis.getDepositValue(msg.sende...\n      DUP1 \t\t\tthis.getDepositValue(msg.sende...\n      ISZERO \t\t\tthis.getDepositValue(msg.sende...\n      PUSH [tag] 74\t\t\tthis.getDepositValue(msg.sende...\n      JUMPI \t\t\tthis.getDepositValue(msg.sende...\n      RETURNDATASIZE \t\t\tthis.getDepositValue(msg.sende...\n      PUSH 0\t\t\tthis.getDepositValue(msg.sende...\n      DUP1 \t\t\tthis.getDepositValue(msg.sende...\n      RETURNDATACOPY \t\t\tthis.getDepositValue(msg.sende...\n      RETURNDATASIZE \t\t\tthis.getDepositValue(msg.sende...\n      PUSH 0\t\t\tthis.getDepositValue(msg.sende...\n      REVERT \t\t\tthis.getDepositValue(msg.sende...\n    tag 74\t\t\tthis.getDepositValue(msg.sende...\n      JUMPDEST \t\t\tthis.getDepositValue(msg.sende...\n      POP \t\t\tthis.getDepositValue(msg.sende...\n      POP \t\t\tthis.getDepositValue(msg.sende...\n      POP \t\t\tthis.getDepositValue(msg.sende...\n      POP \t\t\tthis.getDepositValue(msg.sende...\n      PUSH 40\t\t\tthis.getDepositValue(msg.sende...\n      MLOAD \t\t\tthis.getDepositValue(msg.sende...\n      RETURNDATASIZE \t\t\tthis.getDepositValue(msg.sende...\n      PUSH 1F\t\t\tthis.getDepositValue(msg.sende...\n      NOT \t\t\tthis.getDepositValue(msg.sende...\n      PUSH 1F\t\t\tthis.getDepositValue(msg.sende...\n      DUP3 \t\t\tthis.getDepositValue(msg.sende...\n      ADD \t\t\tthis.getDepositValue(msg.sende...\n      AND \t\t\tthis.getDepositValue(msg.sende...\n      DUP3 \t\t\tthis.getDepositValue(msg.sende...\n      ADD \t\t\tthis.getDepositValue(msg.sende...\n      DUP1 \t\t\tthis.getDepositValue(msg.sende...\n      PUSH 40\t\t\tthis.getDepositValue(msg.sende...\n      MSTORE \t\t\tthis.getDepositValue(msg.sende...\n      POP \t\t\tthis.getDepositValue(msg.sende...\n      DUP2 \t\t\tthis.getDepositValue(msg.sende...\n      ADD \t\t\tthis.getDepositValue(msg.sende...\n      SWAP1 \t\t\tthis.getDepositValue(msg.sende...\n      PUSH [tag] 75\t\t\tthis.getDepositValue(msg.sende...\n      SWAP2 \t\t\tthis.getDepositValue(msg.sende...\n      SWAP1 \t\t\tthis.getDepositValue(msg.sende...\n      PUSH [tag] 65\t\t\tthis.getDepositValue(msg.sende...\n      JUMP \t\t\tthis.getDepositValue(msg.sende...\n    tag 75\t\t\tthis.getDepositValue(msg.sende...\n      JUMPDEST \t\t\tthis.getDepositValue(msg.sende...\n      SWAP1 \t\t\tuint256 collateralValue = this...\n      POP \t\t\tuint256 collateralValue = this...\n      PUSH 0\t\t\tuint256 maxValueBorred\n      PUSH 64\t\t\t100\n      PUSH 5\t\t\twBTCLTV\n      PUSH 0\t\t\twBTCLTV\n      SWAP1 \t\t\twBTCLTV\n      SLOAD \t\t\twBTCLTV\n      SWAP1 \t\t\twBTCLTV\n      PUSH 100\t\t\twBTCLTV\n      EXP \t\t\twBTCLTV\n      SWAP1 \t\t\twBTCLTV\n      DIV \t\t\twBTCLTV\n      PUSH FF\t\t\twBTCLTV\n      AND \t\t\twBTCLTV\n      PUSH FF\t\t\tcollateralValue * wBTCLTV\n      AND \t\t\tcollateralValue * wBTCLTV\n      DUP4 \t\t\tcollateralValue\n      PUSH [tag] 76\t\t\tcollateralValue * wBTCLTV\n      SWAP2 \t\t\tcollateralValue * wBTCLTV\n      SWAP1 \t\t\tcollateralValue * wBTCLTV\n      PUSH [tag] 67\t\t\tcollateralValue * wBTCLTV\n      JUMP \t\t\tcollateralValue * wBTCLTV\n    tag 76\t\t\tcollateralValue * wBTCLTV\n      JUMPDEST \t\t\tcollateralValue * wBTCLTV\n      PUSH [tag] 77\t\t\tcollateralValue * wBTCLTV / 10...\n      SWAP2 \t\t\tcollateralValue * wBTCLTV / 10...\n      SWAP1 \t\t\tcollateralValue * wBTCLTV / 10...\n      PUSH [tag] 69\t\t\tcollateralValue * wBTCLTV / 10...\n      JUMP \t\t\tcollateralValue * wBTCLTV / 10...\n    tag 77\t\t\tcollateralValue * wBTCLTV / 10...\n      JUMPDEST \t\t\tcollateralValue * wBTCLTV / 10...\n      SWAP1 \t\t\tuint256 maxValueBorred = colla...\n      POP \t\t\tuint256 maxValueBorred = colla...\n      PUSH 0\t\t\tuint256 currentBorrowed\n      ADDRESS \t\t\tthis\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tthis.getDebt\n      AND \t\t\tthis.getDebt\n      PUSH 9A78E72E\t\t\tthis.getDebt\n      CALLER \t\t\tmsg.sender\n      PUSH 40\t\t\tthis.getDebt(msg.sender)\n      MLOAD \t\t\tthis.getDebt(msg.sender)\n      DUP3 \t\t\tthis.getDebt(msg.sender)\n      PUSH FFFFFFFF\t\t\tthis.getDebt(msg.sender)\n      AND \t\t\tthis.getDebt(msg.sender)\n      PUSH E0\t\t\tthis.getDebt(msg.sender)\n      SHL \t\t\tthis.getDebt(msg.sender)\n      DUP2 \t\t\tthis.getDebt(msg.sender)\n      MSTORE \t\t\tthis.getDebt(msg.sender)\n      PUSH 4\t\t\tthis.getDebt(msg.sender)\n      ADD \t\t\tthis.getDebt(msg.sender)\n      PUSH [tag] 78\t\t\tthis.getDebt(msg.sender)\n      SWAP2 \t\t\tthis.getDebt(msg.sender)\n      SWAP1 \t\t\tthis.getDebt(msg.sender)\n      PUSH [tag] 17\t\t\tthis.getDebt(msg.sender)\n      JUMP \t\t\tthis.getDebt(msg.sender)\n    tag 78\t\t\tthis.getDebt(msg.sender)\n      JUMPDEST \t\t\tthis.getDebt(msg.sender)\n      PUSH 20\t\t\tthis.getDebt(msg.sender)\n      PUSH 40\t\t\tthis.getDebt(msg.sender)\n      MLOAD \t\t\tthis.getDebt(msg.sender)\n      DUP1 \t\t\tthis.getDebt(msg.sender)\n      DUP4 \t\t\tthis.getDebt(msg.sender)\n      SUB \t\t\tthis.getDebt(msg.sender)\n      DUP2 \t\t\tthis.getDebt(msg.sender)\n      DUP7 \t\t\tthis.getDebt(msg.sender)\n      GAS \t\t\tthis.getDebt(msg.sender)\n      STATICCALL \t\t\tthis.getDebt(msg.sender)\n      ISZERO \t\t\tthis.getDebt(msg.sender)\n      DUP1 \t\t\tthis.getDebt(msg.sender)\n      ISZERO \t\t\tthis.getDebt(msg.sender)\n      PUSH [tag] 80\t\t\tthis.getDebt(msg.sender)\n      JUMPI \t\t\tthis.getDebt(msg.sender)\n      RETURNDATASIZE \t\t\tthis.getDebt(msg.sender)\n      PUSH 0\t\t\tthis.getDebt(msg.sender)\n      DUP1 \t\t\tthis.getDebt(msg.sender)\n      RETURNDATACOPY \t\t\tthis.getDebt(msg.sender)\n      RETURNDATASIZE \t\t\tthis.getDebt(msg.sender)\n      PUSH 0\t\t\tthis.getDebt(msg.sender)\n      REVERT \t\t\tthis.getDebt(msg.sender)\n    tag 80\t\t\tthis.getDebt(msg.sender)\n      JUMPDEST \t\t\tthis.getDebt(msg.sender)\n      POP \t\t\tthis.getDebt(msg.sender)\n      POP \t\t\tthis.getDebt(msg.sender)\n      POP \t\t\tthis.getDebt(msg.sender)\n      POP \t\t\tthis.getDebt(msg.sender)\n      PUSH 40\t\t\tthis.getDebt(msg.sender)\n      MLOAD \t\t\tthis.getDebt(msg.sender)\n      RETURNDATASIZE \t\t\tthis.getDebt(msg.sender)\n      PUSH 1F\t\t\tthis.getDebt(msg.sender)\n      NOT \t\t\tthis.getDebt(msg.sender)\n      PUSH 1F\t\t\tthis.getDebt(msg.sender)\n      DUP3 \t\t\tthis.getDebt(msg.sender)\n      ADD \t\t\tthis.getDebt(msg.sender)\n      AND \t\t\tthis.getDebt(msg.sender)\n      DUP3 \t\t\tthis.getDebt(msg.sender)\n      ADD \t\t\tthis.getDebt(msg.sender)\n      DUP1 \t\t\tthis.getDebt(msg.sender)\n      PUSH 40\t\t\tthis.getDebt(msg.sender)\n      MSTORE \t\t\tthis.getDebt(msg.sender)\n      POP \t\t\tthis.getDebt(msg.sender)\n      DUP2 \t\t\tthis.getDebt(msg.sender)\n      ADD \t\t\tthis.getDebt(msg.sender)\n      SWAP1 \t\t\tthis.getDebt(msg.sender)\n      PUSH [tag] 81\t\t\tthis.getDebt(msg.sender)\n      SWAP2 \t\t\tthis.getDebt(msg.sender)\n      SWAP1 \t\t\tthis.getDebt(msg.sender)\n      PUSH [tag] 65\t\t\tthis.getDebt(msg.sender)\n      JUMP \t\t\tthis.getDebt(msg.sender)\n    tag 81\t\t\tthis.getDebt(msg.sender)\n      JUMPDEST \t\t\tthis.getDebt(msg.sender)\n      SWAP1 \t\t\tuint256 currentBorrowed = this...\n      POP \t\t\tuint256 currentBorrowed = this...\n      DUP2 \t\t\tmaxValueBorred\n      DUP5 \t\t\tamount\n      DUP3 \t\t\tcurrentBorrowed\n      PUSH [tag] 82\t\t\tcurrentBorrowed + amount\n      SWAP2 \t\t\tcurrentBorrowed + amount\n      SWAP1 \t\t\tcurrentBorrowed + amount\n      PUSH [tag] 83\t\t\tcurrentBorrowed + amount\n      JUMP \t\t\tcurrentBorrowed + amount\n    tag 82\t\t\tcurrentBorrowed + amount\n      JUMPDEST \t\t\tcurrentBorrowed + amount\n      LT \t\t\t(currentBorrowed + amount) < m...\n      PUSH [tag] 84\t\t\trequire((currentBorrowed + amo...\n      JUMPI \t\t\trequire((currentBorrowed + amo...\n      PUSH 40\t\t\trequire((currentBorrowed + amo...\n      MLOAD \t\t\trequire((currentBorrowed + amo...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire((currentBorrowed + amo...\n      DUP2 \t\t\trequire((currentBorrowed + amo...\n      MSTORE \t\t\trequire((currentBorrowed + amo...\n      PUSH 4\t\t\trequire((currentBorrowed + amo...\n      ADD \t\t\trequire((currentBorrowed + amo...\n      PUSH [tag] 85\t\t\trequire((currentBorrowed + amo...\n      SWAP1 \t\t\trequire((currentBorrowed + amo...\n      PUSH [tag] 86\t\t\trequire((currentBorrowed + amo...\n      JUMP \t\t\trequire((currentBorrowed + amo...\n    tag 85\t\t\trequire((currentBorrowed + amo...\n      JUMPDEST \t\t\trequire((currentBorrowed + amo...\n      PUSH 40\t\t\trequire((currentBorrowed + amo...\n      MLOAD \t\t\trequire((currentBorrowed + amo...\n      DUP1 \t\t\trequire((currentBorrowed + amo...\n      SWAP2 \t\t\trequire((currentBorrowed + amo...\n      SUB \t\t\trequire((currentBorrowed + amo...\n      SWAP1 \t\t\trequire((currentBorrowed + amo...\n      REVERT \t\t\trequire((currentBorrowed + amo...\n    tag 84\t\t\trequire((currentBorrowed + amo...\n      JUMPDEST \t\t\trequire((currentBorrowed + amo...\n      DUP4 \t\t\tamount\n      PUSH 4\t\t\tborrowedUSDC\n      PUSH 0\t\t\tborrowedUSDC[msg.sender]\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tborrowedUSDC[msg.sender]\n      AND \t\t\tborrowedUSDC[msg.sender]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tborrowedUSDC[msg.sender]\n      AND \t\t\tborrowedUSDC[msg.sender]\n      DUP2 \t\t\tborrowedUSDC[msg.sender]\n      MSTORE \t\t\tborrowedUSDC[msg.sender]\n      PUSH 20\t\t\tborrowedUSDC[msg.sender]\n      ADD \t\t\tborrowedUSDC[msg.sender]\n      SWAP1 \t\t\tborrowedUSDC[msg.sender]\n      DUP2 \t\t\tborrowedUSDC[msg.sender]\n      MSTORE \t\t\tborrowedUSDC[msg.sender]\n      PUSH 20\t\t\tborrowedUSDC[msg.sender]\n      ADD \t\t\tborrowedUSDC[msg.sender]\n      PUSH 0\t\t\tborrowedUSDC[msg.sender]\n      KECCAK256 \t\t\tborrowedUSDC[msg.sender]\n      PUSH 0\t\t\tborrowedUSDC[msg.sender]\n      DUP3 \t\t\tborrowedUSDC[msg.sender] += am...\n      DUP3 \t\t\tborrowedUSDC[msg.sender] += am...\n      SLOAD \t\t\tborrowedUSDC[msg.sender] += am...\n      PUSH [tag] 87\t\t\tborrowedUSDC[msg.sender] += am...\n      SWAP2 \t\t\tborrowedUSDC[msg.sender] += am...\n      SWAP1 \t\t\tborrowedUSDC[msg.sender] += am...\n      PUSH [tag] 83\t\t\tborrowedUSDC[msg.sender] += am...\n      JUMP \t\t\tborrowedUSDC[msg.sender] += am...\n    tag 87\t\t\tborrowedUSDC[msg.sender] += am...\n      JUMPDEST \t\t\tborrowedUSDC[msg.sender] += am...\n      SWAP3 \t\t\tborrowedUSDC[msg.sender] += am...\n      POP \t\t\tborrowedUSDC[msg.sender] += am...\n      POP \t\t\tborrowedUSDC[msg.sender] += am...\n      DUP2 \t\t\tborrowedUSDC[msg.sender] += am...\n      SWAP1 \t\t\tborrowedUSDC[msg.sender] += am...\n      SSTORE \t\t\tborrowedUSDC[msg.sender] += am...\n      POP \t\t\tborrowedUSDC[msg.sender] += am...\n      PUSH 1\t\t\tusdcReserve\n      PUSH 0\t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      SLOAD \t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      PUSH 100\t\t\tusdcReserve\n      EXP \t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      DIV \t\t\tusdcReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve\n      AND \t\t\tusdcReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve.executeTransaction\n      AND \t\t\tusdcReserve.executeTransaction\n      PUSH 683AE083\t\t\tusdcReserve.executeTransaction\n      CALLER \t\t\tmsg.sender\n      DUP7 \t\t\tamount\n      PUSH 40\t\t\tusdcReserve.executeTransaction...\n      MLOAD \t\t\tusdcReserve.executeTransaction...\n      DUP4 \t\t\tusdcReserve.executeTransaction...\n      PUSH FFFFFFFF\t\t\tusdcReserve.executeTransaction...\n      AND \t\t\tusdcReserve.executeTransaction...\n      PUSH E0\t\t\tusdcReserve.executeTransaction...\n      SHL \t\t\tusdcReserve.executeTransaction...\n      DUP2 \t\t\tusdcReserve.executeTransaction...\n      MSTORE \t\t\tusdcReserve.executeTransaction...\n      PUSH 4\t\t\tusdcReserve.executeTransaction...\n      ADD \t\t\tusdcReserve.executeTransaction...\n      PUSH [tag] 88\t\t\tusdcReserve.executeTransaction...\n      SWAP3 \t\t\tusdcReserve.executeTransaction...\n      SWAP2 \t\t\tusdcReserve.executeTransaction...\n      SWAP1 \t\t\tusdcReserve.executeTransaction...\n      PUSH [tag] 89\t\t\tusdcReserve.executeTransaction...\n      JUMP \t\t\tusdcReserve.executeTransaction...\n    tag 88\t\t\tusdcReserve.executeTransaction...\n      JUMPDEST \t\t\tusdcReserve.executeTransaction...\n      PUSH 0\t\t\tusdcReserve.executeTransaction...\n      PUSH 40\t\t\tusdcReserve.executeTransaction...\n      MLOAD \t\t\tusdcReserve.executeTransaction...\n      DUP1 \t\t\tusdcReserve.executeTransaction...\n      DUP4 \t\t\tusdcReserve.executeTransaction...\n      SUB \t\t\tusdcReserve.executeTransaction...\n      DUP2 \t\t\tusdcReserve.executeTransaction...\n      PUSH 0\t\t\tusdcReserve.executeTransaction...\n      DUP8 \t\t\tusdcReserve.executeTransaction...\n      DUP1 \t\t\tusdcReserve.executeTransaction...\n      EXTCODESIZE \t\t\tusdcReserve.executeTransaction...\n      ISZERO \t\t\tusdcReserve.executeTransaction...\n      DUP1 \t\t\tusdcReserve.executeTransaction...\n      ISZERO \t\t\tusdcReserve.executeTransaction...\n      PUSH [tag] 90\t\t\tusdcReserve.executeTransaction...\n      JUMPI \t\t\tusdcReserve.executeTransaction...\n      PUSH 0\t\t\tusdcReserve.executeTransaction...\n      DUP1 \t\t\tusdcReserve.executeTransaction...\n      REVERT \t\t\tusdcReserve.executeTransaction...\n    tag 90\t\t\tusdcReserve.executeTransaction...\n      JUMPDEST \t\t\tusdcReserve.executeTransaction...\n      POP \t\t\tusdcReserve.executeTransaction...\n      GAS \t\t\tusdcReserve.executeTransaction...\n      CALL \t\t\tusdcReserve.executeTransaction...\n      ISZERO \t\t\tusdcReserve.executeTransaction...\n      DUP1 \t\t\tusdcReserve.executeTransaction...\n      ISZERO \t\t\tusdcReserve.executeTransaction...\n      PUSH [tag] 92\t\t\tusdcReserve.executeTransaction...\n      JUMPI \t\t\tusdcReserve.executeTransaction...\n      RETURNDATASIZE \t\t\tusdcReserve.executeTransaction...\n      PUSH 0\t\t\tusdcReserve.executeTransaction...\n      DUP1 \t\t\tusdcReserve.executeTransaction...\n      RETURNDATACOPY \t\t\tusdcReserve.executeTransaction...\n      RETURNDATASIZE \t\t\tusdcReserve.executeTransaction...\n      PUSH 0\t\t\tusdcReserve.executeTransaction...\n      REVERT \t\t\tusdcReserve.executeTransaction...\n    tag 92\t\t\tusdcReserve.executeTransaction...\n      JUMPDEST \t\t\tusdcReserve.executeTransaction...\n      POP \t\t\tusdcReserve.executeTransaction...\n      POP \t\t\tusdcReserve.executeTransaction...\n      POP \t\t\tusdcReserve.executeTransaction...\n      POP \t\t\tusdcReserve.executeTransaction...\n      POP \t\t\t{\\n        require(asset == us...\n      POP \t\t\t{\\n        require(asset == us...\n      POP \t\t\t{\\n        require(asset == us...\n      POP \t\t\tfunction borrow(address asset,...\n      POP \t\t\tfunction borrow(address asset,...\n      JUMP \t\t\tfunction borrow(address asset,...\n    tag 32\t\t\tfunction getAssetsPrice() exte...\n      JUMPDEST \t\t\tfunction getAssetsPrice() exte...\n      PUSH 60\t\t\tuint256[] memory\n      PUSH 0\t\t\tuint256 wBTCPrice\n      DUP1 \t\t\tuint256 _timestamp\n      PUSH 0\t\t\tuint256 _decimals\n      DUP1 \t\t\twBTCReserve\n      PUSH 0\t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      SLOAD \t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      PUSH 100\t\t\twBTCReserve\n      EXP \t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      DIV \t\t\twBTCReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve\n      AND \t\t\twBTCReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve.getAssetPrice\n      AND \t\t\twBTCReserve.getAssetPrice\n      PUSH E54F0880\t\t\twBTCReserve.getAssetPrice\n      PUSH 40\t\t\twBTCReserve.getAssetPrice()\n      MLOAD \t\t\twBTCReserve.getAssetPrice()\n      DUP2 \t\t\twBTCReserve.getAssetPrice()\n      PUSH FFFFFFFF\t\t\twBTCReserve.getAssetPrice()\n      AND \t\t\twBTCReserve.getAssetPrice()\n      PUSH E0\t\t\twBTCReserve.getAssetPrice()\n      SHL \t\t\twBTCReserve.getAssetPrice()\n      DUP2 \t\t\twBTCReserve.getAssetPrice()\n      MSTORE \t\t\twBTCReserve.getAssetPrice()\n      PUSH 4\t\t\twBTCReserve.getAssetPrice()\n      ADD \t\t\twBTCReserve.getAssetPrice()\n      PUSH 60\t\t\twBTCReserve.getAssetPrice()\n      PUSH 40\t\t\twBTCReserve.getAssetPrice()\n      MLOAD \t\t\twBTCReserve.getAssetPrice()\n      DUP1 \t\t\twBTCReserve.getAssetPrice()\n      DUP4 \t\t\twBTCReserve.getAssetPrice()\n      SUB \t\t\twBTCReserve.getAssetPrice()\n      DUP2 \t\t\twBTCReserve.getAssetPrice()\n      DUP7 \t\t\twBTCReserve.getAssetPrice()\n      GAS \t\t\twBTCReserve.getAssetPrice()\n      STATICCALL \t\t\twBTCReserve.getAssetPrice()\n      ISZERO \t\t\twBTCReserve.getAssetPrice()\n      DUP1 \t\t\twBTCReserve.getAssetPrice()\n      ISZERO \t\t\twBTCReserve.getAssetPrice()\n      PUSH [tag] 95\t\t\twBTCReserve.getAssetPrice()\n      JUMPI \t\t\twBTCReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\twBTCReserve.getAssetPrice()\n      PUSH 0\t\t\twBTCReserve.getAssetPrice()\n      DUP1 \t\t\twBTCReserve.getAssetPrice()\n      RETURNDATACOPY \t\t\twBTCReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\twBTCReserve.getAssetPrice()\n      PUSH 0\t\t\twBTCReserve.getAssetPrice()\n      REVERT \t\t\twBTCReserve.getAssetPrice()\n    tag 95\t\t\twBTCReserve.getAssetPrice()\n      JUMPDEST \t\t\twBTCReserve.getAssetPrice()\n      POP \t\t\twBTCReserve.getAssetPrice()\n      POP \t\t\twBTCReserve.getAssetPrice()\n      POP \t\t\twBTCReserve.getAssetPrice()\n      POP \t\t\twBTCReserve.getAssetPrice()\n      PUSH 40\t\t\twBTCReserve.getAssetPrice()\n      MLOAD \t\t\twBTCReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\twBTCReserve.getAssetPrice()\n      PUSH 1F\t\t\twBTCReserve.getAssetPrice()\n      NOT \t\t\twBTCReserve.getAssetPrice()\n      PUSH 1F\t\t\twBTCReserve.getAssetPrice()\n      DUP3 \t\t\twBTCReserve.getAssetPrice()\n      ADD \t\t\twBTCReserve.getAssetPrice()\n      AND \t\t\twBTCReserve.getAssetPrice()\n      DUP3 \t\t\twBTCReserve.getAssetPrice()\n      ADD \t\t\twBTCReserve.getAssetPrice()\n      DUP1 \t\t\twBTCReserve.getAssetPrice()\n      PUSH 40\t\t\twBTCReserve.getAssetPrice()\n      MSTORE \t\t\twBTCReserve.getAssetPrice()\n      POP \t\t\twBTCReserve.getAssetPrice()\n      DUP2 \t\t\twBTCReserve.getAssetPrice()\n      ADD \t\t\twBTCReserve.getAssetPrice()\n      SWAP1 \t\t\twBTCReserve.getAssetPrice()\n      PUSH [tag] 96\t\t\twBTCReserve.getAssetPrice()\n      SWAP2 \t\t\twBTCReserve.getAssetPrice()\n      SWAP1 \t\t\twBTCReserve.getAssetPrice()\n      PUSH [tag] 58\t\t\twBTCReserve.getAssetPrice()\n      JUMP \t\t\twBTCReserve.getAssetPrice()\n    tag 96\t\t\twBTCReserve.getAssetPrice()\n      JUMPDEST \t\t\twBTCReserve.getAssetPrice()\n      SWAP3 \t\t\t(uint256 wBTCPrice, uint256 _t...\n      POP \t\t\t(uint256 wBTCPrice, uint256 _t...\n      SWAP3 \t\t\t(uint256 wBTCPrice, uint256 _t...\n      POP \t\t\t(uint256 wBTCPrice, uint256 _t...\n      SWAP3 \t\t\t(uint256 wBTCPrice, uint256 _t...\n      POP \t\t\t(uint256 wBTCPrice, uint256 _t...\n      PUSH 0\t\t\tuint256 usdcPrice\n      PUSH 1\t\t\tusdcReserve\n      PUSH 0\t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      SLOAD \t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      PUSH 100\t\t\tusdcReserve\n      EXP \t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      DIV \t\t\tusdcReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve\n      AND \t\t\tusdcReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve.getAssetPrice\n      AND \t\t\tusdcReserve.getAssetPrice\n      PUSH E54F0880\t\t\tusdcReserve.getAssetPrice\n      PUSH 40\t\t\tusdcReserve.getAssetPrice()\n      MLOAD \t\t\tusdcReserve.getAssetPrice()\n      DUP2 \t\t\tusdcReserve.getAssetPrice()\n      PUSH FFFFFFFF\t\t\tusdcReserve.getAssetPrice()\n      AND \t\t\tusdcReserve.getAssetPrice()\n      PUSH E0\t\t\tusdcReserve.getAssetPrice()\n      SHL \t\t\tusdcReserve.getAssetPrice()\n      DUP2 \t\t\tusdcReserve.getAssetPrice()\n      MSTORE \t\t\tusdcReserve.getAssetPrice()\n      PUSH 4\t\t\tusdcReserve.getAssetPrice()\n      ADD \t\t\tusdcReserve.getAssetPrice()\n      PUSH 20\t\t\tusdcReserve.getAssetPrice()\n      PUSH 40\t\t\tusdcReserve.getAssetPrice()\n      MLOAD \t\t\tusdcReserve.getAssetPrice()\n      DUP1 \t\t\tusdcReserve.getAssetPrice()\n      DUP4 \t\t\tusdcReserve.getAssetPrice()\n      SUB \t\t\tusdcReserve.getAssetPrice()\n      DUP2 \t\t\tusdcReserve.getAssetPrice()\n      DUP7 \t\t\tusdcReserve.getAssetPrice()\n      GAS \t\t\tusdcReserve.getAssetPrice()\n      STATICCALL \t\t\tusdcReserve.getAssetPrice()\n      ISZERO \t\t\tusdcReserve.getAssetPrice()\n      DUP1 \t\t\tusdcReserve.getAssetPrice()\n      ISZERO \t\t\tusdcReserve.getAssetPrice()\n      PUSH [tag] 98\t\t\tusdcReserve.getAssetPrice()\n      JUMPI \t\t\tusdcReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\tusdcReserve.getAssetPrice()\n      PUSH 0\t\t\tusdcReserve.getAssetPrice()\n      DUP1 \t\t\tusdcReserve.getAssetPrice()\n      RETURNDATACOPY \t\t\tusdcReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\tusdcReserve.getAssetPrice()\n      PUSH 0\t\t\tusdcReserve.getAssetPrice()\n      REVERT \t\t\tusdcReserve.getAssetPrice()\n    tag 98\t\t\tusdcReserve.getAssetPrice()\n      JUMPDEST \t\t\tusdcReserve.getAssetPrice()\n      POP \t\t\tusdcReserve.getAssetPrice()\n      POP \t\t\tusdcReserve.getAssetPrice()\n      POP \t\t\tusdcReserve.getAssetPrice()\n      POP \t\t\tusdcReserve.getAssetPrice()\n      PUSH 40\t\t\tusdcReserve.getAssetPrice()\n      MLOAD \t\t\tusdcReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\tusdcReserve.getAssetPrice()\n      PUSH 1F\t\t\tusdcReserve.getAssetPrice()\n      NOT \t\t\tusdcReserve.getAssetPrice()\n      PUSH 1F\t\t\tusdcReserve.getAssetPrice()\n      DUP3 \t\t\tusdcReserve.getAssetPrice()\n      ADD \t\t\tusdcReserve.getAssetPrice()\n      AND \t\t\tusdcReserve.getAssetPrice()\n      DUP3 \t\t\tusdcReserve.getAssetPrice()\n      ADD \t\t\tusdcReserve.getAssetPrice()\n      DUP1 \t\t\tusdcReserve.getAssetPrice()\n      PUSH 40\t\t\tusdcReserve.getAssetPrice()\n      MSTORE \t\t\tusdcReserve.getAssetPrice()\n      POP \t\t\tusdcReserve.getAssetPrice()\n      DUP2 \t\t\tusdcReserve.getAssetPrice()\n      ADD \t\t\tusdcReserve.getAssetPrice()\n      SWAP1 \t\t\tusdcReserve.getAssetPrice()\n      PUSH [tag] 99\t\t\tusdcReserve.getAssetPrice()\n      SWAP2 \t\t\tusdcReserve.getAssetPrice()\n      SWAP1 \t\t\tusdcReserve.getAssetPrice()\n      PUSH [tag] 65\t\t\tusdcReserve.getAssetPrice()\n      JUMP \t\t\tusdcReserve.getAssetPrice()\n    tag 99\t\t\tusdcReserve.getAssetPrice()\n      JUMPDEST \t\t\tusdcReserve.getAssetPrice()\n      SWAP1 \t\t\tuint256 usdcPrice = usdcReserv...\n      POP \t\t\tuint256 usdcPrice = usdcReserv...\n      PUSH 0\t\t\tuint256[] memory prices\n      PUSH 2\t\t\t2\n      PUSH FFFFFFFFFFFFFFFF\t\t\tnew uint256[](2)\n      DUP2 \t\t\tnew uint256[](2)\n      GT \t\t\tnew uint256[](2)\n      ISZERO \t\t\tnew uint256[](2)\n      PUSH [tag] 100\t\t\tnew uint256[](2)\n      JUMPI \t\t\tnew uint256[](2)\n      PUSH [tag] 101\t\t\tnew uint256[](2)\n      PUSH [tag] 102\t\t\tnew uint256[](2)\n      JUMP \t\t\tnew uint256[](2)\n    tag 101\t\t\tnew uint256[](2)\n      JUMPDEST \t\t\tnew uint256[](2)\n    tag 100\t\t\tnew uint256[](2)\n      JUMPDEST \t\t\tnew uint256[](2)\n      PUSH 40\t\t\tnew uint256[](2)\n      MLOAD \t\t\tnew uint256[](2)\n      SWAP1 \t\t\tnew uint256[](2)\n      DUP1 \t\t\tnew uint256[](2)\n      DUP3 \t\t\tnew uint256[](2)\n      MSTORE \t\t\tnew uint256[](2)\n      DUP1 \t\t\tnew uint256[](2)\n      PUSH 20\t\t\tnew uint256[](2)\n      MUL \t\t\tnew uint256[](2)\n      PUSH 20\t\t\tnew uint256[](2)\n      ADD \t\t\tnew uint256[](2)\n      DUP3 \t\t\tnew uint256[](2)\n      ADD \t\t\tnew uint256[](2)\n      PUSH 40\t\t\tnew uint256[](2)\n      MSTORE \t\t\tnew uint256[](2)\n      DUP1 \t\t\tnew uint256[](2)\n      ISZERO \t\t\tnew uint256[](2)\n      PUSH [tag] 103\t\t\tnew uint256[](2)\n      JUMPI \t\t\tnew uint256[](2)\n      DUP2 \t\t\tnew uint256[](2)\n      PUSH 20\t\t\tnew uint256[](2)\n      ADD \t\t\tnew uint256[](2)\n      PUSH 20\t\t\tnew uint256[](2)\n      DUP3 \t\t\tnew uint256[](2)\n      MUL \t\t\tnew uint256[](2)\n      DUP1 \t\t\tnew uint256[](2)\n      CALLDATASIZE \t\t\tnew uint256[](2)\n      DUP4 \t\t\tnew uint256[](2)\n      CALLDATACOPY \t\t\tnew uint256[](2)\n      DUP1 \t\t\tnew uint256[](2)\n      DUP3 \t\t\tnew uint256[](2)\n      ADD \t\t\tnew uint256[](2)\n      SWAP2 \t\t\tnew uint256[](2)\n      POP \t\t\tnew uint256[](2)\n      POP \t\t\tnew uint256[](2)\n      SWAP1 \t\t\tnew uint256[](2)\n      POP \t\t\tnew uint256[](2)\n    tag 103\t\t\tnew uint256[](2)\n      JUMPDEST \t\t\tnew uint256[](2)\n      POP \t\t\tnew uint256[](2)\n      SWAP1 \t\t\tuint256[] memory prices = new ...\n      POP \t\t\tuint256[] memory prices = new ...\n      DUP5 \t\t\twBTCPrice\n      DUP2 \t\t\tprices\n      PUSH 0\t\t\t0\n      DUP2 \t\t\tprices[0]\n      MLOAD \t\t\tprices[0]\n      DUP2 \t\t\tprices[0]\n      LT \t\t\tprices[0]\n      PUSH [tag] 104\t\t\tprices[0]\n      JUMPI \t\t\tprices[0]\n      PUSH [tag] 105\t\t\tprices[0]\n      PUSH [tag] 106\t\t\tprices[0]\n      JUMP \t\t\tprices[0]\n    tag 105\t\t\tprices[0]\n      JUMPDEST \t\t\tprices[0]\n    tag 104\t\t\tprices[0]\n      JUMPDEST \t\t\tprices[0]\n      PUSH 20\t\t\tprices[0]\n      MUL \t\t\tprices[0]\n      PUSH 20\t\t\tprices[0]\n      ADD \t\t\tprices[0]\n      ADD \t\t\tprices[0]\n      DUP2 \t\t\tprices[0] = wBTCPrice\n      DUP2 \t\t\tprices[0] = wBTCPrice\n      MSTORE \t\t\tprices[0] = wBTCPrice\n      POP \t\t\tprices[0] = wBTCPrice\n      POP \t\t\tprices[0] = wBTCPrice\n      DUP2 \t\t\tusdcPrice\n      DUP2 \t\t\tprices\n      PUSH 1\t\t\t1\n      DUP2 \t\t\tprices[1]\n      MLOAD \t\t\tprices[1]\n      DUP2 \t\t\tprices[1]\n      LT \t\t\tprices[1]\n      PUSH [tag] 107\t\t\tprices[1]\n      JUMPI \t\t\tprices[1]\n      PUSH [tag] 108\t\t\tprices[1]\n      PUSH [tag] 106\t\t\tprices[1]\n      JUMP \t\t\tprices[1]\n    tag 108\t\t\tprices[1]\n      JUMPDEST \t\t\tprices[1]\n    tag 107\t\t\tprices[1]\n      JUMPDEST \t\t\tprices[1]\n      PUSH 20\t\t\tprices[1]\n      MUL \t\t\tprices[1]\n      PUSH 20\t\t\tprices[1]\n      ADD \t\t\tprices[1]\n      ADD \t\t\tprices[1]\n      DUP2 \t\t\tprices[1] = usdcPrice\n      DUP2 \t\t\tprices[1] = usdcPrice\n      MSTORE \t\t\tprices[1] = usdcPrice\n      POP \t\t\tprices[1] = usdcPrice\n      POP \t\t\tprices[1] = usdcPrice\n      DUP1 \t\t\tprices\n      SWAP6 \t\t\treturn prices\n      POP \t\t\treturn prices\n      POP \t\t\treturn prices\n      POP \t\t\treturn prices\n      POP \t\t\treturn prices\n      POP \t\t\treturn prices\n      POP \t\t\treturn prices\n      SWAP1 \t\t\tfunction getAssetsPrice() exte...\n      JUMP \t\t\tfunction getAssetsPrice() exte...\n    tag 37\t\t\tfunction getDebt(address user)...\n      JUMPDEST \t\t\tfunction getDebt(address user)...\n      PUSH 0\t\t\tuint256\n      DUP1 \t\t\tuint256 debt\n      PUSH 1\t\t\tusdcReserve\n      PUSH 0\t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      SLOAD \t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      PUSH 100\t\t\tusdcReserve\n      EXP \t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      DIV \t\t\tusdcReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve\n      AND \t\t\tusdcReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve.getAssetPrice\n      AND \t\t\tusdcReserve.getAssetPrice\n      PUSH E54F0880\t\t\tusdcReserve.getAssetPrice\n      PUSH 40\t\t\tusdcReserve.getAssetPrice()\n      MLOAD \t\t\tusdcReserve.getAssetPrice()\n      DUP2 \t\t\tusdcReserve.getAssetPrice()\n      PUSH FFFFFFFF\t\t\tusdcReserve.getAssetPrice()\n      AND \t\t\tusdcReserve.getAssetPrice()\n      PUSH E0\t\t\tusdcReserve.getAssetPrice()\n      SHL \t\t\tusdcReserve.getAssetPrice()\n      DUP2 \t\t\tusdcReserve.getAssetPrice()\n      MSTORE \t\t\tusdcReserve.getAssetPrice()\n      PUSH 4\t\t\tusdcReserve.getAssetPrice()\n      ADD \t\t\tusdcReserve.getAssetPrice()\n      PUSH 20\t\t\tusdcReserve.getAssetPrice()\n      PUSH 40\t\t\tusdcReserve.getAssetPrice()\n      MLOAD \t\t\tusdcReserve.getAssetPrice()\n      DUP1 \t\t\tusdcReserve.getAssetPrice()\n      DUP4 \t\t\tusdcReserve.getAssetPrice()\n      SUB \t\t\tusdcReserve.getAssetPrice()\n      DUP2 \t\t\tusdcReserve.getAssetPrice()\n      DUP7 \t\t\tusdcReserve.getAssetPrice()\n      GAS \t\t\tusdcReserve.getAssetPrice()\n      STATICCALL \t\t\tusdcReserve.getAssetPrice()\n      ISZERO \t\t\tusdcReserve.getAssetPrice()\n      DUP1 \t\t\tusdcReserve.getAssetPrice()\n      ISZERO \t\t\tusdcReserve.getAssetPrice()\n      PUSH [tag] 111\t\t\tusdcReserve.getAssetPrice()\n      JUMPI \t\t\tusdcReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\tusdcReserve.getAssetPrice()\n      PUSH 0\t\t\tusdcReserve.getAssetPrice()\n      DUP1 \t\t\tusdcReserve.getAssetPrice()\n      RETURNDATACOPY \t\t\tusdcReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\tusdcReserve.getAssetPrice()\n      PUSH 0\t\t\tusdcReserve.getAssetPrice()\n      REVERT \t\t\tusdcReserve.getAssetPrice()\n    tag 111\t\t\tusdcReserve.getAssetPrice()\n      JUMPDEST \t\t\tusdcReserve.getAssetPrice()\n      POP \t\t\tusdcReserve.getAssetPrice()\n      POP \t\t\tusdcReserve.getAssetPrice()\n      POP \t\t\tusdcReserve.getAssetPrice()\n      POP \t\t\tusdcReserve.getAssetPrice()\n      PUSH 40\t\t\tusdcReserve.getAssetPrice()\n      MLOAD \t\t\tusdcReserve.getAssetPrice()\n      RETURNDATASIZE \t\t\tusdcReserve.getAssetPrice()\n      PUSH 1F\t\t\tusdcReserve.getAssetPrice()\n      NOT \t\t\tusdcReserve.getAssetPrice()\n      PUSH 1F\t\t\tusdcReserve.getAssetPrice()\n      DUP3 \t\t\tusdcReserve.getAssetPrice()\n      ADD \t\t\tusdcReserve.getAssetPrice()\n      AND \t\t\tusdcReserve.getAssetPrice()\n      DUP3 \t\t\tusdcReserve.getAssetPrice()\n      ADD \t\t\tusdcReserve.getAssetPrice()\n      DUP1 \t\t\tusdcReserve.getAssetPrice()\n      PUSH 40\t\t\tusdcReserve.getAssetPrice()\n      MSTORE \t\t\tusdcReserve.getAssetPrice()\n      POP \t\t\tusdcReserve.getAssetPrice()\n      DUP2 \t\t\tusdcReserve.getAssetPrice()\n      ADD \t\t\tusdcReserve.getAssetPrice()\n      SWAP1 \t\t\tusdcReserve.getAssetPrice()\n      PUSH [tag] 112\t\t\tusdcReserve.getAssetPrice()\n      SWAP2 \t\t\tusdcReserve.getAssetPrice()\n      SWAP1 \t\t\tusdcReserve.getAssetPrice()\n      PUSH [tag] 65\t\t\tusdcReserve.getAssetPrice()\n      JUMP \t\t\tusdcReserve.getAssetPrice()\n    tag 112\t\t\tusdcReserve.getAssetPrice()\n      JUMPDEST \t\t\tusdcReserve.getAssetPrice()\n      PUSH 4\t\t\tborrowedUSDC\n      PUSH 0\t\t\tborrowedUSDC[user]\n      DUP6 \t\t\tuser\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tborrowedUSDC[user]\n      AND \t\t\tborrowedUSDC[user]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tborrowedUSDC[user]\n      AND \t\t\tborrowedUSDC[user]\n      DUP2 \t\t\tborrowedUSDC[user]\n      MSTORE \t\t\tborrowedUSDC[user]\n      PUSH 20\t\t\tborrowedUSDC[user]\n      ADD \t\t\tborrowedUSDC[user]\n      SWAP1 \t\t\tborrowedUSDC[user]\n      DUP2 \t\t\tborrowedUSDC[user]\n      MSTORE \t\t\tborrowedUSDC[user]\n      PUSH 20\t\t\tborrowedUSDC[user]\n      ADD \t\t\tborrowedUSDC[user]\n      PUSH 0\t\t\tborrowedUSDC[user]\n      KECCAK256 \t\t\tborrowedUSDC[user]\n      SLOAD \t\t\tborrowedUSDC[user]\n      PUSH [tag] 113\t\t\tborrowedUSDC[user] * usdcReser...\n      SWAP2 \t\t\tborrowedUSDC[user] * usdcReser...\n      SWAP1 \t\t\tborrowedUSDC[user] * usdcReser...\n      PUSH [tag] 67\t\t\tborrowedUSDC[user] * usdcReser...\n      JUMP \t\t\tborrowedUSDC[user] * usdcReser...\n    tag 113\t\t\tborrowedUSDC[user] * usdcReser...\n      JUMPDEST \t\t\tborrowedUSDC[user] * usdcReser...\n      SWAP1 \t\t\tuint256 debt = borrowedUSDC[us...\n      POP \t\t\tuint256 debt = borrowedUSDC[us...\n      DUP1 \t\t\tdebt\n      SWAP2 \t\t\treturn debt\n      POP \t\t\treturn debt\n      POP \t\t\treturn debt\n      SWAP2 \t\t\tfunction getDebt(address user)...\n      SWAP1 \t\t\tfunction getDebt(address user)...\n      POP \t\t\tfunction getDebt(address user)...\n      JUMP \t\t\tfunction getDebt(address user)...\n    tag 40\t\t\taddress public wBTC\n      JUMPDEST \t\t\taddress public wBTC\n      PUSH 2\t\t\taddress public wBTC\n      PUSH 0\t\t\taddress public wBTC\n      SWAP1 \t\t\taddress public wBTC\n      SLOAD \t\t\taddress public wBTC\n      SWAP1 \t\t\taddress public wBTC\n      PUSH 100\t\t\taddress public wBTC\n      EXP \t\t\taddress public wBTC\n      SWAP1 \t\t\taddress public wBTC\n      DIV \t\t\taddress public wBTC\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress public wBTC\n      AND \t\t\taddress public wBTC\n      DUP2 \t\t\taddress public wBTC\n      JUMP \t\t\taddress public wBTC\n    tag 44\t\t\tfunction getReserve(address to...\n      JUMPDEST \t\t\tfunction getReserve(address to...\n      PUSH 0\t\t\taddress reserveAddress\n      PUSH 2\t\t\twBTC\n      PUSH 0\t\t\twBTC\n      SWAP1 \t\t\twBTC\n      SLOAD \t\t\twBTC\n      SWAP1 \t\t\twBTC\n      PUSH 100\t\t\twBTC\n      EXP \t\t\twBTC\n      SWAP1 \t\t\twBTC\n      DIV \t\t\twBTC\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTC\n      AND \t\t\twBTC\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttoken == wBTC\n      AND \t\t\ttoken == wBTC\n      DUP3 \t\t\ttoken\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttoken == wBTC\n      AND \t\t\ttoken == wBTC\n      SUB \t\t\ttoken == wBTC\n      PUSH [tag] 115\t\t\tif (token == wBTC) {\\n        ...\n      JUMPI \t\t\tif (token == wBTC) {\\n        ...\n      PUSH 0\t\t\twBTCReserve\n      DUP1 \t\t\twBTCReserve\n      SLOAD \t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      PUSH 100\t\t\twBTCReserve\n      EXP \t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      DIV \t\t\twBTCReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve\n      AND \t\t\twBTCReserve\n      SWAP1 \t\t\treturn address(wBTCReserve)\n      POP \t\t\treturn address(wBTCReserve)\n      PUSH [tag] 114\t\t\treturn address(wBTCReserve)\n      JUMP \t\t\treturn address(wBTCReserve)\n    tag 115\t\t\tif (token == wBTC) {\\n        ...\n      JUMPDEST \t\t\tif (token == wBTC) {\\n        ...\n      PUSH 3\t\t\tusdc\n      PUSH 0\t\t\tusdc\n      SWAP1 \t\t\tusdc\n      SLOAD \t\t\tusdc\n      SWAP1 \t\t\tusdc\n      PUSH 100\t\t\tusdc\n      EXP \t\t\tusdc\n      SWAP1 \t\t\tusdc\n      DIV \t\t\tusdc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdc\n      AND \t\t\tusdc\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttoken == usdc\n      AND \t\t\ttoken == usdc\n      DUP3 \t\t\ttoken\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\ttoken == usdc\n      AND \t\t\ttoken == usdc\n      SUB \t\t\ttoken == usdc\n      PUSH [tag] 117\t\t\tif (token == usdc) {\\n        ...\n      JUMPI \t\t\tif (token == usdc) {\\n        ...\n      PUSH 1\t\t\tusdcReserve\n      PUSH 0\t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      SLOAD \t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      PUSH 100\t\t\tusdcReserve\n      EXP \t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      DIV \t\t\tusdcReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve\n      AND \t\t\tusdcReserve\n      SWAP1 \t\t\treturn address(usdcReserve)\n      POP \t\t\treturn address(usdcReserve)\n      PUSH [tag] 114\t\t\treturn address(usdcReserve)\n      JUMP \t\t\treturn address(usdcReserve)\n    tag 117\t\t\tif (token == usdc) {\\n        ...\n      JUMPDEST \t\t\tif (token == usdc) {\\n        ...\n    tag 114\t\t\tfunction getReserve(address to...\n      JUMPDEST \t\t\tfunction getReserve(address to...\n      SWAP2 \t\t\tfunction getReserve(address to...\n      SWAP1 \t\t\tfunction getReserve(address to...\n      POP \t\t\tfunction getReserve(address to...\n      JUMP \t\t\tfunction getReserve(address to...\n    tag 48\t\t\tfunction getSupplyedBalances(a...\n      JUMPDEST \t\t\tfunction getSupplyedBalances(a...\n      PUSH 60\t\t\tuint256[] memory\n      PUSH 0\t\t\tuint256[] memory balances\n      PUSH 2\t\t\t2\n      PUSH FFFFFFFFFFFFFFFF\t\t\tnew uint256[](2)\n      DUP2 \t\t\tnew uint256[](2)\n      GT \t\t\tnew uint256[](2)\n      ISZERO \t\t\tnew uint256[](2)\n      PUSH [tag] 119\t\t\tnew uint256[](2)\n      JUMPI \t\t\tnew uint256[](2)\n      PUSH [tag] 120\t\t\tnew uint256[](2)\n      PUSH [tag] 102\t\t\tnew uint256[](2)\n      JUMP \t\t\tnew uint256[](2)\n    tag 120\t\t\tnew uint256[](2)\n      JUMPDEST \t\t\tnew uint256[](2)\n    tag 119\t\t\tnew uint256[](2)\n      JUMPDEST \t\t\tnew uint256[](2)\n      PUSH 40\t\t\tnew uint256[](2)\n      MLOAD \t\t\tnew uint256[](2)\n      SWAP1 \t\t\tnew uint256[](2)\n      DUP1 \t\t\tnew uint256[](2)\n      DUP3 \t\t\tnew uint256[](2)\n      MSTORE \t\t\tnew uint256[](2)\n      DUP1 \t\t\tnew uint256[](2)\n      PUSH 20\t\t\tnew uint256[](2)\n      MUL \t\t\tnew uint256[](2)\n      PUSH 20\t\t\tnew uint256[](2)\n      ADD \t\t\tnew uint256[](2)\n      DUP3 \t\t\tnew uint256[](2)\n      ADD \t\t\tnew uint256[](2)\n      PUSH 40\t\t\tnew uint256[](2)\n      MSTORE \t\t\tnew uint256[](2)\n      DUP1 \t\t\tnew uint256[](2)\n      ISZERO \t\t\tnew uint256[](2)\n      PUSH [tag] 121\t\t\tnew uint256[](2)\n      JUMPI \t\t\tnew uint256[](2)\n      DUP2 \t\t\tnew uint256[](2)\n      PUSH 20\t\t\tnew uint256[](2)\n      ADD \t\t\tnew uint256[](2)\n      PUSH 20\t\t\tnew uint256[](2)\n      DUP3 \t\t\tnew uint256[](2)\n      MUL \t\t\tnew uint256[](2)\n      DUP1 \t\t\tnew uint256[](2)\n      CALLDATASIZE \t\t\tnew uint256[](2)\n      DUP4 \t\t\tnew uint256[](2)\n      CALLDATACOPY \t\t\tnew uint256[](2)\n      DUP1 \t\t\tnew uint256[](2)\n      DUP3 \t\t\tnew uint256[](2)\n      ADD \t\t\tnew uint256[](2)\n      SWAP2 \t\t\tnew uint256[](2)\n      POP \t\t\tnew uint256[](2)\n      POP \t\t\tnew uint256[](2)\n      SWAP1 \t\t\tnew uint256[](2)\n      POP \t\t\tnew uint256[](2)\n    tag 121\t\t\tnew uint256[](2)\n      JUMPDEST \t\t\tnew uint256[](2)\n      POP \t\t\tnew uint256[](2)\n      SWAP1 \t\t\tuint256[] memory balances = ne...\n      POP \t\t\tuint256[] memory balances = ne...\n      PUSH 0\t\t\twBTCReserve\n      DUP1 \t\t\twBTCReserve\n      SLOAD \t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      PUSH 100\t\t\twBTCReserve\n      EXP \t\t\twBTCReserve\n      SWAP1 \t\t\twBTCReserve\n      DIV \t\t\twBTCReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve\n      AND \t\t\twBTCReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTCReserve.getSupplyedAmount\n      AND \t\t\twBTCReserve.getSupplyedAmount\n      PUSH AC75409A\t\t\twBTCReserve.getSupplyedAmount\n      DUP5 \t\t\tuser\n      PUSH 40\t\t\twBTCReserve.getSupplyedAmount(...\n      MLOAD \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP3 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH FFFFFFFF\t\t\twBTCReserve.getSupplyedAmount(...\n      AND \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH E0\t\t\twBTCReserve.getSupplyedAmount(...\n      SHL \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      MSTORE \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 4\t\t\twBTCReserve.getSupplyedAmount(...\n      ADD \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 122\t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 17\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMP \t\t\twBTCReserve.getSupplyedAmount(...\n    tag 122\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 20\t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 40\t\t\twBTCReserve.getSupplyedAmount(...\n      MLOAD \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP4 \t\t\twBTCReserve.getSupplyedAmount(...\n      SUB \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP7 \t\t\twBTCReserve.getSupplyedAmount(...\n      GAS \t\t\twBTCReserve.getSupplyedAmount(...\n      STATICCALL \t\t\twBTCReserve.getSupplyedAmount(...\n      ISZERO \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      ISZERO \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 124\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMPI \t\t\twBTCReserve.getSupplyedAmount(...\n      RETURNDATASIZE \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 0\t\t\twBTCReserve.getSupplyedAmount(...\n      DUP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      RETURNDATACOPY \t\t\twBTCReserve.getSupplyedAmount(...\n      RETURNDATASIZE \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 0\t\t\twBTCReserve.getSupplyedAmount(...\n      REVERT \t\t\twBTCReserve.getSupplyedAmount(...\n    tag 124\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\twBTCReserve.getSupplyedAmount(...\n      POP \t\t\twBTCReserve.getSupplyedAmount(...\n      POP \t\t\twBTCReserve.getSupplyedAmount(...\n      POP \t\t\twBTCReserve.getSupplyedAmount(...\n      POP \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 40\t\t\twBTCReserve.getSupplyedAmount(...\n      MLOAD \t\t\twBTCReserve.getSupplyedAmount(...\n      RETURNDATASIZE \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 1F\t\t\twBTCReserve.getSupplyedAmount(...\n      NOT \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 1F\t\t\twBTCReserve.getSupplyedAmount(...\n      DUP3 \t\t\twBTCReserve.getSupplyedAmount(...\n      ADD \t\t\twBTCReserve.getSupplyedAmount(...\n      AND \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP3 \t\t\twBTCReserve.getSupplyedAmount(...\n      ADD \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH 40\t\t\twBTCReserve.getSupplyedAmount(...\n      MSTORE \t\t\twBTCReserve.getSupplyedAmount(...\n      POP \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      ADD \t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 125\t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP2 \t\t\twBTCReserve.getSupplyedAmount(...\n      SWAP1 \t\t\twBTCReserve.getSupplyedAmount(...\n      PUSH [tag] 65\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMP \t\t\twBTCReserve.getSupplyedAmount(...\n    tag 125\t\t\twBTCReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\twBTCReserve.getSupplyedAmount(...\n      DUP2 \t\t\tbalances\n      PUSH 0\t\t\t0\n      DUP2 \t\t\tbalances[0]\n      MLOAD \t\t\tbalances[0]\n      DUP2 \t\t\tbalances[0]\n      LT \t\t\tbalances[0]\n      PUSH [tag] 126\t\t\tbalances[0]\n      JUMPI \t\t\tbalances[0]\n      PUSH [tag] 127\t\t\tbalances[0]\n      PUSH [tag] 106\t\t\tbalances[0]\n      JUMP \t\t\tbalances[0]\n    tag 127\t\t\tbalances[0]\n      JUMPDEST \t\t\tbalances[0]\n    tag 126\t\t\tbalances[0]\n      JUMPDEST \t\t\tbalances[0]\n      PUSH 20\t\t\tbalances[0]\n      MUL \t\t\tbalances[0]\n      PUSH 20\t\t\tbalances[0]\n      ADD \t\t\tbalances[0]\n      ADD \t\t\tbalances[0]\n      DUP2 \t\t\tbalances[0] = wBTCReserve.getS...\n      DUP2 \t\t\tbalances[0] = wBTCReserve.getS...\n      MSTORE \t\t\tbalances[0] = wBTCReserve.getS...\n      POP \t\t\tbalances[0] = wBTCReserve.getS...\n      POP \t\t\tbalances[0] = wBTCReserve.getS...\n      PUSH 1\t\t\tusdcReserve\n      PUSH 0\t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      SLOAD \t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      PUSH 100\t\t\tusdcReserve\n      EXP \t\t\tusdcReserve\n      SWAP1 \t\t\tusdcReserve\n      DIV \t\t\tusdcReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve\n      AND \t\t\tusdcReserve\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tusdcReserve.getSupplyedAmount\n      AND \t\t\tusdcReserve.getSupplyedAmount\n      PUSH AC75409A\t\t\tusdcReserve.getSupplyedAmount\n      DUP5 \t\t\tuser\n      PUSH 40\t\t\tusdcReserve.getSupplyedAmount(...\n      MLOAD \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP3 \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH FFFFFFFF\t\t\tusdcReserve.getSupplyedAmount(...\n      AND \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH E0\t\t\tusdcReserve.getSupplyedAmount(...\n      SHL \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP2 \t\t\tusdcReserve.getSupplyedAmount(...\n      MSTORE \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH 4\t\t\tusdcReserve.getSupplyedAmount(...\n      ADD \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH [tag] 128\t\t\tusdcReserve.getSupplyedAmount(...\n      SWAP2 \t\t\tusdcReserve.getSupplyedAmount(...\n      SWAP1 \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH [tag] 17\t\t\tusdcReserve.getSupplyedAmount(...\n      JUMP \t\t\tusdcReserve.getSupplyedAmount(...\n    tag 128\t\t\tusdcReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH 20\t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH 40\t\t\tusdcReserve.getSupplyedAmount(...\n      MLOAD \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP1 \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP4 \t\t\tusdcReserve.getSupplyedAmount(...\n      SUB \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP2 \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP7 \t\t\tusdcReserve.getSupplyedAmount(...\n      GAS \t\t\tusdcReserve.getSupplyedAmount(...\n      STATICCALL \t\t\tusdcReserve.getSupplyedAmount(...\n      ISZERO \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP1 \t\t\tusdcReserve.getSupplyedAmount(...\n      ISZERO \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH [tag] 130\t\t\tusdcReserve.getSupplyedAmount(...\n      JUMPI \t\t\tusdcReserve.getSupplyedAmount(...\n      RETURNDATASIZE \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH 0\t\t\tusdcReserve.getSupplyedAmount(...\n      DUP1 \t\t\tusdcReserve.getSupplyedAmount(...\n      RETURNDATACOPY \t\t\tusdcReserve.getSupplyedAmount(...\n      RETURNDATASIZE \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH 0\t\t\tusdcReserve.getSupplyedAmount(...\n      REVERT \t\t\tusdcReserve.getSupplyedAmount(...\n    tag 130\t\t\tusdcReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\tusdcReserve.getSupplyedAmount(...\n      POP \t\t\tusdcReserve.getSupplyedAmount(...\n      POP \t\t\tusdcReserve.getSupplyedAmount(...\n      POP \t\t\tusdcReserve.getSupplyedAmount(...\n      POP \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH 40\t\t\tusdcReserve.getSupplyedAmount(...\n      MLOAD \t\t\tusdcReserve.getSupplyedAmount(...\n      RETURNDATASIZE \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH 1F\t\t\tusdcReserve.getSupplyedAmount(...\n      NOT \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH 1F\t\t\tusdcReserve.getSupplyedAmount(...\n      DUP3 \t\t\tusdcReserve.getSupplyedAmount(...\n      ADD \t\t\tusdcReserve.getSupplyedAmount(...\n      AND \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP3 \t\t\tusdcReserve.getSupplyedAmount(...\n      ADD \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP1 \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH 40\t\t\tusdcReserve.getSupplyedAmount(...\n      MSTORE \t\t\tusdcReserve.getSupplyedAmount(...\n      POP \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP2 \t\t\tusdcReserve.getSupplyedAmount(...\n      ADD \t\t\tusdcReserve.getSupplyedAmount(...\n      SWAP1 \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH [tag] 131\t\t\tusdcReserve.getSupplyedAmount(...\n      SWAP2 \t\t\tusdcReserve.getSupplyedAmount(...\n      SWAP1 \t\t\tusdcReserve.getSupplyedAmount(...\n      PUSH [tag] 65\t\t\tusdcReserve.getSupplyedAmount(...\n      JUMP \t\t\tusdcReserve.getSupplyedAmount(...\n    tag 131\t\t\tusdcReserve.getSupplyedAmount(...\n      JUMPDEST \t\t\tusdcReserve.getSupplyedAmount(...\n      DUP2 \t\t\tbalances\n      PUSH 1\t\t\t1\n      DUP2 \t\t\tbalances[1]\n      MLOAD \t\t\tbalances[1]\n      DUP2 \t\t\tbalances[1]\n      LT \t\t\tbalances[1]\n      PUSH [tag] 132\t\t\tbalances[1]\n      JUMPI \t\t\tbalances[1]\n      PUSH [tag] 133\t\t\tbalances[1]\n      PUSH [tag] 106\t\t\tbalances[1]\n      JUMP \t\t\tbalances[1]\n    tag 133\t\t\tbalances[1]\n      JUMPDEST \t\t\tbalances[1]\n    tag 132\t\t\tbalances[1]\n      JUMPDEST \t\t\tbalances[1]\n      PUSH 20\t\t\tbalances[1]\n      MUL \t\t\tbalances[1]\n      PUSH 20\t\t\tbalances[1]\n      ADD \t\t\tbalances[1]\n      ADD \t\t\tbalances[1]\n      DUP2 \t\t\tbalances[1] = usdcReserve.getS...\n      DUP2 \t\t\tbalances[1] = usdcReserve.getS...\n      MSTORE \t\t\tbalances[1] = usdcReserve.getS...\n      POP \t\t\tbalances[1] = usdcReserve.getS...\n      POP \t\t\tbalances[1] = usdcReserve.getS...\n      DUP1 \t\t\tbalances\n      SWAP2 \t\t\treturn balances\n      POP \t\t\treturn balances\n      POP \t\t\treturn balances\n      SWAP2 \t\t\tfunction getSupplyedBalances(a...\n      SWAP1 \t\t\tfunction getSupplyedBalances(a...\n      POP \t\t\tfunction getSupplyedBalances(a...\n      JUMP \t\t\tfunction getSupplyedBalances(a...\n    tag 51\t\t\tfunction getwBTC() public view...\n      JUMPDEST \t\t\tfunction getwBTC() public view...\n      PUSH 0\t\t\taddress\n      PUSH 2\t\t\twBTC\n      PUSH 0\t\t\twBTC\n      SWAP1 \t\t\twBTC\n      SLOAD \t\t\twBTC\n      SWAP1 \t\t\twBTC\n      PUSH 100\t\t\twBTC\n      EXP \t\t\twBTC\n      SWAP1 \t\t\twBTC\n      DIV \t\t\twBTC\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twBTC\n      AND \t\t\twBTC\n      SWAP1 \t\t\treturn address(wBTC)\n      POP \t\t\treturn address(wBTC)\n      SWAP1 \t\t\tfunction getwBTC() public view...\n      JUMP \t\t\tfunction getwBTC() public view...\n    tag 135\t\t\t-License-Identifier: MIT\\nprag...\n      JUMPDEST \t\t\t-License-Identifier: MIT\\nprag...\n      PUSH 0\t\t\tity ^0.\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\timport \"./USDCReserve.sol\";\\n\\...\n      DUP3 \t\t\t.sol\"\n      AND \t\t\terve.sol\";\\nimport \"./USDCRese...\n      SWAP1 \t\t\t \"./WBTCReserve.sol\";\\nimport ...\n      POP \t\t\t \"./WBTCReserve.sol\";\\nimport ...\n      SWAP2 \t\t\t-License-Identifier: MIT\\nprag...\n      SWAP1 \t\t\t-License-Identifier: MIT\\nprag...\n      POP \t\t\t-License-Identifier: MIT\\nprag...\n      JUMP \t\t\t-License-Identifier: MIT\\nprag...\n    tag 136\t\t\t WBTCReserve wBTCReserve;\\n   ...\n      JUMPDEST \t\t\t WBTCReserve wBTCReserve;\\n   ...\n      PUSH 0\t\t\terve us\n      PUSH [tag] 166\t\t\t public wBTC;\\n    addres\n      DUP3 \t\t\taddre\n      PUSH [tag] 135\t\t\t public wBTC;\\n    addres\n      JUMP \t\t\t public wBTC;\\n    addres\n    tag 166\t\t\t public wBTC;\\n    addres\n      JUMPDEST \t\t\t public wBTC;\\n    addres\n      SWAP1 \t\t\t    address public wBTC;\\n    ...\n      POP \t\t\t    address public wBTC;\\n    ...\n      SWAP2 \t\t\t WBTCReserve wBTCReserve;\\n   ...\n      SWAP1 \t\t\t WBTCReserve wBTCReserve;\\n   ...\n      POP \t\t\t WBTCReserve wBTCReserve;\\n   ...\n      JUMP \t\t\t WBTCReserve wBTCReserve;\\n   ...\n    tag 137\t\t\tc;\\n    mapping(address => uin...\n      JUMPDEST \t\t\tc;\\n    mapping(address => uin...\n      PUSH [tag] 168\t\t\tnstructor(WBTCReserve _w\n      DUP2 \t\t\trve _\n      PUSH [tag] 136\t\t\tnstructor(WBTCReserve _w\n      JUMP \t\t\tnstructor(WBTCReserve _w\n    tag 168\t\t\tnstructor(WBTCReserve _w\n      JUMPDEST \t\t\tnstructor(WBTCReserve _w\n      DUP3 \t\t\t   \n      MSTORE \t\t\t80);\\n\\n    constructor(WBTCRe...\n      POP \t\t\tc;\\n    mapping(address => uin...\n      POP \t\t\tc;\\n    mapping(address => uin...\n      JUMP \t\t\tc;\\n    mapping(address => uin...\n    tag 17\t\t\tSDCReserve _usdcReserve, addre...\n      JUMPDEST \t\t\tSDCReserve _usdcReserve, addre...\n      PUSH 0\t\t\t _us\n      PUSH 20\t\t\ter\n      DUP3 \t\t\t = _wBTCR\n      ADD \t\t\terve = _wBTCReserv\n      SWAP1 \t\t\t wBTCReserve = _wBTCReserv\n      POP \t\t\t wBTCReserve = _wBTCReserv\n      PUSH [tag] 170\t\t\t usdcReserve = _usdcReserve;\\n...\n      PUSH 0\t\t\tt\n      DUP4 \t\t\tve(addres\n      ADD \t\t\teserve(address to\n      DUP5 \t\t\ttion g\n      PUSH [tag] 137\t\t\t usdcReserve = _usdcReserve;\\n...\n      JUMP \t\t\t usdcReserve = _usdcReserve;\\n...\n    tag 170\t\t\t usdcReserve = _usdcReserve;\\n...\n      JUMPDEST \t\t\t usdcReserve = _usdcReserve;\\n...\n      SWAP3 \t\t\tSDCReserve _usdcReserve, addre...\n      SWAP2 \t\t\tSDCReserve _usdcReserve, addre...\n      POP \t\t\tSDCReserve _usdcReserve, addre...\n      POP \t\t\tSDCReserve _usdcReserve, addre...\n      JUMP \t\t\tSDCReserve _usdcReserve, addre...\n    tag 139\t\t\tturn address(wBTCReserve);\\n  ...\n      JUMPDEST \t\t\tturn address(wBTCReserve);\\n  ...\n      PUSH 0\t\t\t \n      DUP1 \t\t\t \n      REVERT \t\t\tve);\\n       \n    tag 141\t\t\t returns (address){\\n        r...\n      JUMPDEST \t\t\t returns (address){\\n        r...\n      PUSH [tag] 175\t\t\tAssetsPrice() external v\n      DUP2 \t\t\trnal \n      PUSH [tag] 136\t\t\tAssetsPrice() external v\n      JUMP \t\t\tAssetsPrice() external v\n    tag 175\t\t\tAssetsPrice() external v\n      JUMPDEST \t\t\tAssetsPrice() external v\n      DUP2 \t\t\tion g\n      EQ \t\t\tnction getAssetsPrice() extern...\n      PUSH [tag] 176\t\t\t }\\n\\n    function getAssetsPr...\n      JUMPI \t\t\t }\\n\\n    function getAssetsPr...\n      PUSH 0\t\t\tn\n      DUP1 \t\t\t(\n      REVERT \t\t\teturns (uint\n    tag 176\t\t\t }\\n\\n    function getAssetsPr...\n      JUMPDEST \t\t\t }\\n\\n    function getAssetsPr...\n      POP \t\t\t returns (address){\\n        r...\n      JUMP \t\t\t returns (address){\\n        r...\n    tag 142\t\t\t{\\n        (uint256 wBTCPrice,...\n      JUMPDEST \t\t\t{\\n        (uint256 wBTCPrice,...\n      PUSH 0\t\t\tmp, u\n      DUP2 \t\t\tetAsse\n      CALLDATALOAD \t\t\twBTCReserve.getAsset\n      SWAP1 \t\t\timals) = wBTCReserve.getAsset\n      POP \t\t\timals) = wBTCReserve.getAsset\n      PUSH [tag] 178\t\t\t        uint256 usdcPrice = us...\n      DUP2 \t\t\t usdc\n      PUSH [tag] 141\t\t\t        uint256 usdcPrice = us...\n      JUMP \t\t\t        uint256 usdcPrice = us...\n    tag 178\t\t\t        uint256 usdcPrice = us...\n      JUMPDEST \t\t\t        uint256 usdcPrice = us...\n      SWAP3 \t\t\t{\\n        (uint256 wBTCPrice,...\n      SWAP2 \t\t\t{\\n        (uint256 wBTCPrice,...\n      POP \t\t\t{\\n        (uint256 wBTCPrice,...\n      POP \t\t\t{\\n        (uint256 wBTCPrice,...\n      JUMP \t\t\t{\\n        (uint256 wBTCPrice,...\n    tag 20\t\t\tsetPrice();\\n        uint256[]...\n      JUMPDEST \t\t\tsetPrice();\\n        uint256[]...\n      PUSH 0\t\t\t(2);\\n \n      PUSH 20\t\t\ts[\n      DUP3 \t\t\t       pr\n      DUP5 \t\t\tCPrice;\n      SUB \t\t\t wBTCPrice;\\n        pri\n      SLT \t\t\t0] = wBTCPrice;\\n        price...\n      ISZERO \t\t\tes[0] = wBTCPrice;\\n        pr...\n      PUSH [tag] 180\t\t\tes[0] = wBTCPrice;\\n        pr...\n      JUMPI \t\t\tes[0] = wBTCPrice;\\n        pr...\n      PUSH [tag] 181\t\t\t usdcPrice;\\n        return pr...\n      PUSH [tag] 139\t\t\t usdcPrice;\\n        return pr...\n      JUMP \t\t\t usdcPrice;\\n        return pr...\n    tag 181\t\t\t usdcPrice;\\n        return pr...\n      JUMPDEST \t\t\t usdcPrice;\\n        return pr...\n    tag 180\t\t\tes[0] = wBTCPrice;\\n        pr...\n      JUMPDEST \t\t\tes[0] = wBTCPrice;\\n        pr...\n      PUSH 0\t\t\t[\n      PUSH [tag] 182\t\t\t256[] memory balances = new ui...\n      DUP5 \t\t\t     ba\n      DUP3 \t\t\t](2);\\n\n      DUP6 \t\t\tew uint25\n      ADD \t\t\t = new uint256[](2);\\n \n      PUSH [tag] 142\t\t\t256[] memory balances = new ui...\n      JUMP \t\t\t256[] memory balances = new ui...\n    tag 182\t\t\t256[] memory balances = new ui...\n      JUMPDEST \t\t\t256[] memory balances = new ui...\n      SWAP2 \t\t\t      uint256[] memory balance...\n      POP \t\t\t      uint256[] memory balance...\n      POP \t\t\txternal view returns (uint256[...\n      SWAP3 \t\t\tsetPrice();\\n        uint256[]...\n      SWAP2 \t\t\tsetPrice();\\n        uint256[]...\n      POP \t\t\tsetPrice();\\n        uint256[]...\n      POP \t\t\tsetPrice();\\n        uint256[]...\n      JUMP \t\t\tsetPrice();\\n        uint256[]...\n    tag 143\t\t\tgetSupplyedAmount(user);\\n    ...\n      JUMPDEST \t\t\tgetSupplyedAmount(user);\\n    ...\n      PUSH 0\t\t\tnces[1]\n      DUP2 \t\t\tlyedA\n      SWAP1 \t\t\trve.getSupplyedA\n      POP \t\t\trve.getSupplyedA\n      SWAP2 \t\t\tgetSupplyedAmount(user);\\n    ...\n      SWAP1 \t\t\tgetSupplyedAmount(user);\\n    ...\n      POP \t\t\tgetSupplyedAmount(user);\\n    ...\n      JUMP \t\t\tgetSupplyedAmount(user);\\n    ...\n    tag 144\t\t\t\\n        return balances;\\n  ...\n      JUMPDEST \t\t\t\\n        return balances;\\n  ...\n      PUSH [tag] 185\t\t\ternal {\\n        require(\n      DUP2 \t\t\tquire\n      PUSH [tag] 143\t\t\ternal {\\n        require(\n      JUMP \t\t\ternal {\\n        require(\n    tag 185\t\t\ternal {\\n        require(\n      JUMPDEST \t\t\ternal {\\n        require(\n      DUP3 \t\t\t) e\n      MSTORE \t\t\t amount) external {\\n        r...\n      POP \t\t\t\\n        return balances;\\n  ...\n      POP \t\t\t\\n        return balances;\\n  ...\n      JUMP \t\t\t\\n        return balances;\\n  ...\n    tag 23\t\t\t);\\n        uint256 collateral...\n      JUMPDEST \t\t\t);\\n        uint256 collateral...\n      PUSH 0\t\t\tueBo\n      PUSH 20\t\t\t 1\n      DUP3 \t\t\t* wBTCLTV\n      ADD \t\t\tlue * wBTCLTV / 10\n      SWAP1 \t\t\tateralValue * wBTCLTV / 10\n      POP \t\t\tateralValue * wBTCLTV / 10\n      PUSH [tag] 187\t\t\t uint256 currentBorrowed = thi...\n      PUSH 0\t\t\t(\n      DUP4 \t\t\t    requi\n      ADD \t\t\t        require((\n      DUP5 \t\t\tsender\n      PUSH [tag] 144\t\t\t uint256 currentBorrowed = thi...\n      JUMP \t\t\t uint256 currentBorrowed = thi...\n    tag 187\t\t\t uint256 currentBorrowed = thi...\n      JUMPDEST \t\t\t uint256 currentBorrowed = thi...\n      SWAP3 \t\t\t);\\n        uint256 collateral...\n      SWAP2 \t\t\t);\\n        uint256 collateral...\n      POP \t\t\t);\\n        uint256 collateral...\n      POP \t\t\t);\\n        uint256 collateral...\n      JUMP \t\t\t);\\n        uint256 collateral...\n    tag 145\t\t\td + amount) < maxValueBorred, ...\n      JUMPDEST \t\t\td + amount) < maxValueBorred, ...\n      PUSH [tag] 189\t\t\t;\\n        borrowedUSDC[m\n      DUP2 \t\t\tUSDC[\n      PUSH [tag] 143\t\t\t;\\n        borrowedUSDC[m\n      JUMP \t\t\t;\\n        borrowedUSDC[m\n    tag 189\t\t\t;\\n        borrowedUSDC[m\n      JUMPDEST \t\t\t;\\n        borrowedUSDC[m\n      DUP2 \t\t\tlowed\n      EQ \t\t\t allowed\");\\n        borrowedU...\n      PUSH [tag] 190\t\t\tvalue than allowed\");\\n       ...\n      JUMPI \t\t\tvalue than allowed\");\\n       ...\n      PUSH 0\t\t\tm\n      DUP1 \t\t\t=\n      REVERT \t\t\tnder] += amo\n    tag 190\t\t\tvalue than allowed\");\\n       ...\n      JUMPDEST \t\t\tvalue than allowed\");\\n       ...\n      POP \t\t\td + amount) < maxValueBorred, ...\n      JUMP \t\t\td + amount) < maxValueBorred, ...\n    tag 146\t\t\tsdcReserve.executeTransaction(...\n      JUMPDEST \t\t\tsdcReserve.executeTransaction(...\n      PUSH 0\t\t\tnt);\\n\n      DUP2 \t\t\tss use\n      CALLDATALOAD \t\t\tgetDebt(address user\n      SWAP1 \t\t\tfunction getDebt(address user\n      POP \t\t\tfunction getDebt(address user\n      PUSH [tag] 192\t\t\tl view returns (uint256){\\n   ...\n      DUP2 \t\t\t     \n      PUSH [tag] 145\t\t\tl view returns (uint256){\\n   ...\n      JUMP \t\t\tl view returns (uint256){\\n   ...\n    tag 192\t\t\tl view returns (uint256){\\n   ...\n      JUMPDEST \t\t\tl view returns (uint256){\\n   ...\n      SWAP3 \t\t\tsdcReserve.executeTransaction(...\n      SWAP2 \t\t\tsdcReserve.executeTransaction(...\n      POP \t\t\tsdcReserve.executeTransaction(...\n      POP \t\t\tsdcReserve.executeTransaction(...\n      JUMP \t\t\tsdcReserve.executeTransaction(...\n    tag 29\t\t\tt = borrowedUSDC[user] * usdcR...\n      JUMPDEST \t\t\tt = borrowedUSDC[user] * usdcR...\n      PUSH 0\t\t\t debt;\n      DUP1 \t\t\t   }\\n\\n\n      PUSH 40\t\t\tex\n      DUP4 \t\t\tdress use\n      DUP6 \t\t\ttValue(\n      SUB \t\t\tpositValue(address user\n      SLT \t\t\tetDepositValue(address user) e...\n      ISZERO \t\t\tn getDepositValue(address user...\n      PUSH [tag] 194\t\t\tn getDepositValue(address user...\n      JUMPI \t\t\tn getDepositValue(address user...\n      PUSH [tag] 195\t\t\tal view returns (uint256){\\n  ...\n      PUSH [tag] 139\t\t\tal view returns (uint256){\\n  ...\n      JUMP \t\t\tal view returns (uint256){\\n  ...\n    tag 195\t\t\tal view returns (uint256){\\n  ...\n      JUMPDEST \t\t\tal view returns (uint256){\\n  ...\n    tag 194\t\t\tn getDepositValue(address user...\n      JUMPDEST \t\t\tn getDepositValue(address user...\n      PUSH 0\t\t\te\n      PUSH [tag] 196\t\t\tatValue = wBTCReserve.getSuppl...\n      DUP6 \t\t\t * wBTC\n      DUP3 \t\t\tunt(us\n      DUP7 \t\t\tSupplyedA\n      ADD \t\t\t.getSupplyedAmount(use\n      PUSH [tag] 142\t\t\tatValue = wBTCReserve.getSuppl...\n      JUMP \t\t\tatValue = wBTCReserve.getSuppl...\n    tag 196\t\t\tatValue = wBTCReserve.getSuppl...\n      JUMPDEST \t\t\tatValue = wBTCReserve.getSuppl...\n      SWAP3 \t\t\tnt256 collatValue = wBTCReserv...\n      POP \t\t\tnt256 collatValue = wBTCReserv...\n      POP \t\t\ts) = wBTCReserve.getAssetPrice...\n      PUSH 20\t\t\tlu\n      PUSH [tag] 197\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 146\t\t\t\n      JUMP \t\t\t\n    tag 197\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t    \\n\\n}\\n\n      POP \t\t\t    \\n\\n}\\n\n      POP \t\t\tals);\\n        return collatVa...\n      SWAP3 \t\t\tt = borrowedUSDC[user] * usdcR...\n      POP \t\t\tt = borrowedUSDC[user] * usdcR...\n      SWAP3 \t\t\tt = borrowedUSDC[user] * usdcR...\n      SWAP1 \t\t\tt = borrowedUSDC[user] * usdcR...\n      POP \t\t\tt = borrowedUSDC[user] * usdcR...\n      JUMP \t\t\tt = borrowedUSDC[user] * usdcR...\n    tag 147\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 148\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 149\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 150\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 202\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 202\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 151\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 150\t\t\t\n      JUMP \t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 152\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 153\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 207\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 147\t\t\t\n      JUMP \t\t\t\n    tag 207\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 208\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 148\t\t\t\n      JUMP \t\t\t\n    tag 208\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 209\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 149\t\t\t\n      JUMP \t\t\t\n    tag 209\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n    tag 210\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 212\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 213\t\t\t\n      DUP9 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 151\t\t\t\n      JUMP \t\t\t\n    tag 213\t\t\t\n      JUMPDEST \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 214\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 152\t\t\t\n      JUMP \t\t\t\n    tag 214\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 210\t\t\t\n      JUMP \t\t\t\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      DUP6 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 34\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 216\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 153\t\t\t\n      JUMP \t\t\t\n    tag 216\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 154\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 218\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 145\t\t\t\n      JUMP \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 58\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 220\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 221\t\t\t\n      PUSH [tag] 139\t\t\t\n      JUMP \t\t\t\n    tag 221\t\t\t\n      JUMPDEST \t\t\t\n    tag 220\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 222\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 154\t\t\t\n      JUMP \t\t\t\n    tag 222\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 223\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 154\t\t\t\n      JUMP \t\t\t\n    tag 223\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      PUSH [tag] 224\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 154\t\t\t\n      JUMP \t\t\t\n    tag 224\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      JUMP \t\t\t\n    tag 155\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 157\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 228\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP6 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 230\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      DUP7 \t\t\t\n      DIV \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 231\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 232\t\t\t\n      PUSH [tag] 155\t\t\t\n      JUMP \t\t\t\n    tag 232\t\t\t\n      JUMPDEST \t\t\t\n    tag 231\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 233\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MUL \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 233\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP2 \t\t\t\n      MUL \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 234\t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 234\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 228\t\t\t\n      JUMP \t\t\t\n    tag 230\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 158\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 236\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 235\t\t\t\n      JUMP \t\t\t\n    tag 236\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 237\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 235\t\t\t\n      JUMP \t\t\t\n    tag 237\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 239\t\t\t\n      JUMPI \t\t\t\n      PUSH 2\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 240\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 238\t\t\t\n      JUMP \t\t\t\n    tag 239\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH [tag] 235\t\t\t\n      JUMP \t\t\t\n    tag 240\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FF\t\t\t\n      DUP5 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 241\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 242\t\t\t\n      PUSH [tag] 155\t\t\t\n      JUMP \t\t\t\n    tag 242\t\t\t\n      JUMPDEST \t\t\t\n    tag 241\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      PUSH 2\t\t\t\n      EXP \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 243\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 244\t\t\t\n      PUSH [tag] 155\t\t\t\n      JUMP \t\t\t\n    tag 244\t\t\t\n      JUMPDEST \t\t\t\n    tag 243\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 235\t\t\t\n      JUMP \t\t\t\n    tag 238\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH 133\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      AND \t\t\t\n      PUSH 4E\t\t\t\n      DUP5 \t\t\t\n      LT \t\t\t\n      PUSH B\t\t\t\n      DUP5 \t\t\t\n      LT \t\t\t\n      AND \t\t\t\n      OR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 245\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      EXP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 246\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 247\t\t\t\n      PUSH [tag] 155\t\t\t\n      JUMP \t\t\t\n    tag 247\t\t\t\n      JUMPDEST \t\t\t\n    tag 246\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 235\t\t\t\n      JUMP \t\t\t\n    tag 245\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 248\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 248\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      DIV \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 249\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 250\t\t\t\n      PUSH [tag] 155\t\t\t\n      JUMP \t\t\t\n    tag 250\t\t\t\n      JUMPDEST \t\t\t\n    tag 249\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MUL \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 235\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 60\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 252\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 252\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 253\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 253\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 254\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP \t\t\t\n    tag 254\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 65\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 256\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 257\t\t\t\n      PUSH [tag] 139\t\t\t\n      JUMP \t\t\t\n    tag 257\t\t\t\n      JUMPDEST \t\t\t\n    tag 256\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 258\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 154\t\t\t\n      JUMP \t\t\t\n    tag 258\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 67\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 260\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 260\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 261\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MUL \t\t\t\n      PUSH [tag] 262\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 262\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      DUP5 \t\t\t\n      EQ \t\t\t\n      DUP4 \t\t\t\n      ISZERO \t\t\t\n      OR \t\t\t\n      PUSH [tag] 263\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 264\t\t\t\n      PUSH [tag] 155\t\t\t\n      JUMP \t\t\t\n    tag 264\t\t\t\n      JUMPDEST \t\t\t\n    tag 263\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 159\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 12\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 69\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 267\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 267\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 268\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 268\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 269\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 270\t\t\t\n      PUSH [tag] 159\t\t\t\n      JUMP \t\t\t\n    tag 270\t\t\t\n      JUMPDEST \t\t\t\n    tag 269\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 83\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 272\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 272\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 273\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP \t\t\t\n    tag 273\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 274\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 275\t\t\t\n      PUSH [tag] 155\t\t\t\n      JUMP \t\t\t\n    tag 275\t\t\t\n      JUMPDEST \t\t\t\n    tag 274\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 160\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 161\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 596F752077616E7420746F206D6F7265206D6F72652076616C7565207468616E\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20616C6C6F776564000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 162\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 279\t\t\t\n      PUSH 28\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 160\t\t\t\n      JUMP \t\t\t\n    tag 279\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 280\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 161\t\t\t\n      JUMP \t\t\t\n    tag 280\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 86\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 282\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 162\t\t\t\n      JUMP \t\t\t\n    tag 282\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 89\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 284\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 137\t\t\t\n      JUMP \t\t\t\n    tag 284\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 285\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 144\t\t\t\n      JUMP \t\t\t\n    tag 285\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 102\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 41\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 106\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 32\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    .data\n"
}