/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ERC20BalanceMonitorContract
  extends Truffle.Contract<ERC20BalanceMonitorInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ERC20BalanceMonitorInstance>;
}

type AllEvents = never;

export interface ERC20BalanceMonitorInstance extends Truffle.ContractInstance {
  balances(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: {
      logIndex: BN;
      emitterAddress: string;
      topics: string[];
      data: string;
      removed: boolean;
    };
    6: string;
  }>;

  confirmBalanceEvent: {
    (
      transaction: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionHash: string;
            requiredConfirmations: number | BN | string;
            provideInput: boolean;
            listEvents: boolean;
            logIndices: (number | BN | string)[];
          };
          responseBody: {
            blockNumber: number | BN | string;
            timestamp: number | BN | string;
            sourceAddress: string;
            isDeployment: boolean;
            receivingAddress: string;
            value: number | BN | string;
            input: string;
            status: number | BN | string;
            events: {
              logIndex: number | BN | string;
              emitterAddress: string;
              topics: string[];
              data: string;
              removed: boolean;
            }[];
          };
        };
      },
      tokenAddress: string,
      targetAddress: string,
      eventIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      transaction: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionHash: string;
            requiredConfirmations: number | BN | string;
            provideInput: boolean;
            listEvents: boolean;
            logIndices: (number | BN | string)[];
          };
          responseBody: {
            blockNumber: number | BN | string;
            timestamp: number | BN | string;
            sourceAddress: string;
            isDeployment: boolean;
            receivingAddress: string;
            value: number | BN | string;
            input: string;
            status: number | BN | string;
            events: {
              logIndex: number | BN | string;
              emitterAddress: string;
              topics: string[];
              data: string;
              removed: boolean;
            }[];
          };
        };
      },
      tokenAddress: string,
      targetAddress: string,
      eventIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transaction: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionHash: string;
            requiredConfirmations: number | BN | string;
            provideInput: boolean;
            listEvents: boolean;
            logIndices: (number | BN | string)[];
          };
          responseBody: {
            blockNumber: number | BN | string;
            timestamp: number | BN | string;
            sourceAddress: string;
            isDeployment: boolean;
            receivingAddress: string;
            value: number | BN | string;
            input: string;
            status: number | BN | string;
            events: {
              logIndex: number | BN | string;
              emitterAddress: string;
              topics: string[];
              data: string;
              removed: boolean;
            }[];
          };
        };
      },
      tokenAddress: string,
      targetAddress: string,
      eventIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transaction: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionHash: string;
            requiredConfirmations: number | BN | string;
            provideInput: boolean;
            listEvents: boolean;
            logIndices: (number | BN | string)[];
          };
          responseBody: {
            blockNumber: number | BN | string;
            timestamp: number | BN | string;
            sourceAddress: string;
            isDeployment: boolean;
            receivingAddress: string;
            value: number | BN | string;
            input: string;
            status: number | BN | string;
            events: {
              logIndex: number | BN | string;
              emitterAddress: string;
              topics: string[];
              data: string;
              removed: boolean;
            }[];
          };
        };
      },
      tokenAddress: string,
      targetAddress: string,
      eventIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isEVMTransactionProofValid(
    transaction: {
      merkleProof: string[];
      data: {
        attestationType: string;
        sourceId: string;
        votingRound: number | BN | string;
        lowestUsedTimestamp: number | BN | string;
        requestBody: {
          transactionHash: string;
          requiredConfirmations: number | BN | string;
          provideInput: boolean;
          listEvents: boolean;
          logIndices: (number | BN | string)[];
        };
        responseBody: {
          blockNumber: number | BN | string;
          timestamp: number | BN | string;
          sourceAddress: string;
          isDeployment: boolean;
          receivingAddress: string;
          value: number | BN | string;
          input: string;
          status: number | BN | string;
          events: {
            logIndex: number | BN | string;
            emitterAddress: string;
            topics: string[];
            data: string;
            removed: boolean;
          }[];
        };
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    balances(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: string;
      2: BN;
      3: BN;
      4: BN;
      5: {
        logIndex: BN;
        emitterAddress: string;
        topics: string[];
        data: string;
        removed: boolean;
      };
      6: string;
    }>;

    confirmBalanceEvent: {
      (
        transaction: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionHash: string;
              requiredConfirmations: number | BN | string;
              provideInput: boolean;
              listEvents: boolean;
              logIndices: (number | BN | string)[];
            };
            responseBody: {
              blockNumber: number | BN | string;
              timestamp: number | BN | string;
              sourceAddress: string;
              isDeployment: boolean;
              receivingAddress: string;
              value: number | BN | string;
              input: string;
              status: number | BN | string;
              events: {
                logIndex: number | BN | string;
                emitterAddress: string;
                topics: string[];
                data: string;
                removed: boolean;
              }[];
            };
          };
        },
        tokenAddress: string,
        targetAddress: string,
        eventIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        transaction: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionHash: string;
              requiredConfirmations: number | BN | string;
              provideInput: boolean;
              listEvents: boolean;
              logIndices: (number | BN | string)[];
            };
            responseBody: {
              blockNumber: number | BN | string;
              timestamp: number | BN | string;
              sourceAddress: string;
              isDeployment: boolean;
              receivingAddress: string;
              value: number | BN | string;
              input: string;
              status: number | BN | string;
              events: {
                logIndex: number | BN | string;
                emitterAddress: string;
                topics: string[];
                data: string;
                removed: boolean;
              }[];
            };
          };
        },
        tokenAddress: string,
        targetAddress: string,
        eventIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        transaction: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionHash: string;
              requiredConfirmations: number | BN | string;
              provideInput: boolean;
              listEvents: boolean;
              logIndices: (number | BN | string)[];
            };
            responseBody: {
              blockNumber: number | BN | string;
              timestamp: number | BN | string;
              sourceAddress: string;
              isDeployment: boolean;
              receivingAddress: string;
              value: number | BN | string;
              input: string;
              status: number | BN | string;
              events: {
                logIndex: number | BN | string;
                emitterAddress: string;
                topics: string[];
                data: string;
                removed: boolean;
              }[];
            };
          };
        },
        tokenAddress: string,
        targetAddress: string,
        eventIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        transaction: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionHash: string;
              requiredConfirmations: number | BN | string;
              provideInput: boolean;
              listEvents: boolean;
              logIndices: (number | BN | string)[];
            };
            responseBody: {
              blockNumber: number | BN | string;
              timestamp: number | BN | string;
              sourceAddress: string;
              isDeployment: boolean;
              receivingAddress: string;
              value: number | BN | string;
              input: string;
              status: number | BN | string;
              events: {
                logIndex: number | BN | string;
                emitterAddress: string;
                topics: string[];
                data: string;
                removed: boolean;
              }[];
            };
          };
        },
        tokenAddress: string,
        targetAddress: string,
        eventIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isEVMTransactionProofValid(
      transaction: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionHash: string;
            requiredConfirmations: number | BN | string;
            provideInput: boolean;
            listEvents: boolean;
            logIndices: (number | BN | string)[];
          };
          responseBody: {
            blockNumber: number | BN | string;
            timestamp: number | BN | string;
            sourceAddress: string;
            isDeployment: boolean;
            receivingAddress: string;
            value: number | BN | string;
            input: string;
            status: number | BN | string;
            events: {
              logIndex: number | BN | string;
              emitterAddress: string;
              topics: string[];
              data: string;
              removed: boolean;
            }[];
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
