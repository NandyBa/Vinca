/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFlareContractRegistryContract
  extends Truffle.Contract<IFlareContractRegistryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IFlareContractRegistryInstance>;
}

type AllEvents = never;

export interface IFlareContractRegistryInstance
  extends Truffle.ContractInstance {
  getAllContracts(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: string[] }>;

  getContractAddressByHash(
    _nameHash: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getContractAddressByName(
    _name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getContractAddressesByHash(
    _nameHashes: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getContractAddressesByName(
    _names: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  methods: {
    getAllContracts(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: string[] }>;

    getContractAddressByHash(
      _nameHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getContractAddressByName(
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getContractAddressesByHash(
      _nameHashes: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getContractAddressesByName(
      _names: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
